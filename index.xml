<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Shuzang's Blog</title><link>https://shuzang.github.io/</link><description>书藏的个人博客，生活和学习记录，目前包括计算机基础、编程语言、实战项目、hugo 使用、区块链研究等学习内容，以及一些读书笔记、游记和观影记录等。</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>lylw1996@qq.com (shuzang)</managingEditor><webMaster>lylw1996@qq.com (shuzang)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 18 Oct 2020 10:16:00 +0800</lastBuildDate><atom:link href="https://shuzang.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>计算机基础-实数在计算机中的存储</title><link>https://shuzang.github.io/storage-of-reals-in-computers/</link><pubDate>Sun, 18 Oct 2020 10:16:00 +0800</pubDate><author>作者</author><guid>https://shuzang.github.io/storage-of-reals-in-computers/</guid><description><![CDATA[<p>最近在智能合约中实现信誉算法，但是 Solidity 不支持浮点数赋值和运算，好在有人写了一个库实现了 IEEE 754 浮点数标准，只不过输入输出都是二进制，所以回过头来仔细理解一下实数在计算机中的存储。</p>
<h2 id="1-实数">1. 实数</h2>
<p>实数就是带有整数部分和小数部分的数字。</p>
<h2 id="2-实数的定点表示">2. 实数的定点表示</h2>
<p>定点表示就是固定小数点的表示法，比如 23.75，就可以表示为 $(10111.11)_2$
$$
23.75 = 23 + 0.75 = (2^4 + 2^2 + 2^1 + 2^0) + (2^{-1} + 2^{-2})
$$
但是，由于不确定整数部分和小数部分各需要多少位来存储，很容易出现精度的丢失。</p>
<ul>
<li>小数部分精度受损：用 16 位二进制数表示一个实数，其中整数部分 14 位，小数部分 2 位，此时存储十进制数 1.00234 就会损失精度，最终存储在计算机中的结果是 1.00</li>
<li>整数部分精度受损：用 16 位二进制数表示一个实数，其中整数部分 2 位，小数部分 14 位，此时存储十进制数 10.00234 就会损失精度，最终存储在计算机中的结果是 2.00234</li>
</ul>
<p>因此，为了维持精度，在计算机中存储实数通常采用的是浮点表示法。</p>
<h2 id="3-实数的浮点表示">3. 实数的浮点表示</h2>
<p>浮点的意思是允许小数点浮动，比如，当我们表示十进制数 7500.24 时，采用科学计数法可以将小数点左移 3 位，从而表示为 $7.50024 \times 10^3$，写作 +7.50024E3。通过这种方式我们就可以控制小数点左右任一部分的数字个数，从而便于存储，一般情况我们会在小数点左边仅保留 1 位。</p>
<h3 id="31-规范化">3.1 规范化</h3>
<p>科学计数法用于十进制数，当这种小数点浮动的方法用于二进制数时，就叫做浮点表示法。</p>
<p>以上面的数字 23.75 为例，其二进制表示为 $(10111.11)_2$，采用浮点表示法，可以表示为 $1.011111 \times 2^4$。我们通常将这样一个数字划分为三部分：<code>符号 Sign</code>，<code>指数 Exponent</code> 和 <code>尾数 Mantissa</code>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">+       2^4   ×   1.011111      // 浮点表示
--------------------------
+        <span class="m">4</span>         <span class="m">011111</span>       // 拆分
↑        ↑            ↑
sign  Exponent    Mantissa      // 含义
</code></pre></td></tr></table>
</div>
</div><p>符号位用一个二进制位表示，0 表示正，1 表示负；尾数指的是小数点右侧的二进制数，定义了该数的精度，小数点和小数点左侧的 1 没有存储，它们是隐含的；指数是小数点移动的位数，使用余码表示法存储，下面进行介绍。</p>
<p>余码表示法的出现是因为指数也有符号，比如 $(10111.11)_2$ 的浮点表示为 $1.011111 \times 2^4$，此时指数为正整数 4，但是$(0.00101)_2$ 的浮点表示为 $1.01 \times 2^{-3}$，此时指数为负整数 -3。如果不想在指数部分使用一个额外的符号位，就要想一种别的表示法，这就是<strong>余码表示法</strong>。下面我们通过一个例子来介绍它。</p>
<p>4 位的二进制数可以表示 16 个整数，即 -7 到 8，我们采用对它们统一加一个偏移量的方法来把这些数字全部变成非负整数，这个例子中，我们对所有的数字统一 +7，这样十六个整数就变成了 0 到 15，如下图</p>
<p></p>
<p>这种加一个偏移量的方法并没有改变数字之间的相对位置，因此当我们得到这样一个数字，又知道了它的偏移量，是可以转换回原本的数字的，这种方法就叫做余码表示法。上例中，偏移量为 7，所以更具体一点可以称为余7码。</p>
<h3 id="32-ieee-754标准">3.2 IEEE 754标准</h3>
<p>IEEE 制定的 754 标准是关于计算机软硬件浮点数表示和运算的标准，被各大硬件厂商和编程语言所采用。该标准的内容其实就是浮点表示法的三部分各占多少位，如下表</p>
<table>
<thead>
<tr>
<th></th>
<th>单精度(Single Precision)</th>
<th>双精度(Double Precision)</th>
<th>四精度(Quadruple Precision)</th>
</tr>
</thead>
<tbody>
<tr>
<td>数字位数</td>
<td>32</td>
<td>64</td>
<td>128</td>
</tr>
<tr>
<td>符号位数</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>指数位数</td>
<td>8</td>
<td>11</td>
<td>15</td>
</tr>
<tr>
<td>尾数位数</td>
<td>23</td>
<td>52</td>
<td>112</td>
</tr>
<tr>
<td>偏移量</td>
<td>127</td>
<td>1023</td>
<td>16383</td>
</tr>
</tbody>
</table>
<ul>
<li>精度：当用 32 位二进制数表示时，我们称为单精度，当用 64 位表示时，我们称为双精度。</li>
<li>偏移量：偏移量的计算方法为 $2^{m-1}-1$，$m$ 是指数位数。偏移量是多少，就是余多少码，比如，单精度偏移量为 127，就是余127码。</li>
</ul>
<p>一个实数转换为浮点数表示的步骤为</p>
<ol>
<li>确定符号位 S；</li>
<li>将数的绝对值转换为二进制数；</li>
<li>规范化二进制数；</li>
<li>确定指数 E 和尾数 M，尾数不足在右侧补0；</li>
<li>将 SEM 相连。</li>
</ol>
<p>下面用一些例子来说明该过程，以及给定一个浮点数的二进制表示表示如何反向计算出这个实数。</p>
<p><strong>Example 1</strong>：写出十进制数 -0.0234375 的余127码（单精度）表示法</p>
<ol>
<li>
<p>S = 1（符号位为负）</p>
</li>
<li>
<p>十进制转换二进制：$0.0234375 = (0.0000011)_2$</p>
</li>
<li>
<p>规范化：$(0.0000011)_2 = (1.1)_2 \times 2^{-6}$</p>
</li>
<li>
<p>指数 $E = -6 + 127 = 121 = (01111001)_2$，尾数 $M = (1)_2$</p>
</li>
<li>
<p>连接 SEM：$(10111100110000000000000000000000)_2$</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">1   01111001   10000000000000000000000
S       E                  M
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<p><strong>Example 2</strong>：位模式 $(11001010000000000111000100001111)_2$ 以余127码格式存储于内存中. 求该数字十进制计数法的值.</p>
<ol>
<li>
<p>拆分：首位 S，接下来 8 位为 E，剩下的 23 位为 M</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">1   10010100   00000000111000100001111
S       E                  M
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>符号为负号</p>
</li>
<li>
<p>指数 = E - 127 = 148 - 127 = 21</p>
</li>
<li>
<p>将 $(1.00000000111000100001111)_2 \times 2^{21}$ 去规范化得到 $(1000000001110001000011.11)_2$</p>
</li>
<li>
<p>得到的二进制数化为十进制为 2104378.75</p>
</li>
<li>
<p>最终的数字为 -2104378.75</p>
</li>
</ol>
<p><strong>Example 3</strong>：实数 0.0 的存储，这是特例，规定这种情况符号、指数和尾数都为0</p>
<hr>
<p>后记：所找的的库实现 IEEE 754 标准时，输入输出都是二进制，因此，还需要自行实现两个算法从而实现和十进制实数的相互转换，算法就是上面两个例子的步骤。</p>]]></description></item><item><title>浮点数处理</title><link>https://shuzang.github.io/math-in-solidity/</link><pubDate>Sun, 18 Oct 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://shuzang.github.io/math-in-solidity/</guid><description><![CDATA[<p>对 Solidity 中如何进行浮点数的处理做说明。</p>
<p>首先声明，Solidity 中支持浮点数定义，但无法赋值和进行计算。文档中对其描述是「目前还不完全支持」，虽然这意味着以后可能会完全支持，但等不及了，下面记录几个可参考的资料。</p>
<ol>
<li>来自 <a href="https://ethereum.stackexchange.com/questions/83785/what-fixed-or-float-point-math-libraries-are-available-in-solidity" target="_blank" rel="noopener noreffer">ethereum stackexchange</a> 中的回答，介绍了一些可用的库；</li>
<li><a href="https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMathQuad.md" target="_blank" rel="noopener noreffer">ABDK Math Quad</a>，包含两个合约库，一个支持定点数，一个支持浮点数；</li>
<li>Mikhail Vladimirov 的 <a href="https://medium.com/coinmonks/math-in-solidity-part-1-numbers-384c8377f26d" target="_blank" rel="noopener noreffer">Math in Solidity</a> 系列文章，介绍如何在 Solidity 中处理各种数学运算，写的非常棒。</li>
</ol>]]></description></item><item><title>Mysql学习补充-临时表与派生表</title><link>https://shuzang.github.io/mysql-learning-supplement-temporary-table-and-derived-table/</link><pubDate>Tue, 13 Oct 2020 19:15:00 +0800</pubDate><author>作者</author><guid>https://shuzang.github.io/mysql-learning-supplement-temporary-table-and-derived-table/</guid><description><![CDATA[<p>区分 MySQL 中临时表与派生表的概念，明确它们的用途。</p>
<h2 id="1-临时表">1. 临时表</h2>
<p>本节参考 <a href="https://www.yiibai.com/mysql/temporary-table.html" target="_blank" rel="noopener noreffer">易百教程-MySQL临时表</a></p>
<h3 id="11-简介">1.1 简介</h3>
<p>就像它的名字，临时表是一个临时的结果集，一般在多表连接时使用，存储一个临时的结果以便另一个查询来处理。</p>
<p>临时表的一些注意如下</p>
<ul>
<li>在 <code>CREATE</code> 和 <code>TABLE</code> 中间添加 <code>TEMPORARY</code> 关键字来创建临时表，即 <code>CREATE TEMPOPARY TABLE</code>；</li>
<li>连接结束时，临时表会被自动删除，当然，也可以使用 DROP TABLE 显式删除。注意，这里的连接结束指的是数据库连接，当开发时使用连接池或者持久连接时，无法保证临时表在程序终止时自动删除，因为程序结束时连接不一定结束，而是会放到连接池；</li>
<li>临时表只能被创建它的客户端看到和访问，因此不同的客户端可以创建具有相同名称的临时表，不会导致冲突；</li>
<li>临时表可以与数据库中的普通表（永久表）具有相同的名称，但会屏蔽掉永久表，只有临时表被删除后永久表才能再次访问。但不建议这样做，因为如果服务器断线重连，将无法区分临时表和永久表，此时发起 DELETE TABLE 可能会删除掉永久表。</li>
</ul>
<h3 id="12-创建">1.2 创建</h3>
<p>如上所述，使用 <code>CREATE TEMPORARY TABLE</code> 创建临时表。下例中创建了一个临时表，按照收入存储前 10 名客户</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">CREATE</span> <span class="n">TEMPORARY</span> <span class="k">TABLE</span> <span class="n">top10customers</span>
<span class="k">SELECT</span> <span class="n">p</span><span class="p">.</span><span class="n">customerNumber</span><span class="p">,</span> 
       <span class="n">c</span><span class="p">.</span><span class="n">customerName</span><span class="p">,</span> 
       <span class="nf">FORMAT</span><span class="p">(</span><span class="nf">SUM</span><span class="p">(</span><span class="n">p</span><span class="p">.</span><span class="n">amount</span><span class="p">),</span><span class="mi">2</span><span class="p">)</span> <span class="n">total</span>
<span class="k">FROM</span> <span class="n">payments</span> <span class="n">p</span>
<span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">customers</span> <span class="n">c</span> <span class="k">ON</span> <span class="n">c</span><span class="p">.</span><span class="n">customerNumber</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">customerNumber</span>
<span class="k">GROUP</span> <span class="k">BY</span> <span class="n">p</span><span class="p">.</span><span class="n">customerNumber</span>
<span class="k">ORDER</span> <span class="k">BY</span> <span class="n">total</span> <span class="k">DESC</span>
<span class="k">LIMIT</span> <span class="mi">10</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>从创建的临时表中查询数据如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">top10customers</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="13-删除">1.3 删除</h3>
<p>使用 <code>DROP TEMPORARY TABLE</code> 删除临时表，如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">DROP</span> <span class="n">TEMPORARY</span> <span class="k">TABLE</span> <span class="n">top10customers</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>关键词 <code>TEMPORARY</code> 可以省略，但为了避免删除永久表的错误，最好还是加上该关键词。</p>
<h2 id="2-派生表">2. 派生表</h2>
<p>本节参考 <a href="https://www.yiibai.com/mysql/derived-table.html" target="_blank" rel="noopener noreffer">易百教程-MySQL派生</a></p>
<p>当在 SELECT 语句的 FROM 子句中使用独立子查询时，将其称为派生表。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">SELECT</span> <span class="n">column_list</span>
<span class="k">FROM</span> <span class="p">(</span> <span class="c1"># 圆括号中的子查询结果即为派生表
</span><span class="c1"></span>	<span class="k">SELECT</span> <span class="n">column_list</span>
    <span class="k">FROM</span> <span class="n">table_1</span>
<span class="p">)</span> <span class="n">derived_table_name</span> <span class="c1"># 派生表必须具有别名
</span><span class="c1"></span><span class="k">WHERE</span> <span class="n">derived_table_name</span><span class="p">.</span><span class="n">c1</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>派生表必须具有别名，以便在稍后的查询中引用，否则，MySQL 将给出如下错误</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="n">Every</span> <span class="n">derived</span> <span class="k">table</span> <span class="n">must</span> <span class="n">have</span> <span class="n">its</span> <span class="n">own</span> <span class="n">alias</span><span class="p">.</span>
</code></pre></td></tr></table>
</div>
</div><p>所以，我们可以看到，派生表不需要像临时表那样需要创建。</p>]]></description></item><item><title>Go实现2048小游戏</title><link>https://shuzang.github.io/a-cli-implement-of-2048-game-using-go/</link><pubDate>Thu, 08 Oct 2020 19:35:00 +0800</pubDate><author>作者</author><guid>https://shuzang.github.io/a-cli-implement-of-2048-game-using-go/</guid><description><![CDATA[<p>Go 实现一个命令行界面的 2048 游戏，仅涉及 Git 和 Go，用来熟悉基本语言特性。原型项目来自 <a href="https://github.com/chhabraamit/2048">https://github.com/chhabraamit/2048</a></p>
<h2 id="1-环境准备">1. 环境准备</h2>
<p>Win10 环境，go 1.14.3，编辑器为 VScode，使用 Github 管理代码。</p>
<p>首先在网页端建立 Github 仓库，选择 MIT 协议，然后克隆仓库到本地</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ git clone https://github.com/shuzang/2048.git
</code></pre></td></tr></table>
</div>
</div><p>在项目根目录创建 <code>main.go</code> 文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Getting started!&#34;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>初始化项目</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ go mod init github.com/shuzang
</code></pre></td></tr></table>
</div>
</div><h2 id="2-显示游戏面板">2. 显示游戏面板</h2>
<p>2048 的游戏界面是一个 4×4 的网格，我们使用一个二维切片作为底层结构存储数字，然后按照网格的形式输出到终端，数字随机生成。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// game/board.go
</span><span class="c1"></span><span class="kn">package</span> <span class="nx">game</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;math/rand&#34;</span>
	<span class="s">&#34;time&#34;</span>
<span class="p">)</span>

<span class="c1">// 游戏界面规格
</span><span class="c1"></span><span class="kd">const</span> <span class="nx">_rows</span><span class="p">,</span> <span class="nx">_cols</span> <span class="p">=</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span>

<span class="kd">type</span> <span class="nx">Board</span> <span class="kd">interface</span> <span class="p">{</span>
	<span class="nf">Display</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">board</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">board</span> <span class="p">[][]</span><span class="kt">int</span>
<span class="p">}</span>

<span class="cm">/* 显示 4×4 网格形式的游戏界面
</span><span class="cm">*/</span>
<span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">Display</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">b</span><span class="p">.</span><span class="nx">board</span> <span class="p">=</span> <span class="nf">generate</span><span class="p">()</span>
	<span class="nf">printHorizontalLine</span><span class="p">()</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nf">printVerticalLine</span><span class="p">()</span>
		<span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">_cols</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
            <span class="c1">// 每个数字占7个位置，如果为0，输出空字符
</span><span class="c1"></span>			<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
				<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%7s&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span><span class="c1">// 数字不为0，使其位于中间，方法是使其占4位，然后接着输出3个空字符
</span><span class="c1"></span>				<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%4d%3s&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">],</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
			<span class="p">}</span>
			<span class="nf">printVerticalLine</span><span class="p">()</span>
		<span class="p">}</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">()</span>
		<span class="nf">printHorizontalLine</span><span class="p">()</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 输出横线，4*7+5 = 33
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">printHorizontal</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">33</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;-&#34;</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">()</span>
<span class="p">}</span>

<span class="c1">// 输出竖线
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">printVertical</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;|&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 生成所需的所有随机数
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">generate</span><span class="p">()</span> <span class="p">[][]</span><span class="kt">int</span> <span class="p">{</span>
	<span class="c1">// Store all available numbers from 2 to 2048
</span><span class="c1"></span>	<span class="nx">nums</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
	<span class="nx">nums</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">nums</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">2</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">2048</span><span class="p">;</span> <span class="nx">i</span> <span class="o">*=</span> <span class="mi">2</span> <span class="p">{</span>
		<span class="nx">nums</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">nums</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="c1">// generate random numbers for init board
</span><span class="c1"></span>	<span class="nx">rand</span><span class="p">.</span><span class="nf">Seed</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">UnixNano</span><span class="p">())</span>
    <span class="nx">matrix</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">_rows</span><span class="p">)</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">matrix</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">_cols</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">_cols</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
			<span class="nx">matrix</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">rand</span><span class="p">.</span><span class="nf">Int</span><span class="p">()</span><span class="o">%</span><span class="nb">len</span><span class="p">(</span><span class="nx">nums</span><span class="p">)]</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="nx">matrix</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">NewBoard</span><span class="p">()</span> <span class="o">*</span><span class="nx">Board</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">board</span><span class="p">{}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>然后修改 main.go 如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// main.go
</span><span class="c1"></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;fmt&#34;</span>

	<span class="s">&#34;github.com/shuzang/2048/game&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Getting started!&#34;</span><span class="p">)</span>
	<span class="nx">b</span> <span class="o">:=</span> <span class="nx">game</span><span class="p">.</span><span class="nf">NewBoard</span><span class="p">()</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">Display</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>运行 <code>go run main.go</code> 可以看到一个临时的游戏面板。</p>
<h2 id="3-添加元素">3. 添加元素</h2>
<p>上面的程序随机生成了 16 个数字填充游戏面板，但这只是初始测试，正式游戏的做法是：初始时随机填充两个数字，然后每个键盘输入新增一个数字。这里还要注意每一步生成的数字有两种选择，2 或 4，我们可以控制这两个数字生成的概率。</p>
<p>所以添加新元素被抽象为一个独立的函数，如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// game/board.go
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">board</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">board</span>  <span class="p">[][]</span><span class="kt">int</span>
	<span class="nx">nx</span><span class="p">,</span> <span class="nx">ny</span> <span class="kt">int</span>
<span class="p">}</span>

<span class="c1">// 被折叠的代码...
</span><span class="c1"></span>
<span class="c1">// 随机填充一个新数字
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">AddElement</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">rand</span><span class="p">.</span><span class="nf">Seed</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">UnixNano</span><span class="p">())</span>
	<span class="c1">// 随机选择一个空白位置
</span><span class="c1"></span>	<span class="nx">index</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([][</span><span class="mi">2</span><span class="p">]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">_cols</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
			<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
				<span class="nx">index</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">})</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="nx">next</span> <span class="o">:=</span> <span class="nx">rand</span><span class="p">.</span><span class="nf">Int</span><span class="p">()</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span>
	<span class="nx">nx</span><span class="p">,</span> <span class="nx">ny</span> <span class="o">:=</span> <span class="nx">index</span><span class="p">[</span><span class="nx">next</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="nx">index</span><span class="p">[</span><span class="nx">next</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>
    
	<span class="c1">// 按概率选择数字 2 和 4
</span><span class="c1"></span>	<span class="kd">var</span> <span class="nx">number</span> <span class="kt">int</span>
	<span class="k">if</span> <span class="nx">rand</span><span class="p">.</span><span class="nf">Int</span><span class="p">()</span><span class="o">%</span><span class="mi">100</span> <span class="p">&lt;</span> <span class="mi">80</span> <span class="p">{</span>
		<span class="nx">number</span> <span class="p">=</span> <span class="mi">2</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="nx">number</span> <span class="p">=</span> <span class="mi">4</span>
	<span class="p">}</span>
	<span class="c1">// 将数字填充到选择的位置
</span><span class="c1"></span>    <span class="nx">b</span><span class="p">.</span><span class="nx">nx</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">ny</span> <span class="p">=</span> <span class="nx">nx</span><span class="p">,</span> <span class="nx">ny</span>
	<span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">nx</span><span class="p">][</span><span class="nx">ny</span><span class="p">]</span> <span class="p">=</span> <span class="nx">number</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">NewBoard</span><span class="p">()</span> <span class="o">*</span><span class="nx">board</span> <span class="p">{</span>
	<span class="nx">matrix</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">_rows</span><span class="p">)</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">matrix</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">_cols</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">board</span><span class="p">{</span><span class="nx">board</span><span class="p">:</span> <span class="nx">matrix</span><span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>board 结构体新增了 nx,ny 两个字段，是为了标记新添加的元素在游戏面板中的位置，我们需要将新元素以不同的颜色表示，这里用到了 fatih/color 包。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ go get -v github.com/gatih/color
</code></pre></td></tr></table>
</div>
</div><p>导入该包后修改显示函数如下，用不同的颜色输出新添加的元素。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// game/board.go
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">Display</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">c</span> <span class="o">:=</span> <span class="nx">color</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">color</span><span class="p">.</span><span class="nx">FgCyan</span><span class="p">,</span> <span class="nx">color</span><span class="p">.</span><span class="nx">Bold</span><span class="p">)</span>
	<span class="nf">printHorizontalLine</span><span class="p">()</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nf">printVerticalLine</span><span class="p">()</span>
		<span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">_cols</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
			<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
				<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%7s&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
			<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">i</span> <span class="o">==</span> <span class="nx">b</span><span class="p">.</span><span class="nx">nx</span> <span class="o">&amp;&amp;</span> <span class="nx">j</span> <span class="o">==</span> <span class="nx">b</span><span class="p">.</span><span class="nx">ny</span> <span class="p">{</span>
				<span class="nx">c</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%4d%3s&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">],</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
				<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%4d%3s&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">],</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
			<span class="p">}</span>
			<span class="nf">printVerticalLine</span><span class="p">()</span>
		<span class="p">}</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">()</span>
		<span class="nf">printHorizontalLine</span><span class="p">()</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>相应的，主函数修改如下，添加 10 个元素并输出</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// main.go
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Getting started!&#34;</span><span class="p">)</span>
    <span class="nx">b</span> <span class="o">:=</span> <span class="nx">game</span><span class="p">.</span><span class="nf">NewBoard</span><span class="p">()</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">b</span><span class="p">.</span><span class="nf">Display</span><span class="p">()</span>
		<span class="nx">b</span><span class="p">.</span><span class="nf">AddElement</span><span class="p">()</span>		
	<span class="p">}</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Game over!&#34;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="4-先清屏后显示">4. 先清屏后显示</h2>
<p>上面的程序会把每一步的面板都输出到终端，我们应当添加的一个功能是，每一步只输出当前的游戏面板。该功能通过清屏函数实现，注意，清屏的实现在不同操作系统可能会有区别，下面的实现适用于 Windows 系统。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// game/board.go
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">Display</span><span class="p">()</span> <span class="p">{</span>
	<span class="c1">// clear screen, but only works on windows
</span><span class="c1"></span>	<span class="nx">cmd</span> <span class="o">:=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="s">&#34;cmd&#34;</span><span class="p">,</span> <span class="s">&#34;/c&#34;</span><span class="p">,</span> <span class="s">&#34;cls&#34;</span><span class="p">)</span>
	<span class="nx">cmd</span><span class="p">.</span><span class="nx">Stdout</span> <span class="p">=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Stdout</span>
	<span class="nx">cmd</span><span class="p">.</span><span class="nf">Run</span><span class="p">()</span>
	<span class="nx">c</span> <span class="o">:=</span> <span class="nx">color</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">color</span><span class="p">.</span><span class="nx">FgCyan</span><span class="p">,</span> <span class="nx">color</span><span class="p">.</span><span class="nx">Bold</span><span class="p">)</span>
	<span class="nf">printHorizontalLine</span><span class="p">()</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nf">printVerticalLine</span><span class="p">()</span>
		<span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">_cols</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
			<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
				<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%7s&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
			<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">i</span> <span class="o">==</span> <span class="nx">b</span><span class="p">.</span><span class="nx">nx</span> <span class="o">&amp;&amp;</span> <span class="nx">j</span> <span class="o">==</span> <span class="nx">b</span><span class="p">.</span><span class="nx">ny</span> <span class="p">{</span>
				<span class="nx">c</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%4d%3s&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">],</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
				<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%4d%3s&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">],</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
			<span class="p">}</span>

			<span class="nf">printVerticalLine</span><span class="p">()</span>
		<span class="p">}</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">()</span>
		<span class="nf">printHorizontalLine</span><span class="p">()</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="5-获取键盘输入">5. 获取键盘输入</h2>
<p>游戏的每一步操作肯定都是根据键盘的输入来的，可以使用 {W, A, S, D} 和 方向键，如果使用 fmt 包中的输入函数，那么每次输入后都需要手动按下回车。为了不必每次输入字符后都敲一下回车键，我们使用 eiannone/keyboard 包</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ go get -v github.com/eiannone/keyboard
</code></pre></td></tr></table>
</div>
</div><p>将键盘输入对应的几个操作定义为几个常量，然后调用 keyboard 包中的 GetKeyStrokes() 函数接收键盘输入，返回对应的常量，最后在 TakeInput() 函数中根据不同常量交给对应的操作函数处理。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// game/board.go
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Key</span> <span class="kt">int</span>

<span class="c1">// 几个操作常量，向四个方向移动、退出和错误按键
</span><span class="c1"></span><span class="kd">const</span> <span class="p">(</span>
	<span class="nx">UP</span> <span class="nx">Key</span> <span class="p">=</span> <span class="kc">iota</span>
	<span class="nx">DOWN</span>
	<span class="nx">LEFT</span>
	<span class="nx">RIGHT</span>
	<span class="nx">QUIT</span>
	<span class="nx">ERROR_KEY</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">TakeInput</span><span class="p">()</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="nx">key</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">GetKeyStrokes</span><span class="p">()</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
	<span class="p">}</span>
	<span class="k">if</span> <span class="nx">key</span> <span class="o">==</span> <span class="nx">ERROR_KEY</span> <span class="p">{</span>
		<span class="nx">b</span><span class="p">.</span><span class="nf">TakeInput</span><span class="p">()</span>
	<span class="p">}</span>
	<span class="k">switch</span> <span class="nx">key</span> <span class="p">{</span>
	<span class="k">case</span> <span class="nx">UP</span><span class="p">:</span>
		<span class="nx">b</span><span class="p">.</span><span class="nf">moveUp</span><span class="p">()</span>
	<span class="k">case</span> <span class="nx">DOWN</span><span class="p">:</span>
		<span class="nx">b</span><span class="p">.</span><span class="nf">moveDown</span><span class="p">()</span>
	<span class="k">case</span> <span class="nx">LEFT</span><span class="p">:</span>
		<span class="nx">b</span><span class="p">.</span><span class="nf">moveLeft</span><span class="p">()</span>
	<span class="k">case</span> <span class="nx">RIGHT</span><span class="p">:</span>
		<span class="nx">b</span><span class="p">.</span><span class="nf">moveRight</span><span class="p">()</span>
	<span class="k">case</span> <span class="nx">QUIT</span><span class="p">:</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;You press ESC, game exit!&#34;</span><span class="p">)</span>
		<span class="k">return</span> <span class="kc">false</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="kc">true</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">GetKeyStrokes</span><span class="p">()</span> <span class="p">(</span><span class="nx">Key</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">char</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">keyboard</span><span class="p">.</span><span class="nf">GetSingleKey</span><span class="p">()</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">ERROR_KEY</span><span class="p">,</span> <span class="nx">err</span>
	<span class="p">}</span>
	<span class="c1">//fmt.Printf(&#34;You pressed: %c, key %X\r\n&#34;, char, key)
</span><span class="c1"></span>	<span class="k">if</span> <span class="nb">int</span><span class="p">(</span><span class="nx">char</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
		<span class="k">switch</span> <span class="nx">key</span> <span class="p">{</span>
		<span class="k">case</span> <span class="nx">keyboard</span><span class="p">.</span><span class="nx">KeyArrowUp</span><span class="p">:</span>
			<span class="k">return</span> <span class="nx">UP</span><span class="p">,</span> <span class="kc">nil</span>
		<span class="k">case</span> <span class="nx">keyboard</span><span class="p">.</span><span class="nx">KeyArrowDown</span><span class="p">:</span>
			<span class="k">return</span> <span class="nx">DOWN</span><span class="p">,</span> <span class="kc">nil</span>
		<span class="k">case</span> <span class="nx">keyboard</span><span class="p">.</span><span class="nx">KeyArrowLeft</span><span class="p">:</span>
			<span class="k">return</span> <span class="nx">LEFT</span><span class="p">,</span> <span class="kc">nil</span>
		<span class="k">case</span> <span class="nx">keyboard</span><span class="p">.</span><span class="nx">KeyArrowRight</span><span class="p">:</span>
			<span class="k">return</span> <span class="nx">RIGHT</span><span class="p">,</span> <span class="kc">nil</span>
		<span class="k">case</span> <span class="nx">keyboard</span><span class="p">.</span><span class="nx">KeyEsc</span><span class="p">:</span>
			<span class="k">return</span> <span class="nx">QUIT</span><span class="p">,</span> <span class="kc">nil</span>
		<span class="k">default</span><span class="p">:</span>
			<span class="k">return</span> <span class="nx">ERROR_KEY</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;Invalid key, please press again!&#34;</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="k">switch</span> <span class="nx">char</span> <span class="p">{</span>
		<span class="k">case</span> <span class="mi">119</span><span class="p">:</span>
			<span class="k">return</span> <span class="nx">UP</span><span class="p">,</span> <span class="kc">nil</span>
		<span class="k">case</span> <span class="mi">97</span><span class="p">:</span>
			<span class="k">return</span> <span class="nx">LEFT</span><span class="p">,</span> <span class="kc">nil</span>
		<span class="k">case</span> <span class="mi">115</span><span class="p">:</span>
			<span class="k">return</span> <span class="nx">DOWN</span><span class="p">,</span> <span class="kc">nil</span>
		<span class="k">case</span> <span class="mi">100</span><span class="p">:</span>
			<span class="k">return</span> <span class="nx">RIGHT</span><span class="p">,</span> <span class="kc">nil</span>
		<span class="k">default</span><span class="p">:</span>
			<span class="k">return</span> <span class="nx">ERROR_KEY</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;Invalid key, please press again!&#34;</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>游戏退出有两种情况，一个是上面程序中定义的 QUIT 操作，用于游戏过程中主动输入 ESC 按键退出，另一个是游戏面板 16 个数字已满，Game over，通过添加以下函数实现</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// game/board.go
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">IsOver</span><span class="p">()</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="nx">blank</span> <span class="o">:=</span> <span class="mi">0</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">_cols</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
			<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
				<span class="nx">blank</span><span class="o">++</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">blank</span> <span class="o">==</span> <span class="mi">0</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>最后是程序开始的逻辑，即输入任意键开始。这部分逻辑在 main 函数中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// main.go
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Use {W A S D} or Arrow keys to move the board&#34;</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Press and key to start\n&#34;</span><span class="p">)</span>
	<span class="nx">_</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">keyboard</span><span class="p">.</span><span class="nf">GetSingleKey</span><span class="p">()</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalln</span><span class="p">(</span><span class="s">&#34;error while taking input to start the game&#34;</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">b</span> <span class="o">:=</span> <span class="nx">game</span><span class="p">.</span><span class="nf">NewBoard</span><span class="p">()</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">AddElement</span><span class="p">()</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">AddElement</span><span class="p">()</span>
	<span class="k">for</span> <span class="kc">true</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nf">IsOver</span><span class="p">()</span> <span class="p">{</span>
			<span class="k">break</span>
		<span class="p">}</span>
		<span class="nx">b</span><span class="p">.</span><span class="nf">AddElement</span><span class="p">()</span>
		<span class="nx">b</span><span class="p">.</span><span class="nf">Display</span><span class="p">()</span>
		<span class="nx">res</span> <span class="o">:=</span> <span class="nx">b</span><span class="p">.</span><span class="nf">TakeInput</span><span class="p">()</span>
		<span class="k">if</span> <span class="p">!</span><span class="nx">res</span> <span class="p">{</span>
			<span class="k">return</span>
		<span class="p">}</span>

	<span class="p">}</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;game over&#34;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="6-数字移动合并">6. 数字移动合并</h2>
<p>每个键盘输入都对应一个操作函数，四个方向的数字移动和合并是游戏的核心逻辑。如下，向左移动数字和合并单独实现，向右、向上和向下都能通过矩阵旋转转换为向左移动和合并的问题。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// game/board.go
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">moveLeft</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">old</span> <span class="o">:=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
		<span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nf">moveRow</span><span class="p">(</span><span class="nx">old</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">moveRight</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">Reverse</span><span class="p">()</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">moveLeft</span><span class="p">()</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">Reverse</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">moveUp</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">leftRotate90</span><span class="p">()</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">moveLeft</span><span class="p">()</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">rightRotate90</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">moveDown</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">rightRotate90</span><span class="p">()</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">moveLeft</span><span class="p">()</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">leftRotate90</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">rightRotate90</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">matrix</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">_rows</span><span class="p">)</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">matrix</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">_cols</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">_cols</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
			<span class="nx">matrix</span><span class="p">[</span><span class="nx">j</span><span class="p">][</span><span class="nx">_cols</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="nx">b</span><span class="p">.</span><span class="nx">board</span> <span class="p">=</span> <span class="nx">matrix</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">leftRotate90</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">matrix</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">_rows</span><span class="p">)</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">matrix</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">_cols</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">_cols</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
			<span class="nx">matrix</span><span class="p">[</span><span class="nx">_cols</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="nx">j</span><span class="p">][</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="nx">b</span><span class="p">.</span><span class="nx">board</span> <span class="p">=</span> <span class="nx">matrix</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">Reverse</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">for</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">k</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">_cols</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">k</span><span class="p">;</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">k</span> <span class="p">=</span> <span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nx">k</span><span class="o">-</span><span class="mi">1</span> <span class="p">{</span>
			<span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">],</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">k</span><span class="p">]</span> <span class="p">=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">k</span><span class="p">],</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">moveRow</span><span class="p">(</span><span class="nx">row</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span>
	<span class="nx">index</span> <span class="o">:=</span> <span class="mi">0</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">row</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nx">row</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
			<span class="nx">row</span><span class="p">[</span><span class="nx">index</span><span class="p">],</span> <span class="nx">row</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">row</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">row</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span>
			<span class="nx">index</span><span class="o">++</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">row</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nx">row</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="nx">row</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="p">{</span>
			<span class="nx">row</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">row</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>
			<span class="nx">row</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="mi">0</span>
			<span class="nx">i</span><span class="o">++</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="nx">index</span> <span class="p">=</span> <span class="mi">0</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">row</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nx">row</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
			<span class="nx">row</span><span class="p">[</span><span class="nx">index</span><span class="p">],</span> <span class="nx">row</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">row</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">row</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span>
			<span class="nx">index</span><span class="o">++</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">row</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>由于这部分逻辑比较复杂，需要测试一下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// game/board_test.go
</span><span class="c1"></span><span class="kn">package</span> <span class="nx">game</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;reflect&#34;</span>
	<span class="s">&#34;testing&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">TestMoveRow</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">tests</span> <span class="o">:=</span> <span class="p">[]</span><span class="kd">struct</span> <span class="p">{</span>
		<span class="nx">name</span>  <span class="kt">string</span>
		<span class="nx">input</span> <span class="p">[]</span><span class="kt">int</span>
		<span class="nx">want</span>  <span class="p">[]</span><span class="kt">int</span>
	<span class="p">}{</span>
		<span class="p">{</span>
			<span class="nx">name</span><span class="p">:</span>  <span class="s">&#34;one&#34;</span><span class="p">,</span>
			<span class="nx">input</span><span class="p">:</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
			<span class="nx">want</span><span class="p">:</span>  <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
		<span class="p">},</span>
		<span class="p">{</span>
			<span class="nx">name</span><span class="p">:</span>  <span class="s">&#34;two&#34;</span><span class="p">,</span>
			<span class="nx">input</span><span class="p">:</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">},</span>
			<span class="nx">want</span><span class="p">:</span>  <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
		<span class="p">},</span>
		<span class="p">{</span>
			<span class="nx">name</span><span class="p">:</span>  <span class="s">&#34;three&#34;</span><span class="p">,</span>
			<span class="nx">input</span><span class="p">:</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">},</span>
			<span class="nx">want</span><span class="p">:</span>  <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
		<span class="p">},</span>
		<span class="p">{</span>
			<span class="nx">name</span><span class="p">:</span>  <span class="s">&#34;four&#34;</span><span class="p">,</span>
			<span class="nx">input</span><span class="p">:</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">},</span>
			<span class="nx">want</span><span class="p">:</span>  <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
		<span class="p">},</span>
		<span class="p">{</span>
			<span class="nx">name</span><span class="p">:</span>  <span class="s">&#34;five&#34;</span><span class="p">,</span>
			<span class="nx">input</span><span class="p">:</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">},</span>
			<span class="nx">want</span><span class="p">:</span>  <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
		<span class="p">},</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">tt</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">tests</span> <span class="p">{</span>
		<span class="nx">t</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">tt</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">if</span> <span class="nx">got</span> <span class="o">:=</span> <span class="nf">moveRow</span><span class="p">(</span><span class="nx">tt</span><span class="p">.</span><span class="nx">input</span><span class="p">);</span> <span class="p">!</span><span class="nx">reflect</span><span class="p">.</span><span class="nf">DeepEqual</span><span class="p">(</span><span class="nx">got</span><span class="p">,</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">want</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;moveRow() = %v, want %v&#34;</span><span class="p">,</span> <span class="nx">got</span><span class="p">,</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">want</span><span class="p">)</span>
			<span class="p">}</span>
		<span class="p">})</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">TestLeftRotate90</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">type</span> <span class="nx">fields</span> <span class="kd">struct</span> <span class="p">{</span>
		<span class="nx">matrix</span> <span class="p">[][]</span><span class="kt">int</span>
	<span class="p">}</span>

	<span class="nx">tests</span> <span class="o">:=</span> <span class="p">[]</span><span class="kd">struct</span> <span class="p">{</span>
		<span class="nx">name</span>   <span class="kt">string</span>
		<span class="nx">fields</span> <span class="nx">fields</span>
		<span class="nx">want</span>   <span class="p">[][]</span><span class="kt">int</span>
	<span class="p">}{</span>
		<span class="p">{</span>
			<span class="nx">name</span><span class="p">:</span> <span class="s">&#34;one&#34;</span><span class="p">,</span>
			<span class="nx">fields</span><span class="p">:</span> <span class="nx">fields</span><span class="p">{</span>
				<span class="nx">matrix</span><span class="p">:</span> <span class="p">[][]</span><span class="kt">int</span><span class="p">{</span>
					<span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="p">},</span>
					<span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">10</span><span class="p">},</span>
					<span class="p">{</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">11</span><span class="p">},</span>
					<span class="p">{</span><span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">111</span><span class="p">},</span>
				<span class="p">},</span>
			<span class="p">},</span>
			<span class="nx">want</span><span class="p">:</span> <span class="p">[][]</span><span class="kt">int</span><span class="p">{</span>
				<span class="p">{</span><span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">111</span><span class="p">},</span>
				<span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">18</span><span class="p">},</span>
				<span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">17</span><span class="p">},</span>
				<span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">16</span><span class="p">},</span>
			<span class="p">},</span>
		<span class="p">},</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">tt</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">tests</span> <span class="p">{</span>
		<span class="nx">t</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">tt</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">b</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">board</span><span class="p">{</span><span class="nx">board</span><span class="p">:</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">fields</span><span class="p">.</span><span class="nx">matrix</span><span class="p">}</span>
			<span class="nx">b</span><span class="p">.</span><span class="nf">leftRotate90</span><span class="p">()</span>
			<span class="k">if</span> <span class="p">!</span><span class="nx">reflect</span><span class="p">.</span><span class="nf">DeepEqual</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">,</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">want</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;b.leftRotate90() = %v, want %v&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">,</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">want</span><span class="p">)</span>
			<span class="p">}</span>
		<span class="p">})</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">TestRightRotate90</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">type</span> <span class="nx">fields</span> <span class="kd">struct</span> <span class="p">{</span>
		<span class="nx">matrix</span> <span class="p">[][]</span><span class="kt">int</span>
	<span class="p">}</span>

	<span class="nx">tests</span> <span class="o">:=</span> <span class="p">[]</span><span class="kd">struct</span> <span class="p">{</span>
		<span class="nx">name</span>   <span class="kt">string</span>
		<span class="nx">fields</span> <span class="nx">fields</span>
		<span class="nx">want</span>   <span class="p">[][]</span><span class="kt">int</span>
	<span class="p">}{</span>
		<span class="p">{</span>
			<span class="nx">name</span><span class="p">:</span> <span class="s">&#34;one&#34;</span><span class="p">,</span>
			<span class="nx">fields</span><span class="p">:</span> <span class="nx">fields</span><span class="p">{</span>
				<span class="nx">matrix</span><span class="p">:</span> <span class="p">[][]</span><span class="kt">int</span><span class="p">{</span>
					<span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="p">},</span>
					<span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">10</span><span class="p">},</span>
					<span class="p">{</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">11</span><span class="p">},</span>
					<span class="p">{</span><span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">111</span><span class="p">},</span>
				<span class="p">},</span>
			<span class="p">},</span>
			<span class="nx">want</span><span class="p">:</span> <span class="p">[][]</span><span class="kt">int</span><span class="p">{</span>
				<span class="p">{</span><span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span>
				<span class="p">{</span><span class="mi">17</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">},</span>
				<span class="p">{</span><span class="mi">18</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span>
				<span class="p">{</span><span class="mi">111</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">9</span><span class="p">},</span>
			<span class="p">},</span>
		<span class="p">},</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">tt</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">tests</span> <span class="p">{</span>
		<span class="nx">t</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">tt</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">b</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">board</span><span class="p">{</span><span class="nx">board</span><span class="p">:</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">fields</span><span class="p">.</span><span class="nx">matrix</span><span class="p">}</span>
			<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nf">rightRotate90</span><span class="p">();</span> <span class="p">!</span><span class="nx">reflect</span><span class="p">.</span><span class="nf">DeepEqual</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">,</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">want</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;b.rightRotate90() = %v, want %v&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">,</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">want</span><span class="p">)</span>
			<span class="p">}</span>
		<span class="p">})</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="7-分数计算">7. 分数计算</h2>
<p>游戏正常结束后显示当前最大分数和总分数，算是一个小功能。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">//game/board.go
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">CountScore</span><span class="p">()</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">total</span><span class="p">,</span> <span class="nx">max</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
	<span class="nx">matrix</span> <span class="o">:=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">_cols</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
			<span class="nx">total</span> <span class="o">+=</span> <span class="nx">matrix</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span>
			<span class="nx">max</span> <span class="p">=</span> <span class="nf">maxInts</span><span class="p">(</span><span class="nx">max</span><span class="p">,</span> <span class="nx">matrix</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">])</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">max</span><span class="p">,</span> <span class="nx">total</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">maxInts</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">a</span> <span class="p">&gt;</span> <span class="nx">b</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">a</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">b</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">//main.go
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Use {W A S D} or Arrow keys to move the board&#34;</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Press and key to start\n&#34;</span><span class="p">)</span>
	<span class="nx">_</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">keyboard</span><span class="p">.</span><span class="nf">GetSingleKey</span><span class="p">()</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalln</span><span class="p">(</span><span class="s">&#34;error while taking input to start the game&#34;</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">b</span> <span class="o">:=</span> <span class="nx">game</span><span class="p">.</span><span class="nf">NewBoard</span><span class="p">()</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">AddElement</span><span class="p">()</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">AddElement</span><span class="p">()</span>
	<span class="k">for</span> <span class="kc">true</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nf">IsOver</span><span class="p">()</span> <span class="p">{</span>
			<span class="k">break</span>
		<span class="p">}</span>
		<span class="nx">b</span><span class="p">.</span><span class="nf">AddElement</span><span class="p">()</span>
		<span class="nx">b</span><span class="p">.</span><span class="nf">Display</span><span class="p">()</span>
		<span class="nx">res</span> <span class="o">:=</span> <span class="nx">b</span><span class="p">.</span><span class="nf">TakeInput</span><span class="p">()</span>
		<span class="k">if</span> <span class="p">!</span><span class="nx">res</span> <span class="p">{</span>
			<span class="k">return</span>
		<span class="p">}</span>

	<span class="p">}</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;\n**********  game over  **********&#34;</span><span class="p">)</span>
	<span class="nx">max</span><span class="p">,</span> <span class="nx">total</span> <span class="o">:=</span> <span class="nx">b</span><span class="p">.</span><span class="nf">CountScore</span><span class="p">()</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Max Score: %v \n&#34;</span><span class="p">,</span> <span class="nx">max</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Total Score %v \n&#34;</span><span class="p">,</span> <span class="nx">total</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="8-代码重构">8. 代码重构</h2>
<p>所有功能完成后，对代码进行重构整理，包括</p>
<ol>
<li>将数字移动合并的相关代码移动到单独的 <code>move.go</code> 源文件中；</li>
<li>（可选）将输入和显示的相关函数都拆分到单独的源文件中；</li>
<li>为所有代码添加注释，并编写 README.md 文档；</li>
</ol>
<h2 id="9-结果与收获">9. 结果与收获</h2>
<p>完整的项目代码可以查看我的 <a href="https://github.com/shuzang/2048" target="_blank" rel="noopener noreffer">github 仓库</a>，与原项目有一些实现上的区别，并完善了一些功能。</p>
<p></p>
<p>编写该项目的收获有</p>
<ol>
<li>开源协议的选择；</li>
<li>对结构体和接口作用和意义的思考；</li>
<li>一个项目是从简单到复杂一步步建立的，不要想一步登天做的很完善；</li>
<li>方法中 (b *board) 和 (b board) 的区别；</li>
<li>一些重要的可定制的参数可以抽取作为为常量，比如面板规格，常量命名时前面最好加下划线 <code>_</code> 加以区分；</li>
<li>fmt.Printf 可以输出固定长度的空字符用于占位，fmt.Println() 可以用来换行；</li>
<li>随机数的生成方法，一个小技巧是使用数组存放待选择数字，然后随机生成数组长度范围内的数字作为索引进行选择；</li>
<li>结构体对象的生成可以使用工厂模式，比如  NewBoard 函数；</li>
<li>格式化输出的颜色控制（fatih/color包）；</li>
<li>清屏的实现方法；</li>
<li>无需回车不断读取键盘输入的实现方法（eiannone/keyboard包）;</li>
<li>矩阵旋转等大量关于二维切片的算法实现（PS：刷题还是有用的）；</li>
<li>测试用例的编写；</li>
<li>所有功能完成后，根据情况进行重构，比如代码的解耦等，然后完成添加注释、编写文档等工作；</li>
<li>Go 文档的编写与使用；</li>
<li>日志系统的使用。</li>
</ol>]]></description></item><item><title>win10效率优化7-终端和winget</title><link>https://shuzang.github.io/efficient-use-of-win10-7-windows-terminal-and-winget/</link><pubDate>Wed, 07 Oct 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://shuzang.github.io/efficient-use-of-win10-7-windows-terminal-and-winget/</guid><description><![CDATA[<p>Windows terminal 的安装配置和 winget 的基本使用，主要原因是 Powershell 不好看。</p>
<h2 id="1-windows-terminal">1. Windows terminal</h2>
<p>界面友好的终端应用，凡是命令行程序都可以用它启动，可以将 win10 下的 cmd、Powershell 和 git bash 都集中在一起，当然，最重要的是好看。</p>
<p>基本上有什么问题都可以从 <a href="https://docs.microsoft.com/zh-cn/windows/terminal/" target="_blank" rel="noopener noreffer">官方教程</a> 里查到，这里只是介绍我的配置过程。</p>
<h3 id="11-安装">1.1 安装</h3>
<p>我选择从 <a href="https://aka.ms/terminal" target="_blank" rel="noopener noreffer">Microsoft Store</a> 安装 Windows terminal。初始界面如下</p>
<p></p>
<h3 id="12-快捷键启动">1.2 快捷键启动</h3>
<p>右键菜单已经有 git bash 了，不需要把它添加进去。</p>
<p>快捷键启动我没有采用网上流传的教程，而是把 Windows terminal 固定在了任务栏第一个，然后使用  <code>Win+1</code> 键打开。</p>
<h3 id="13-添加-git-bash">1.3 添加 git bash</h3>
<p>默认添加的应用包括 Powershell、cmd、Azure Cloud Shell 和我之前安装的 WSL（Ubuntu 20.04）。</p>
<p></p>
<p>这里将 git bash 添加进去，并设置为启动时默认使用的应用（之前启动 Windows termianl 默认打开 Powershell），并设置起始目录。最终效果如上图</p>
<ol>
<li>
<p>点击标题栏的下箭头，点击「设置」，可以在上图中看到；</p>
</li>
<li>
<p>在打开的配置文件中 <code>list</code> 部分添加如下内容。其中，<code>guid</code> 是唯一标识符，注意不要和已有的四个应用相同即可；<code>name</code> 是应用名；<code>commandline</code> 设置 git bash 路径，根据自己的安装位置设置；<code>icon</code> 设置上图中显示的缩略图，自己从 <a href="https://gitforwindows.org/img/gwindows_logo.png" target="_blank" rel="noopener noreffer">网上</a> 下载放到合适的位置并设置；<code>startingDirectory</code> 设置起始目录，我这里设置了我最常打开的目录。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&#34;guid&#34;</span><span class="p">:</span> <span class="s2">&#34;{b453ae62-4e3d-5e58-b989-0a998ec441b9}&#34;</span><span class="p">,</span>
    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Git-bash&#34;</span><span class="p">,</span>
    <span class="nt">&#34;commandline&#34;</span><span class="p">:</span> <span class="s2">&#34;C:\\Program Files\\Git\\bin\\bash.exe&#34;</span><span class="p">,</span>
    <span class="nt">&#34;icon&#34;</span><span class="p">:</span> <span class="s2">&#34;C:\\Program Files\\Git\\gwindows_logo.png&#34;</span><span class="p">,</span>
    <span class="nt">&#34;startingDirectory&#34;</span><span class="p">:</span> <span class="s2">&#34;F:\\OneDrive\\博客&#34;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>修改全局字段（在配置文件的最前面几行中找）中的 <code>defaultProfile</code> 为 <code>Git-bash</code>，这里可以使用上面的 <code>name</code> 或 <code>guid</code> 字段</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="s2">&#34;defaultProfile&#34;</span><span class="err">:</span> <span class="s2">&#34;Git-bash&#34;</span><span class="err">,</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h3 id="14-配色及背景图">1.4 配色及背景图</h3>
<p>大部分人用 Windows terminal 就是因为它可定制，所以出现了各种各样好看的配色和主题。</p>
<p></p>
<p>我从 <a href="https://windowsterminalthemes.dev/" target="_blank" rel="noopener noreffer">主题网站</a> 选择了 Builtin Tango Light 主题，配置代码如下，需要将这段代码复制到配置文件的 <code>schemes</code> 字段中。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;Builtin Tango Light&#34;</span><span class="p">,</span>
    <span class="nt">&#34;black&#34;</span><span class="p">:</span> <span class="s2">&#34;#000000&#34;</span><span class="p">,</span>
    <span class="nt">&#34;red&#34;</span><span class="p">:</span> <span class="s2">&#34;#cc0000&#34;</span><span class="p">,</span>
    <span class="nt">&#34;green&#34;</span><span class="p">:</span> <span class="s2">&#34;#4e9a06&#34;</span><span class="p">,</span>
    <span class="nt">&#34;yellow&#34;</span><span class="p">:</span> <span class="s2">&#34;#c4a000&#34;</span><span class="p">,</span>
    <span class="nt">&#34;blue&#34;</span><span class="p">:</span> <span class="s2">&#34;#3465a4&#34;</span><span class="p">,</span>
    <span class="nt">&#34;purple&#34;</span><span class="p">:</span> <span class="s2">&#34;#75507b&#34;</span><span class="p">,</span>
    <span class="nt">&#34;cyan&#34;</span><span class="p">:</span> <span class="s2">&#34;#06989a&#34;</span><span class="p">,</span>
    <span class="nt">&#34;white&#34;</span><span class="p">:</span> <span class="s2">&#34;#d3d7cf&#34;</span><span class="p">,</span>
    <span class="nt">&#34;brightBlack&#34;</span><span class="p">:</span> <span class="s2">&#34;#555753&#34;</span><span class="p">,</span>
    <span class="nt">&#34;brightRed&#34;</span><span class="p">:</span> <span class="s2">&#34;#ef2929&#34;</span><span class="p">,</span>
    <span class="nt">&#34;brightGreen&#34;</span><span class="p">:</span> <span class="s2">&#34;#8ae234&#34;</span><span class="p">,</span>
    <span class="nt">&#34;brightYellow&#34;</span><span class="p">:</span> <span class="s2">&#34;#fce94f&#34;</span><span class="p">,</span>
    <span class="nt">&#34;brightBlue&#34;</span><span class="p">:</span> <span class="s2">&#34;#729fcf&#34;</span><span class="p">,</span>
    <span class="nt">&#34;brightPurple&#34;</span><span class="p">:</span> <span class="s2">&#34;#ad7fa8&#34;</span><span class="p">,</span>
    <span class="nt">&#34;brightCyan&#34;</span><span class="p">:</span> <span class="s2">&#34;#34e2e2&#34;</span><span class="p">,</span>
    <span class="nt">&#34;brightWhite&#34;</span><span class="p">:</span> <span class="s2">&#34;#eeeeec&#34;</span><span class="p">,</span>
    <span class="nt">&#34;background&#34;</span><span class="p">:</span> <span class="s2">&#34;#ffffff&#34;</span><span class="p">,</span>
    <span class="nt">&#34;foreground&#34;</span><span class="p">:</span> <span class="s2">&#34;#000000&#34;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>然后在 <code>defaults</code> 字段中添加</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="s2">&#34;colorScheme&#34;</span><span class="err">:</span> <span class="s2">&#34;Builtin Tango Light&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>为了不打扰正式内容的显示，我决定将背景图放在右下角，同时，由于终端主体颜色是白色，背景图除了主体的人或物，其它颜色也应该是白色，正好我有一张谏山黄泉的图是这样的。</p>
<p>由于要放在右下角，还要在图片左边和上边扩展大量的白色区域。我选择的方法是打开 Microsoft Whiteboard 应用，将背景颜色设置为白色，然后将图片放在右下角，导出此时的白板。</p>
<p>将导出的图片放在合适的位置，在配置文件的 <code>defaults</code> 字段中添加如下内容（和主体设置在一起），第一行设置背景图路径，第二行设置不透明度。此时打开终端发现图片显示可能有问题，无法正好在右下角显示整个人物，这时候通过裁剪背景图上方和左边的空白，不断调整和预览，可以获得想要的效果，最终效果就是本小节开头的图片。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="s2">&#34;backgroundImage&#34;</span><span class="err">:</span> <span class="s2">&#34;F:\\OneDrive\\图片\\收藏\\谏山黄泉-背景图.png&#34;</span><span class="err">,</span>
<span class="s2">&#34;backgroundImageOpacity&#34;</span><span class="err">:</span> <span class="mf">0.8</span>
</code></pre></td></tr></table>
</div>
</div><p>注1：不少人喜欢下面这种标签式的效果，叫做 Powerline，但我没感觉，所以没添加，想使用可以参考 <a href="https://docs.microsoft.com/zh-cn/windows/terminal/custom-terminal-gallery/powerline-in-powershell" target="_blank" rel="noopener noreffer">Windows 终端的 PowerShell 主题中的 Powerline</a></p>
<p></p>
<p>注2：官方提供了几种不错的主题，包括 <a href="https://docs.microsoft.com/zh-cn/windows/terminal/custom-terminal-gallery/frosted-glass-theme" target="_blank" rel="noopener noreffer">毛玻璃效果</a> 和 <a href="https://docs.microsoft.com/zh-cn/windows/terminal/custom-terminal-gallery/raspberry-ubuntu" target="_blank" rel="noopener noreffer">Raspberry Ubuntu</a> 我都很喜欢，效果如下</p>
<p></p>
<p></p>
<h2 id="2-winget">2. winget</h2>
<p>win10 预览版用户直接就可以使用，是系统自带的，非预览版用户从 <a href="https://github.com/microsoft/winget-cli" target="_blank" rel="noopener noreffer">github仓库</a> 自行下载安装。使用说明可以参考 <a href="https://docs.microsoft.com/zh-cn/windows/package-manager/winget/" target="_blank" rel="noopener noreffer">官方文档</a>，安装后可以直接在终端使用</p>
<p></p>
]]></description></item><item><title>算法-时间复杂度和空间复杂度</title><link>https://shuzang.github.io/algorithm-time-and-space-complexity/</link><pubDate>Fri, 18 Sep 2020 20:37:00 +0800</pubDate><author>作者</author><guid>https://shuzang.github.io/algorithm-time-and-space-complexity/</guid><description><![CDATA[<p>时间和空间复杂度的分析是编制程序的一个基本能力，不过平时基本都是脑子里简单的估计，本篇文章打算回忆一下大 O 表示法和具体的时间复杂度的推导过程。</p>
<h2 id="1-时间复杂度">1. 时间复杂度</h2>
<p>算法的时间复杂度指的是算法运行所需要的时间的量，这个时间量不应该依赖外部因素，而应当只和问题规模 N、输入 I 以及算法 A 本身相关。如果用 T 表示时间复杂度，那么表达式为</p>
<p>$$
T = T(N,I,A)
$$
由于算法是通过一个或几个函数实现的，算法 A 本身通常就会隐含在函数名中，这样表达式可以简化为
$$
T = T(N,I)
$$
如果算法连输入都不依赖，那么表达式就可以进一步简化为 $T(N)$，但我们通常用 N 的小写形式，写作 $T(n)$</p>
<p>那么我们如何来计算这个时间的量呢，通常，我们假设算法中每条语句的执行时间均为单位时间，这样，算法运行的总时间就是所有语句执行时间之和。以顺序查找为例</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="c1">// 返回第一个与 k 相同的元素的下标，否则返回-1
</span><span class="c1"></span><span class="n">Search</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="mf">0.</span><span class="p">..</span><span class="n">n</span><span class="p">],</span> <span class="n">k</span><span class="p">)</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>                         <span class="c1">// c1=1
</span><span class="c1"></span>    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="n">and</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">!=</span> <span class="n">k</span> <span class="k">do</span>  <span class="c1">// c2
</span><span class="c1"></span>        <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>                 <span class="c1">// c3
</span><span class="c1"></span>    <span class="k">if</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> 
        <span class="k">return</span> <span class="n">i</span>             	  <span class="c1">// c4=1
</span><span class="c1"></span>    <span class="k">else</span> 
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>                 <span class="c1">// 或c5=1
</span></code></pre></td></tr></table>
</div>
</div><p>注释中列出了每条语句的执行时间 $c_i$，那么 $\sum_{i=1}^{n}c_i$ 就是算法运行的总时间。</p>
<p>但是，算法运行的总时间并不是算法的时间复杂度，我们通常说的时间复杂度完整的叫法应该是算法的渐进时间复杂度，是考虑当问题规模充分大时，算法运行时间的表达式在渐进意义下的阶。定义如下</p>
<blockquote>
<p>设 $T(n)$ 是关于算法 A 的复杂性函数，如果存在 t(n)，使得 $\lim\limits_{N\to\infty} \frac{T(n)-t(n)}{T(n)} = 0 $，则 t(n) 是 T(n) 是当 $n\to\infty$ 时的渐进表达式，也可以直接称作其渐进时间复杂度</p>
</blockquote>
<p>具体而言，对于给定的 $T(n)$ 的表达式，算法的渐进时间复杂度是略去低阶项和常数因子留下的主项。例如，给定 $T(n) = 3n^3 + 90n^2 - 5n + 6040$，略去低阶项和常数因子，得到渐进时间复杂度 $t(n) = n^3$</p>
<h3 id="11-大o表示法">1.1 大O表示法</h3>
<p>通常用渐进上界 O 来表示渐进时间复杂度，也就是我们常说的大 O 表示法，其定义是
$$
O(g(n)) = {f(n) | 存在正常数 c 和 n_0使得对所有 n \ge n_0 有：0 \le f(n) \le cg(n)}
$$
</p>
<p>举个例子，$f(n) = 2n+3 = O(n)$，因为当 $n\ge 3$ 时，$2n+3 \le 3n$，这里的含义就是，当 $n \ge 3$ 时，算法步骤不会超过 $3n$</p>
<p>第二个例子，$f(n) = 10n^2 + 4n + 2 = O(n^2)$，因为当 $n \ge 5$ 时，$10n^2 + 4n + 2 \le 11n^2$</p>
<p>最后给一个矩阵乘法的实例，总时间 $T(n) = 2n^3 + n^2 + 2n$，这样渐进时间复杂度就是 $O(n^3)$</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>                <span class="c1">// n
</span><span class="c1"></span>    <span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>            <span class="c1">// n
</span><span class="c1"></span>        <span class="nx">c</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="mi">0</span>                     <span class="c1">// n^2
</span><span class="c1"></span>        <span class="k">for</span> <span class="nx">k</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">k</span> <span class="p">&lt;</span> <span class="nx">n</span><span class="p">;</span> <span class="nx">k</span><span class="o">++</span> <span class="p">{</span>        <span class="c1">// n^3
</span><span class="c1"></span>            <span class="nx">c</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">k</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="p">[</span><span class="nx">k</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span>  <span class="c1">// n^3
</span><span class="c1"></span>        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>最后声明两个大 O 的运算规则</p>
<ol>
<li>$O(f) + O(g) = O(max(f,g))$</li>
<li>$O(f)O(g) = O(fg)$</li>
</ol>
<p>此外，有时候也会见到渐进下界 $\Omega$ 和 渐进准确界 $\Theta$，但很少或几乎用不到</p>
<h3 id="12-对输入实例的依赖">1.2 对输入实例的依赖</h3>
<p>有些时候需要考虑某类有代表性的输入实例，比如最坏情况、最好情况、平均情况，这几种情况的复杂度是不一样的，通常用如下符号表示</p>
<ul>
<li>最好情况 $T_{min}(n)$</li>
<li>最坏情况 $T_{max}(n)$</li>
<li>平均情况 $T_{avg}(n)$</li>
</ul>
<p>对于前面提到的查找算法，第一个与 k 相同的元素可能是最后一个元素，这时循环执行 n 次，是最坏情况；也可能是第一个元素，这时循环只执行 1 次，是最好情况。</p>
<p>理解这三种情况下的算法性能都很重要，但应注意：</p>
<ol>
<li>很多算法最好情况下的性能都差不多，O(1) 或者 O(n)，没有太大的影响，不能说明哪种算法更好；</li>
<li>算法的平均情况往往不是那么容易分析；</li>
<li>最坏情况可以告诉我们算法性能的上限，从而保证任何情况都不会比它差。</li>
</ol>
<h3 id="13-复杂度分析的步骤">1.3 复杂度分析的步骤</h3>
<p>复杂度分析的步骤如下</p>
<ol>
<li>确定表示问题规模的变量；</li>
<li>确定占运行时间最大比例的语句；</li>
<li>确定算法是否依赖输入实例（决定了是否分最坏、最好、平均三种情况考虑）；</li>
<li>计算语句执行总次数；</li>
<li>确定时间复杂度；</li>
</ol>
<p>以选择排序为例，用伪代码描述如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="n">SelectionSort</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="mf">0.</span><span class="p">..</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> 
    <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span> <span class="n">to</span> <span class="n">n</span><span class="o">-</span><span class="mi">2</span> <span class="k">do</span> 
	    <span class="n">min</span> <span class="o">=</span> <span class="n">i</span>
	    <span class="k">for</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="n">to</span> <span class="n">n</span><span class="o">-</span><span class="mi">1</span> <span class="k">do</span> 
	        <span class="k">if</span> <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">A</span><span class="p">[</span><span class="n">min</span><span class="p">]</span> <span class="p">{</span>
		        <span class="n">min</span> <span class="o">=</span> <span class="n">j</span>	
    <span class="n">swap</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="n">and</span> <span class="n">A</span><span class="p">[</span><span class="n">min</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><ol>
<li>问题规模为数组长度 n</li>
<li>占运行时间最大比例的语句是 $min = j$</li>
<li>算法只依赖问题规模，不依赖输入实例</li>
<li>语句执行总次数 $T(n) = \sum_{i=1}^{n}i = \frac{n(n-1)}{2}$</li>
<li>时间复杂度为 $O(n^2)$</li>
</ol>
<p>一个依赖输入实例的例子是插入排序</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c" data-lang="c"><span class="n">InsertSort</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="mf">0.</span><span class="p">..</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
    <span class="k">for</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span>
        <span class="n">a</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="k">while</span> <span class="n">j</span> <span class="o">&gt;=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">a</span>
            <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">]</span>
            <span class="n">j</span><span class="o">--</span>
    <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">a</span>
</code></pre></td></tr></table>
</div>
</div><ol>
<li>问题规模为数组长度 n</li>
<li>占运行时间最大比例的语句是 $A[j] &gt; a$</li>
<li>算法依赖输入实例</li>
<li>语句执行总次数：
<ul>
<li>最坏情况：$T(n) = \frac{n(n-1)}{2}$</li>
<li>最好情况：$T(n) = n-1$</li>
</ul>
</li>
<li>时间复杂度
<ul>
<li>最坏情况：$T(n)=O(n^2)$</li>
<li>最好情况：$T(n) = O(n)$</li>
</ul>
</li>
</ol>
<h3 id="14-常见时间复杂度">1.4 常见时间复杂度</h3>
<p>常见时间复杂度总结如下表</p>
<table>
<thead>
<tr>
<th>复杂度</th>
<th>出现情况</th>
</tr>
</thead>
<tbody>
<tr>
<td>l</td>
<td>几乎不存在</td>
</tr>
<tr>
<td>logn</td>
<td>不能考虑全部输入</td>
</tr>
<tr>
<td>n</td>
<td>遍历、扫描全部输入</td>
</tr>
<tr>
<td>nlogn</td>
<td>许多分治算法</td>
</tr>
<tr>
<td>$n^2$</td>
<td>两层循环</td>
</tr>
<tr>
<td>$n^3$</td>
<td>三层循环</td>
</tr>
<tr>
<td>$2^n$</td>
<td>一个集合的所有子集</td>
</tr>
<tr>
<td>$n!$</td>
<td>一个集合中的元素的所有排列</td>
</tr>
</tbody>
</table>
<p>我们可以按这些时间复杂度把算法分为两类</p>
<ul>
<li>多项式时间算法
<ul>
<li>用多项式对运行时间限界的算法</li>
<li>$O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(n^3)$</li>
</ul>
</li>
<li>指数时间算法
<ul>
<li>用指数函数对运行时间限界的算法</li>
<li>$O(2^n) &lt; O(n!) &lt; O(n^n)$</li>
</ul>
</li>
</ul>
<p>对指数时间的算法应尽可能优化。</p>
<h2 id="2-空间复杂度">2. 空间复杂度</h2>
<p>空间复杂度是对算法所消耗的额外存储单元进行计数，这里注意是<strong>额外</strong>的存储单元，不包括</p>
<ol>
<li>为容纳输入数据而分配的存储空间，比如输入数组 A[0&hellip;n] 占用的空间</li>
<li>实现该算法的程序代码和常数占用的空间</li>
</ol>
<p>额外的意思是算法所需要的工作空间，比如交换两个变量值时分配了一个临时变量，这个变量占用的空间就属于空间复杂度分析的范围，再比如实现栈时为栈申请的空间也属于空间复杂度的分析范围，最后，递归函数使用的内部栈也属于空间复杂度的分析范围。</p>
<p>在很多问题中，时间和空间是一个对立面。为算法分配更多的空间，可以使算法运行的更快，反之，当空间是一个重要因素时，需要用算法的运行时间去换取空间。一个运行时间短、所需存储空间小、其它性能也好的算法是很难做到的。因此我们要根据具体情况进行算法设计。</p>
<ul>
<li>对于使用次数较少的程序，力求算法简单易懂；</li>
<li>对于反复多次使用的程序，尽可能选用快速的算法；</li>
<li>若待解决的问题数据量极大，机器的存储空间较小，则相应算法主要考虑如何节省空间。</li>
</ul>]]></description></item><item><title>Mysql学习补充-语句执行顺序</title><link>https://shuzang.github.io/mysql-learning-supplement-statement-execution-order/</link><pubDate>Sun, 13 Sep 2020 16:08:00 +0800</pubDate><author>作者</author><guid>https://shuzang.github.io/mysql-learning-supplement-statement-execution-order/</guid><description><![CDATA[<p>这篇文章用来仔细思考 MySQL 查询语句的执行顺序。</p>
<p>手写 MySQL  语句的顺序通常如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">select</span> <span class="o">&lt;</span><span class="n">select_list</span><span class="o">&gt;</span>
<span class="k">from</span> <span class="o">&lt;</span><span class="n">table_name</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">join_type</span><span class="o">&gt;</span> <span class="k">join</span> <span class="o">&lt;</span><span class="n">join_table</span><span class="o">&gt;</span> <span class="k">on</span> <span class="o">&lt;</span><span class="n">join_condition</span><span class="o">&gt;</span>
<span class="k">where</span> <span class="o">&lt;</span><span class="n">where_condition</span><span class="o">&gt;</span>
<span class="k">group</span> <span class="k">by</span> <span class="o">&lt;</span><span class="n">group_by_list</span><span class="o">&gt;</span>
<span class="k">having</span> <span class="o">&lt;</span><span class="n">having_condition</span><span class="o">&gt;</span>
<span class="k">order</span> <span class="k">by</span> <span class="o">&lt;</span><span class="n">order_by_condition</span><span class="o">&gt;</span>
<span class="k">limit</span> <span class="o">&lt;</span><span class="n">limt_number</span><span class="o">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>MySQL 语句的执行顺序如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">from</span> <span class="o">&lt;</span><span class="k">left</span> <span class="k">table</span><span class="o">&gt;</span>
<span class="k">on</span> <span class="o">&lt;</span><span class="n">on_condition</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">join_type</span><span class="o">&gt;</span> <span class="k">join</span> <span class="o">&lt;</span><span class="n">join_table</span><span class="o">&gt;</span>
<span class="k">where</span> <span class="o">&lt;</span><span class="n">where_condition</span><span class="o">&gt;</span>
<span class="k">group</span> <span class="k">by</span> <span class="o">&lt;</span><span class="n">group_by_list</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="nf">sum</span><span class="p">()</span><span class="nf">avg</span><span class="p">()</span><span class="err">等聚合函数</span><span class="o">&gt;</span>
<span class="k">having</span> <span class="o">&lt;</span><span class="n">having_condition</span><span class="o">&gt;</span>
<span class="k">select</span> <span class="o">&lt;</span><span class="n">select_list</span><span class="o">&gt;</span>
<span class="k">distinct</span>
<span class="k">order</span> <span class="k">by</span> <span class="o">&lt;</span><span class="n">order_by_condition</span><span class="o">&gt;</span>
<span class="k">limit</span> <span class="o">&lt;</span><span class="n">limit_number</span><span class="o">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>下面做一下解释</p>
<p><strong>第一步</strong>：如果有连接运算，加载 from 子句指定的表中的前两个计算笛卡尔积，生成虚拟表 vt1；</p>
<p><strong>第二步</strong>：对虚拟表 vt1 执行 on 表达式，筛选符合条件的元组，生成虚拟表 vt2，如果是外连接，基表中的数据会全部保留；</p>
<p><strong>第三步</strong>：如果 from 子句中的表数量大于 2，则重复前两部，直至所有的表都连接完成，得到虚拟表 vt3；</p>
<p><strong>第四步</strong>：执行 where 表达式，筛选符合条件的数据生成 vt4；</p>
<p><strong>第五步</strong>：执行 group by 子句。group by 子句执行过后，会对子句组合成唯一值并且对每个唯一值只包含一行，生成 vt5,。一旦执行group by，后面的所有步骤只能得到 vt5 中的列（group by的子句包含的列）和聚合函数。</p>
<p><strong>第六步</strong>：执行聚合函数，生成 vt6；</p>
<p><strong>第七步</strong>：执行 having 表达式，筛选 vt6 中的数据，生成vt7。having是唯一一个在分组后的条件筛选;</p>
<p><strong>第八步</strong>：执行 select 语句，从 vt7 中筛选列，生成 vt8；</p>
<p><strong>第九步</strong>：执行 distinct，对 vt8 去重，生成 vt9。如果执行过 group by 就没必要再去执行 distinct，因为分组后，每组只会有一条数据，并且每条数据都不相同。</p>
<p><strong>第十步</strong>：对 vt9 进行排序，此处返回的不是一个虚拟表，而是一个游标，记录了数据的排序顺序，此处可以使用别名；</p>
<p><strong>第十一步</strong>：执行 limit 语句，将结果返回给客户端。</p>
<hr>
<p><strong>参考</strong></p>
<p>[1] 樱桃mayue，51CTO博客，<a href="https://blog.51cto.com/13593129/2357192?source=dra" target="_blank" rel="noopener noreffer">MySql学习笔记（二）：SQL执行顺序</a>，2019.03.02</p>]]></description></item><item><title>Mysql学习补充-关系数据理论</title><link>https://shuzang.github.io/mysql-learning-supplement-relational-data-theory/</link><pubDate>Fri, 11 Sep 2020 19:30:00 +0800</pubDate><author>作者</author><guid>https://shuzang.github.io/mysql-learning-supplement-relational-data-theory/</guid><description><![CDATA[<p>MySQL 作为关系数据库，关系数据理论是基础，本文进行补充学习，主要包括关系模型、关系代数和范式的相关知识。</p>
<h2 id="1-关系模型">1. 关系模型</h2>
<h3 id="11-简介">1.1 简介</h3>
<p>模型就是描述数据的概念的集合。</p>
<p>数据库的本质作用是存储抽象自现实世界的数据，这一过程可以分为两个阶段</p>
<ol>
<li>对现实世界进行抽象，强调语义的表达，这一阶段称为<strong>概念模型</strong>，一般使用线条、图形、文字等来进行描述，是用户和数据库设计人员的沟通语言，比如 E-R 图。</li>
<li>用计算机可理解的方式进行二次抽象，强调数据描述的确定性，这一阶段称作<strong>数据模型</strong>，包括遵循的数据结构、对数据的各种操作和数据的约束条件三部分。</li>
</ol>
<p>关系模型正是当前广泛使用的一种数据模型，使用关系模型的数据库称为关系型数据库，MySQL 正是广为使用的一种关系型数据库。</p>
<h3 id="12-基本概念">1.2 基本概念</h3>
<p><strong>域</strong>：域是一组具有相同类型值的集合，比如 MAN = {王兵，李平} 就是一个域，WOMAN = {丁梅，吴芳} 也是一个域。</p>
<p><strong>笛卡尔积</strong>：给定一组域 $D_1,D_2,&hellip;,D_n$，它们的笛卡尔积就定义为
$$
D_1 \times D_2 \times &hellip; D_n={(d_1,d_2,&hellip;,d_n)|d_i \in D_i,i=1,2,&hellip;,n}
$$
以上面的 MAN 和 WOMEN 域为例，$MAN \times WOMEN = {(王兵,丁梅),(王兵,吴芳),(李平,丁梅),(李平,吴芳)}$，一个笛卡尔积可以表示为一个二维表，如下</p>
<table>
<thead>
<tr>
<th>MAN</th>
<th>WOMAN</th>
</tr>
</thead>
<tbody>
<tr>
<td>王兵</td>
<td>丁梅</td>
</tr>
<tr>
<td>王兵</td>
<td>吴芳</td>
</tr>
<tr>
<td>李平</td>
<td>丁梅</td>
</tr>
<tr>
<td>李平</td>
<td>吴芳</td>
</tr>
</tbody>
</table>
<p><strong>元组</strong>：笛卡尔积中的每个元素叫做一个元组，也就是二维表中的一行。</p>
<p><strong>关系</strong>：$D_1 \times D_2 \times &hellip; D_n$ 的子集叫做在域 $D_1,D_2,&hellip;,D_n$ 上的一个关系，可以表示为 $R(D_1,D_2,&hellip;,D_n)$，n 叫做关系的目/度。关系是关系模型最核心的概念，一个关系数据库就是一组关系的集合，而一个关系就是一张二维表（笛卡尔积所代表的二维表的一个子集），比如，我们假设王兵的妻子是丁梅，李平的妻子是吴芳，则取笛卡尔积的一个子集就可以构造出一个关系 FAMILY</p>
<table>
<thead>
<tr>
<th>husband</th>
<th>wife</th>
</tr>
</thead>
<tbody>
<tr>
<td>王兵</td>
<td>丁梅</td>
</tr>
<tr>
<td>李平</td>
<td>吴芳</td>
</tr>
</tbody>
</table>
<p>关系具有一些规定（性质）</p>
<ol>
<li>关系中不能存在完全相同的两个元组</li>
<li>关系中元组行的序不重要</li>
<li>关系中列的序不重要</li>
</ol>
<p><strong>属性</strong>：关系的每一列都有一个自己的名字，称为属性。这一，上面的关系就可以表示为 $FAMILY = {husband,wife}$</p>
<p><strong>候选码</strong>：能够唯一标识一个元组的最小属性组叫做候选码，在上面的例子中，需要丈夫和妻子两个人的名字才能区分每一对夫妻，因此其候选码为 (husband,wife)，但在其它例子比如学生名单中，学生学号可以唯一标识学生，因此学号可以单独作为候选码。</p>
<p><strong>主属性</strong>：候选码中的属性叫做主属性。</p>
<p><strong>非码属性</strong>：不包含在任何候选码中的属性叫做非码属性。</p>
<p><strong>关系模式</strong>：对关系进一步抽象，表示所有关系的一个通用方法就是关系模式，表达为 $R(U,D,dom,F)$，其中 R 为关系名，U 是组成该关系的属性名集合，D 是属性组 U 中属性来自的域，dom 是属性到域的映射集合，F 为属性间数据的依赖关系集合。通常我们会简写为 $R(U)$，所以才有了上面的 $FAMILY = {husband,wife}$ 这种表示。</p>
<h2 id="2-关系代数">2. 关系代数</h2>
<p>一个数据模型，不仅包含表达数据的数据结构，还包含可对数据进行的操作。关系模型中，每个关系看作一个集合，对关系的操作可以就归纳为对集合的操作，这就是本节要介绍的关系代数。</p>
<p>关系代数的运算分为：传统的集合运算和专门的关系运算。</p>
<h3 id="21-集合运算">2.1 集合运算</h3>
<p>就是指求<strong>交集</strong>、<strong>并集</strong>和<strong>差集</strong>，要求运算的两个关系具有相同的目，且相应的属性取自同一个域。</p>
<p>还有一个特别的集合运算叫做<strong>广义笛卡尔积</strong>。假设两个关系 R 和 S 分别为 n 和 m 目，则其广义笛卡尔积是一个 n + m 列的元组的集合。若 R 有 k1 个元组，S 有 k2 个元组，则广义笛卡尔积有 $k1 × k2$ 个元组，记作 $R \times S$。通常我们在描述时一般直接称为笛卡尔积运算。</p>
<p>假设 R 关系如下</p>
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>C</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>b1</td>
<td>c1</td>
</tr>
<tr>
<td>a2</td>
<td>b2</td>
<td>c2</td>
</tr>
</tbody>
</table>
<p>S 关系如下</p>
<table>
<thead>
<tr>
<th>D</th>
<th>E</th>
</tr>
</thead>
<tbody>
<tr>
<td>d1</td>
<td>e1</td>
</tr>
<tr>
<td>d2</td>
<td>e2</td>
</tr>
<tr>
<td>d3</td>
<td>e3</td>
</tr>
</tbody>
</table>
<p>则 $R \times S$ 如下</p>
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>C</th>
<th>D</th>
<th>E</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>b1</td>
<td>c1</td>
<td>d1</td>
<td>e1</td>
</tr>
<tr>
<td>a1</td>
<td>b1</td>
<td>c1</td>
<td>d2</td>
<td>e2</td>
</tr>
<tr>
<td>a1</td>
<td>b1</td>
<td>c1</td>
<td>d3</td>
<td>e3</td>
</tr>
<tr>
<td>a2</td>
<td>b2</td>
<td>c2</td>
<td>d1</td>
<td>e1</td>
</tr>
<tr>
<td>a2</td>
<td>b2</td>
<td>c2</td>
<td>d2</td>
<td>e2</td>
</tr>
<tr>
<td>a2</td>
<td>b2</td>
<td>c2</td>
<td>d3</td>
<td>e3</td>
</tr>
</tbody>
</table>
<h3 id="22-关系运算">2.2 关系运算</h3>
<p><strong>选择</strong>：选择运算是在关系 R 中选择满足给定条件的元组，记作 $\sigma_F(R) = {t \in R \and F(t) = true}$，其中 $\sigma$ 为选择运算符，$F$ 为选择条件</p>
<p>选择运算 $\sigma_{A=&lsquo;a1&rsquo;}(R)$ 的结果为</p>
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
<th>C</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>b1</td>
<td>c1</td>
</tr>
</tbody>
</table>
<p><strong>投影</strong>：投影运算是在关系 R 中选出若干属性列组成新的关系，记作 $\pi_A(R) = {t[A]|t \in R}$，其中 $\pi$ 为投影运算符，$A$ 为选择的属性列名。需要注意的是，投影运算可能缩减元组个数，因为要去重。</p>
<p>投影运算 $\pi_{A,B}(R)$ 的结果为</p>
<table>
<thead>
<tr>
<th>A</th>
<th>B</th>
</tr>
</thead>
<tbody>
<tr>
<td>a1</td>
<td>b1</td>
</tr>
<tr>
<td>a2</td>
<td>b2</td>
</tr>
</tbody>
</table>
<p><strong>连接</strong>：连接运算是从两个关系的笛卡尔积中选取属性间满足一定条件的元组，称为θ连接，记作 $R \bowtie S$，$\bowtie$ 下面应该有个θ连接的表达式，比如 $A = B$，当θ为等号时称作<strong>等值连接</strong>。</p>
<p>连接运算可以理解为笛卡尔积和选择两个运算的结合，下面是一个等值连接的例子</p>
<p></p>
<p>当等值连接中等于号的两端是相同的属性组时，称为自然连接，上图同时也是一个<strong>自然连接</strong>，可以直接表示为 $R \bowtie S$</p>
<p><strong>左连接</strong>：左连接的意思是左表的记录会全部显示出来，而右表只会显示符合搜索条件的记录，右表记录不足的填充 NULL。</p>
<p><strong>右连接</strong>：与左连接相反，右表的记录全部显示出来，左表只会显示符合搜索条件的记录，左表记录不足的填充 NULL。</p>
<p>象集：给定一个关系 R(X,Y)，X和Y为属性组，当 t[X]=x时，x在R中的象集为：$Y_x={t[Y]|t \in R, t[X]=x}$</p>
<p>除：给定关系 R(X,Y) 和 S(Y,X)，其中 X,Y,Z 为属性组。R中的Y和S中的Y可以有不同的名字，但必须取自同一个域，R与S除得到一个新关系P(X)，P是R中满足下列条件的元组在X属性列上的投影：元组在X分量值x的象集$Y_x$包含S在Y上投影的集合，记作：$R \div S = {t_r[X]|t_r \in R \land \pi_y(S) \subseteq Y_x }$</p>
<p></p>
<h2 id="3-约束">3. 约束</h2>
<p>数据的约束条件是一组完整性规则的集合，这些规则用来限定数据模型中的数据，使其符合某种特征，比如对学生年龄的限定，奖金必须低于基本工资等。</p>
<p>关系模型的完整性约束主要包括</p>
<ol>
<li>实体完整性：主码中的属性不可取空值</li>
<li>参照完整性：关系中的某个属性列与另一个关系的主码对应</li>
<li>用户自定义完整性：类似于学生年龄取值这种符合现实特征的</li>
</ol>]]></description></item><item><title>抗疫与铁线虫入侵</title><link>https://shuzang.github.io/anti-epidemic-and-worm-invasion/</link><pubDate>Sat, 05 Sep 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://shuzang.github.io/anti-epidemic-and-worm-invasion/</guid><description><![CDATA[<p>今天的周六电影时间看的是一部韩国电影《铁线虫入侵》。可能电影本身质量不是顶尖，但结合今年的疫情和带给我的感触，看完之后我还是给了它五星。一部电影，要么能带给人们快乐，要么能带给人们反思，对我而言，这部电影做到了第二点。下面就写一写我的感受。</p>
<h2 id="1-我对疫情还不够重视">1. 我对疫情还不够重视</h2>
<p>我的家在山西的一个小县城，虽然它偏僻而落后，却恰恰因为这点，今年完全没有被疫情波及。从年初开始，我也着急买过口罩，谢绝了正月走亲戚，严格遵守社区的隔离措施和每日测温，每天跟着大家关心疫情发展，但一天、两天、一个月、两个月，警惕心就慢慢放了下来，或者说，我曾经以为的重视，其实根本没有真正重视过。看不见的敌人本就最难防备。</p>
<p>八月末离家返校的时候，我听着妈妈的叮嘱，却并没有放在心上，虽然戴了口罩，上了火车在找到自己的铺位后右立马脱了下来，毕竟有点闷热。火车上的广播一遍一遍地提醒着大家在车厢内也要戴好口罩，我抬眼看了看周围的人，很好，没有人戴，于是我也停下了拿口罩的手。上车、下车、出入车站，转乘出租，手总是不由自主地就放到了把手上、扶梯上、各种各样的物品上，然后在出入卫生间的时候匆匆地用清水洗一下手，也不用洗手液，也不遵循七步洗手法。回到学校后，出入食堂要戴口罩和测温，但是，很多人都没有遵守这个规则，戴不戴口罩完全随性而为。</p>
<p>我写这些不是指责什么，只是提醒自己，还不到放松的时候，今天看《铁线虫入侵》让我意识到了这一点。在这部电影里，所有的患者都要经历和喝水这种欲望的对抗，要经历铁线虫破体的痛苦，死后还要被带走全身营养，变得狰狞而恐怖。真的，如果你不亲眼看看这一幕，你永远无法真正重视，而恰恰，新冠并不会像电影中展示的那样带给人那么直观的感受，新冠病毒是我们肉眼看不见的，病人的痛苦我们也从未真正目睹，而对我而言，新冠甚至一直都离我很远，我身边的亲人、同学、朋友没有一例新冠感染者，这天然就降低了我的警惕，像我这样的人，在返校返工后，最容易放松。</p>
<p>那些死亡人数不只是冰冷的数字，还代表这一个个家庭的破碎，代表着他们的亲人会为此悲痛欲绝，说实话，只是在看到电影里那些患者亲属的镜头后，我才意识到这一点。</p>
<p>还不到放松的时候，我要提醒自己，出入依然要戴口罩，依然要仔细的吸收，依然要尽量减少接触，返校的同学来自五湖四海，食堂也要每天采购大量的食材，谨慎、再谨慎，是我现在唯一能做的。我们嘲笑着视频里国外民众的愚蠢，也许也应该好好想想现在的自己。</p>
<h2 id="2-国家做了很多">2. 国家做了很多</h2>
<p>电影里韩国政府其实做了不少事，但还是没有控制住情况的发展，越来越多的人死去，但我还是看到了警察在努力控制事态，医护人员在尽力急救，所有人都在尽自己的力。而今年疫情，虽然最先爆发在武汉，但国家能迅速的将疫情控制在湖北，我都想不到后面做了多少的努力，我之前也敬佩医护人员，也觉得钟南山院士很厉害，但看了电影才能联想到，面对着会感染的风险奋战在一线的医护人员具有怎样的精神，国家领导人和钟南山院士这些医药业的领导者面临着怎样的压力。</p>
<p>凡事最怕对比，看着电影里的韩国政府，看着现在世界上疫情依然肆虐的国家，我们的祖国即使在很多方面还有不足，但它依然在尽力为我们创造一个更好的未来。</p>
<h2 id="3-疫情从来不是一国之事">3. 疫情从来不是一国之事</h2>
<p>电影的最后，海面上漂浮着一具感染者尸体，我在网上搜了搜，才找到了这一幕的含义。铁线虫虽然发生了变异，可以在哺乳动物体内寄生，但不能在海水中生存，这意味着韩国的铁线虫事件得到控制，其实就相当于被平息。但海水中的尸体说明铁线虫很可能再次发生了变异，变得适应海洋环境，这样就会导致世界范围内的爆发。</p>
<p>由此我想到了新冠，尽管国内疫情已经得到了控制，但其它国家，尤其是美国和印度，依然在大规模肆虐。新冠病毒是不以人类的意志为转移的，否则早就得到了控制，我们现在在网络上对其它国家极尽嘲讽，但有没有相关，这样蔓延下去，新冠可能再次变异，产生更严重的后果。人类的希望永远不应该寄托于可能性。</p>]]></description></item><item><title>交易池底层实现</title><link>https://shuzang.github.io/transaction-and-txpool/</link><pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://shuzang.github.io/transaction-and-txpool/</guid><description><![CDATA[<p>起源于老师提出的一个问题：区块链是如何处理同时发起的多个请求的。想了想觉得核心是交易池机制，因此准备看一下交易池的原理和实现。</p>
<p>针对这个问题其实我们要找以下几个问题的答案：</p>
<ol>
<li>用户发起的交易请求（不论以何种方式）是如何转变为实际的交易的；</li>
<li>产生的交易如果不能被及时处理，是如何进入交易池的；</li>
<li>本地产生的交易和从网络中接收到的交易进入交易池是否有区别；</li>
<li>交易池的基本数据结构是怎么样的（优先队列？）</li>
<li>从交易池中提取交易进行打包时顺序是怎么样的（调度算法）</li>
</ol>
<p>入手主要是通过登链社区的 <a href="https://learnblockchain.cn/2019/06/03/eth-txpool/" target="_blank" rel="noopener noreffer">以太坊交易流程及交易池 Txpool 分析</a> 这篇文章，通过它快速找到了源码中的相关函数，因为主要使用的是 Quorum，所以看的是 Quorum 的源码。</p>
<p>注：网络中很多文章提到内存池，指的也是txpool</p>
<h2 id="1-交易形成">1. 交易形成</h2>
<p>我们的交易请求最终会赋值到 SendTxArgs 结构体的一个实例中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">SendTxArgs</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">PrivateTxArgs</span> <span class="c1">// Quorum
</span><span class="c1"></span>
	<span class="nx">From</span>     <span class="nx">common</span><span class="p">.</span><span class="nx">Address</span>  <span class="s">`json:&#34;from&#34;`</span>
	<span class="nx">To</span>       <span class="o">*</span><span class="nx">common</span><span class="p">.</span><span class="nx">Address</span> <span class="s">`json:&#34;to&#34;`</span>
	<span class="nx">Gas</span>      <span class="o">*</span><span class="nx">hexutil</span><span class="p">.</span><span class="nx">Uint64</span> <span class="s">`json:&#34;gas&#34;`</span>
	<span class="nx">GasPrice</span> <span class="o">*</span><span class="nx">hexutil</span><span class="p">.</span><span class="nx">Big</span>    <span class="s">`json:&#34;gasPrice&#34;`</span>
	<span class="nx">Value</span>    <span class="o">*</span><span class="nx">hexutil</span><span class="p">.</span><span class="nx">Big</span>    <span class="s">`json:&#34;value&#34;`</span>
	<span class="nx">Nonce</span>    <span class="o">*</span><span class="nx">hexutil</span><span class="p">.</span><span class="nx">Uint64</span> <span class="s">`json:&#34;nonce&#34;`</span>
	<span class="nx">Data</span>  <span class="o">*</span><span class="nx">hexutil</span><span class="p">.</span><span class="nx">Bytes</span> <span class="s">`json:&#34;data&#34;`</span>
	<span class="nx">Input</span> <span class="o">*</span><span class="nx">hexutil</span><span class="p">.</span><span class="nx">Bytes</span> <span class="s">`json:&#34;input&#34;`</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这个实例被传递给 <code>quorum/internal/ethapi/api.go</code> 的 <code>SendTransaction</code> 函数用来创建一个交易。创建交易的过程如下</p>
<ol>
<li>根据 From 字段找到当前账户</li>
<li>设置交易默认参数</li>
<li>对交易进行序列化，变为可存储和传输的形式。</li>
<li>根据 To 字段决定是创建部署合约交易还是调用合约交易</li>
<li>对交易进行 RLP 编码并根据之前获得的账户密钥对交易进行签名</li>
<li>提交交易到交易池</li>
</ol>
<p>序列化主要处理 SendTxArgs 结构中的 Data 和 Input 字段，Data 字段主要用于向前兼容，应尽量使用 Input 字段。当部署合约的时候，Input 是合约代码，当发送交易的时候，Input 是交易的内容。</p>
<h2 id="2-交易添加到交易池">2. 交易添加到交易池</h2>
<p>SendTransaction 最后调用 <code>SubmitTransaction</code> 函数将交易提交到交易池，不过，更底层的调用是 <code>quourm/core/tx_pool.go</code> 的 AddLocals 函数，这里还应该提到，来自网络的交易会调用 AddRemotes 函数。</p>
<p>需要注意的是，调用这两个函数之前都应该验证交易的有效性。同时，这两个函数底层都调用 addTxs 函数，最终的调用是 add 函数。不过在介绍 add 函数前先了解一下交易池的结构。</p>
<p>交易池是一个非常复杂的结构体，但最核心的字段只有两个 <code>pending</code> 和 <code>queue</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">TxPool</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">pending</span> <span class="kd">map</span><span class="p">[</span><span class="nx">common</span><span class="p">.</span><span class="nx">Address</span><span class="p">]</span><span class="o">*</span><span class="nx">txList</span>   <span class="c1">// All currently processable transactions
</span><span class="c1"></span>	<span class="nx">queue</span>   <span class="kd">map</span><span class="p">[</span><span class="nx">common</span><span class="p">.</span><span class="nx">Address</span><span class="p">]</span><span class="o">*</span><span class="nx">txList</span>   <span class="c1">// Queued but non-processable transactions
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p><a href="https://github.com/ConsenSys/quorum/blob/d51931173bde132243a87e7a2adadef4abe58470/core/tx_pool.go#L601" target="_blank" rel="noopener noreffer">add</a> 函数比较复杂，但添加交易到交易池的逻辑很简单</p>
<ol>
<li>验证交易的有效性</li>
<li>如果 nonce 已存在，且 pending 中旧交易的 price 没有新交易高，会被新交易替换掉</li>
<li>如果 nonce 不存在，不可以替换 pending 中的任何交易，此时将新的交易插入 queue 的末尾</li>
</ol>
<p>注：交易中的 nonce 指的是 from 账户发出交易的次数, 从0开始递增，同一账户的交易会被依次确认，所以同一个 nonce 代表是同一个交易，会优先选择 price 更高的交易。</p>
<h2 id="3-清理交易池">3. 清理交易池</h2>
<p>交易池是完全存在内存中的，因此有大小限制，每当超过一定的阈值就需要清理。实际实现时，pending 的缓冲区容量默认为 4096，queue 的缓冲区容量默认为 1024。</p>
<p>清理的时机是交易池满的时候，清理的原则是价格较低的最先清理</p>
<p>调用清理函数依然是在 add 函数中</p>
<h2 id="4-重构交易池">4. 重构交易池</h2>
<p>作为一个分布式系统，总是会出现一种情况：本地节点已经挑选好最优的交易，并准备好广播给整个网络，结果这个时候矿工已经打包好了一个区块，这时候本地节点的区块头就是旧的了，筛选好的交易也已经可能被打包，此时再广播这些交易就没了意义。</p>
<p>为了避免上述情况的发生，本地节点要随时监听是否有新区块产生，当监听到新区块产生这个事件后，无论是本地节点领先，还是网络上其它节点领先，都回退一个区块号，</p>
<p></p>
<p>本地节点回退时，把撤销的交易保持到 discarded 切片中，网络上其他节点的撤销交易保存在 <code>included</code> 切片中。</p>
<p>当区块号一致的时候，还需要进一步的比较区块的 <code>Hash</code> 来进一步确认区块里面的交易是否一致，如果不一致一致回退到区块 Hash 为止，回退撤销的交易依旧保存在 <code>discarded</code> 和 <code>included</code> 切片中。</p>
<p>等完全确认本地和网络的链没有分叉的时候，就需要比较 discarded 和 included 里面的交易，因为网络上区块的生成优先级高于本地，所以需要剔除 <code>discarded</code> 中 <code>inclueded</code> 的交易，生成 <code>reinject</code> 切片，剔除完以后还需要对 <code>TXpool</code> 按照网络新生成区块的信息设置世界状态等信息，设置完以后，重新将 <code>reinject</code> 加入 <code>TXpool</code>，加入以后在进行验证清理等流程。</p>
<h2 id="5-问题回答">5. 问题回答</h2>
<p>回答文章开头提出的几个问题</p>
<ol>
<li>
<p>用户发起的交易请求（不论以何种方式）是如何转变为实际的交易的；</p>
<p>所有与交易请求相关的参数被赋值到一个结构体中，然后进行序列化转变为可存储和传输的形式，最后生成交易并进行签名</p>
</li>
<li>
<p>产生的交易如果不能被及时处理，是如何进入交易池的</p>
<p>最终是调用一个 add 函数，添加到了一个队列里</p>
</li>
<li>
<p>本地产生的交易和从网络中接收到的交易进入交易池是否有区别；</p>
<p>没有区别，底层都是调用 add 函数</p>
</li>
<li>
<p>交易池的基本数据结构是怎么样的（优先队列？）</p>
<p>交易池是一个结构体，核心是 pending 和 queue 两个 map，map 的键是一个地址，值是一个交易链表形成的队列</p>
</li>
<li>
<p>从交易池中提取交易进行打包时顺序是怎么样的（调度算法）</p>
<p>price 越高优先级越大</p>
</li>
</ol>
<p>我们可以理解为区块链底层利用交易池对并发产生的请求做了异步化，交易产生的时刻和交易被打包的时刻是随机的。</p>
<p>这里面我们可以视作有一个排队论的问题，相关度比较高的论文有两篇</p>
<p>[1] J. Li, Y. Yuan, S. Wang and F. Wang, &ldquo;<a href="https://ieeexplore.ieee.org/document/8500403" target="_blank" rel="noopener noreffer">Transaction Queuing Game in Bitcoin BlockChain</a>,&rdquo; <em>2018 IEEE Intelligent Vehicles Symposium (IV)</em>, Changshu, 2018, pp. 114-119, doi: 10.1109/IVS.2018.8500403.</p>
<p>[2] Memon RA, Li JP, Ahmed J. <a href="https://www.mdpi.com/2079-9292/8/2/234#cite" target="_blank" rel="noopener noreffer">Simulation Model for Blockchain Systems Using Queuing Theory</a>. <em>Electronics</em>. 2019; 8(2):234.</p>
<p>后注1：在实现 TXpool 的时候为了保证数据的一致性会使用大量的锁</p>
<p>后注2：总结以下可以发现交易池中交易的顺序与以下几方面有关</p>
<ol>
<li>交易费</li>
<li>交易哈希（重构交易池时区块相同会进行比较）</li>
<li>在交易池中的时间（时间过长可能会被清除）</li>
</ol>
<h2 id="6-时间">6. 时间</h2>
<p>更全面的描述可以参考 <a href="https://learnblockchain.cn/books/geth/part2/txpool.html" target="_blank" rel="noopener noreffer">以太坊技术与实现：交易池</a></p>
<p>我们关心发起交易的时间和智能合约执行并返回结果的时间是否有区别</p>]]></description></item></channel></rss>