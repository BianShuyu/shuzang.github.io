<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>爱编程爱技术的孩子 on Shuzang's Blog</title><link>https://shuzang.github.io/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/</link><description>Recent content in 爱编程爱技术的孩子 on Shuzang's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 18 May 2020 17:13:00 +0800</lastBuildDate><atom:link href="https://shuzang.github.io/categories/%E7%88%B1%E7%BC%96%E7%A8%8B%E7%88%B1%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A9%E5%AD%90/index.xml" rel="self" type="application/rss+xml"/><item><title>网络</title><link>https://shuzang.github.io/2020/05/network/</link><pubDate>Mon, 18 May 2020 17:13:00 +0800</pubDate><guid>https://shuzang.github.io/2020/05/network/</guid><description>Docker 允许通过外部访问容器或容器互联的方式来提供网络服务。 1. 外部访问容器 容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 -P 或 -p 参</description></item><item><title>镜像、容器与仓库</title><link>https://shuzang.github.io/2020/05/image-container-and-repository/</link><pubDate>Mon, 18 May 2020 09:00:00 +0800</pubDate><guid>https://shuzang.github.io/2020/05/image-container-and-repository/</guid><description>&lt;p>Docker 的三个基本概念是镜像（Image）、容器（Container）和仓库（Repository），理解了这三个概念基本就理解了 Docker。&lt;/p></description></item><item><title>算法-回溯</title><link>https://shuzang.github.io/2020/05/backtracking/</link><pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/05/backtracking/</guid><description>在真实世界的问题中，很多都不存在快速解法，只能穷尽搜索，一个高效的搜索技术非常重要。回溯（Backtracking）和分支限界（Branch</description></item><item><title>算法-贪心</title><link>https://shuzang.github.io/2020/05/greedu/</link><pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/05/greedu/</guid><description/></item><item><title>算法-动态规划</title><link>https://shuzang.github.io/2020/05/dynamic-programming/</link><pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/05/dynamic-programming/</guid><description>&lt;p>动态规划策略通常用于求解最优化问题。在这类问题中，可能会有许多可行解，每个解对应一个值，我们希望找到具有最优值的那个解，也就是最优解。当题目中涉及「最大」「最小」等词时，很有可能就是这类问题，要考虑是否可用动态规划求解。&lt;/p></description></item><item><title>Win10 Home版安装Docker Desktop on Windows</title><link>https://shuzang.github.io/2020/04/install-docker-desktop-on-windows-10-home/</link><pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/04/install-docker-desktop-on-windows-10-home/</guid><description>Docker Desktop 是 Windows 安装 Docker 的推荐安装方式，然而系统需求是 Pro, Enterprise 或 Education 版本，Home 版不支持，因为没有 Hyper-V。 这篇文章记录网上找到的 Win10 Home 版安装 Docker Desktop 的方</description></item><item><title>使用 Docker 安装运行 mysql</title><link>https://shuzang.github.io/2020/04/using-docker-installation-to-run-mysql/</link><pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/04/using-docker-installation-to-run-mysql/</guid><description>Docker Hub 中的 mysql 镜像 地址为 https://hub.docker.com/_/mysql，安装运行过程如下。 1. 拉取镜像 1 2 3 4 5 6 $ docker pull mysql # 查看 $ docker</description></item><item><title>算法-递归与分治</title><link>https://shuzang.github.io/2020/04/divide-and-conquer/</link><pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/04/divide-and-conquer/</guid><description>首先简单阐述一下递归、分治、动态规划和贪心这几个东西的区别和练习。 递归是一种编程技巧，一种解决问题的思维方式； 分治和动态规划是建立在递归基础</description></item><item><title>算法-排序</title><link>https://shuzang.github.io/2020/04/algorithm-sort/</link><pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/04/algorithm-sort/</guid><description>排序算法分为内部排序（待排序记录存放在内存中进行的排序过程）和外部排序（由于待排序记录数量大，以致内存一次不能容纳全部记录，在排序过程中需要</description></item><item><title>算法-搜索</title><link>https://shuzang.github.io/2020/03/algorithm-search/</link><pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/03/algorithm-search/</guid><description/></item><item><title>算法-字符串类问题</title><link>https://shuzang.github.io/2020/03/stings-problem/</link><pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/03/stings-problem/</guid><description/></item><item><title>算法-数组类问题</title><link>https://shuzang.github.io/2020/03/array-problem/</link><pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/03/array-problem/</guid><description>数组的访问时间为 $O(1)$，这是它最大的优势，但限于数组固定的大小，平常使用最多的是动态数组。在 Golang 中，其实就是[切片]^(slice)，动</description></item><item><title>数据结构-图</title><link>https://shuzang.github.io/2020/03/data-structure-graph/</link><pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/03/data-structure-graph/</guid><description>链表是一种一对一的关系，树是一种一对多的关系，图则是一种多对多的关系。实际上，我们可以将链表和树都看作图的一部分。 1. 图的定义 用 V(Vertex) 表示顶点的集</description></item><item><title>数据结构-堆</title><link>https://shuzang.github.io/2020/03/data-structure-heap/</link><pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/03/data-structure-heap/</guid><description>普通的队列是一种先进先出的数据结构，元素在队列尾追加，而从队列头删除。在优先队列中，元素被赋予优先级。当访问元素时，具有最高优先级的元素最先</description></item><item><title>数据结构-树的常见题型</title><link>https://shuzang.github.io/2020/03/common-question-of-tree/</link><pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/03/common-question-of-tree/</guid><description>下列题目中二叉树结点的定义如下 1 2 3 4 type TreeNode struct { Val int Left *TreeNode } 1. 二叉树 1.1 二叉树的深度 输入一棵二叉树的根节点，求该树的深度。从根节点到叶节点依次经过</description></item><item><title>数据结构-树</title><link>https://shuzang.github.io/2020/02/data-structure-tree/</link><pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/02/data-structure-tree/</guid><description>树是反映事物之间层次关系的一种结构，比如家谱树、硬盘目录结构树等。 使用树的原因是这种层次结构在管理上有更高的效率，以查找为例，顺序查找的时间</description></item><item><title>数据结构-队列与栈</title><link>https://shuzang.github.io/2020/02/data-structure-queue-and-stack/</link><pubDate>Sat, 22 Feb 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/02/data-structure-queue-and-stack/</guid><description>队列是先入先出的数据结构，栈是后入先出的数据结构，并不因实现形式的不同（数组或链表）而有差别。在本文中，我们对队列的核心功能，栈的核心功能，</description></item><item><title>数据结构-链表</title><link>https://shuzang.github.io/2020/02/data-structure-linkedlist/</link><pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/02/data-structure-linkedlist/</guid><description>链表是一种最为基础的数据结构，由一系列结点组成，每个结点不仅包含值，还包含指向下一个结点（有时也包括上一个结点）的指针。相比于数组，在链表中</description></item><item><title>win10效率优化5-系统功能的充分利用</title><link>https://shuzang.github.io/2020/01/efficient-use-of-win10-5-system-function-use/</link><pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/01/efficient-use-of-win10-5-system-function-use/</guid><description>作为一款成熟的商业系统，windows提供了大量实用的功能，尤其是到了win10后，很多功能的体验变得越来越好，本篇对这些功能做总结。 值得注</description></item><item><title>win10效率优化6-软件体系整理</title><link>https://shuzang.github.io/2020/01/efficient-use-of-win10-6-software-collection/</link><pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/01/efficient-use-of-win10-6-software-collection/</guid><description>对win10中使用的软件体系进行整理，在满足需要的同时，选择每一类软件中最适合的一种，同时尽量减少安装的软件数量。 1. 系统管理 1.1 火绒 抛弃腾讯和</description></item><item><title>win10效率优化4-文件管理</title><link>https://shuzang.github.io/2020/01/efficient-use-of-win10-4-file-management/</link><pubDate>Fri, 17 Jan 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/01/efficient-use-of-win10-4-file-management/</guid><description>文件管理是效率提升、电子资料极简化的重要部分，本文探索如何有效的对win10中的文件进行管理，核心包括三部分：分类、命名和备份。 分类 win1</description></item><item><title>Ubuntu中无法获得锁相关问题的解决方案</title><link>https://shuzang.github.io/2020/01/ubuntu%E4%B8%AD%E6%97%A0%E6%B3%95%E8%8E%B7%E5%BE%97%E9%94%81%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link><pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/01/ubuntu%E4%B8%AD%E6%97%A0%E6%B3%95%E8%8E%B7%E5%BE%97%E9%94%81%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid><description>Ubuntu环境下，Unable to acquire the lock这类问题时有发生，本文对该问题的解决方案做一个总结 E: Could not get lock /var/lib/dpkg/lock-frontend - open (11: Resource temporarily unavailable) E: Unable to acquire the dpkg frontend lock (/var/lib/dpkg/lock-frontend), is</description></item><item><title>Golang语法基础12-测试</title><link>https://shuzang.github.io/2019/12/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%8012-%E6%B5%8B%E8%AF%95/</link><pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/12/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%8012-%E6%B5%8B%E8%AF%95/</guid><description>实际开发中对代码进行测试是不可缺少的工作，在go中可以通过testing包来进行代码的测试。testing包和go test命令相互配合，能够</description></item><item><title>Golang语法基础11-错误处理</title><link>https://shuzang.github.io/2019/12/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%8011-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</link><pubDate>Fri, 20 Dec 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/12/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%8011-%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/</guid><description>Go中有两套错误处理的方式 普通错误： 在函数和方法中返回错误对象作为它们的唯一或最后一个返回值 ，如果返回nil，表示没有错误 异常：使用pani</description></item><item><title>linux系统时间同步</title><link>https://shuzang.github.io/2019/12/linux%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5/</link><pubDate>Fri, 20 Dec 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/12/linux%E7%B3%BB%E7%BB%9F%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5/</guid><description>虚拟机长时间不开机，系统时间和当前时间不同步，导致很多操作被拒绝，这里记录如何主动同步系统的时间和网络时间 正文 设置系统时区 1 $ timedatectl set-timezone Asia/Shanghai 安装nt</description></item><item><title>Golang语法基础10-协程与通道</title><link>https://shuzang.github.io/2019/12/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%8010-%E5%8D%8F%E7%A8%8B%E4%B8%8E%E9%80%9A%E9%81%93/</link><pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/12/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%8010-%E5%8D%8F%E7%A8%8B%E4%B8%8E%E9%80%9A%E9%81%93/</guid><description>首先来回顾在操作系统中学过的一些概念。进程(processes)是程序执行的基本单位，运行在一个独立的内存地址空间中；一个进程由多个线程(t</description></item><item><title>Golang语法基础8-结构体与方法</title><link>https://shuzang.github.io/2019/11/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%808-%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%8E%E6%96%B9%E6%B3%95/</link><pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/11/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%808-%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%8E%E6%96%B9%E6%B3%95/</guid><description>Go中结构体的概念和C相同，甚至声明用的关键字也是struct，因为Go中没有类的概念，因此结构体的地位比较重要。 1. 定义与初始化 简单的结构体</description></item><item><title>Golang语法基础9-接口与反射</title><link>https://shuzang.github.io/2019/11/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%809-%E6%8E%A5%E5%8F%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/</link><pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/11/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%809-%E6%8E%A5%E5%8F%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/</guid><description>1. 接口 上一篇谈到类型 T（或 *T）上的所有方法的集合叫做类型 T（或 *T）的方法集，接口可以用来定义方法集，但是这种定义是抽象的，不包含方法的代</description></item><item><title>Golang语法基础7-函数</title><link>https://shuzang.github.io/2019/11/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%807-%E5%87%BD%E6%95%B0/</link><pubDate>Mon, 25 Nov 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/11/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%807-%E5%87%BD%E6%95%B0/</guid><description>1. 函数声明与定义 Go中有三种类型的函数： 普通的带有名字的函数 匿名函数 方法（Methods，在结构体部分介绍） 普通函数声明的基本格式为 1 func functionName(param1 type1,</description></item><item><title>Golang语法基础6-数组、切片与映射</title><link>https://shuzang.github.io/2019/11/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%806-%E6%95%B0%E7%BB%84%E5%88%87%E7%89%87%E4%B8%8E%E6%98%A0%E5%B0%84/</link><pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/11/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%806-%E6%95%B0%E7%BB%84%E5%88%87%E7%89%87%E4%B8%8E%E6%98%A0%E5%B0%84/</guid><description>只有基本的数据类型无法适应所有的情况，当需要存储和处理大量数据时，通常会使用数组、映射、链表等数据结构，称之为容器(container)。在</description></item><item><title>hugo搭建个人博客5-博客收集</title><link>https://shuzang.github.io/2019/11/hugo-blog-themes-collection/</link><pubDate>Sun, 17 Nov 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/11/hugo-blog-themes-collection/</guid><description>本文用来收集喜欢的主题和有参考价值的博客(使用Hexo或Hugo的)。 主题 LeaveIt KeepIt LoveIt AllinOne hexo-theme-pure hexo-theme-Chic 博客 Yearito&amp;rsquo;s Blog 深入浅出区块链 Sirice&amp;rsquo;s Blog Mogeko&amp;rsquo;s Blog Wyane&amp;rsquo;s Blog Dillon&amp;rsquo;s Blog Orianna的</description></item><item><title>Golang语法基础5-字符串操作与输入输出</title><link>https://shuzang.github.io/2019/11/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%805-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E4%B8%8E%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</link><pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/11/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%805-%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E4%B8%8E%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA/</guid><description>本篇介绍字符串的相关操作，涉及string和strconv两个标准库，以及介绍输入输出的基本方法，涉及fmt和bufio两个标准库。 1. 字符串</description></item><item><title>Golang语法基础4-运算符与流程控制</title><link>https://shuzang.github.io/2019/10/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%804-%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</link><pubDate>Tue, 29 Oct 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/10/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%804-%E8%BF%90%E7%AE%97%E7%AC%A6%E4%B8%8E%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid><description>运算符 Go语言的运算符有6种，如下表所示 运算符类型 运算符 算术运算符 +，-，*，/，%，++，&amp;ndash; 关系运算符 ==，!=，&amp;gt;，&amp;</description></item><item><title>Win10效率优化3-桌面整理</title><link>https://shuzang.github.io/2019/10/efficient-use-of-win10-3-desktop-management/</link><pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/10/efficient-use-of-win10-3-desktop-management/</guid><description>对任何系统来讲，桌面的整理都是重中之重。有些人喜欢文件触手可及，所有东西都放在桌面。有些人喜欢极简美观，桌面一尘不染，全部通过快速搜索完成。</description></item><item><title>Golang语法基础3-常量变量与基本数据类型</title><link>https://shuzang.github.io/2019/10/golang-syntax-3-constants-variables-and-elementary-types/</link><pubDate>Tue, 22 Oct 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/10/golang-syntax-3-constants-variables-and-elementary-types/</guid><description>常量 常量使用关键字const定义，用于存储程序运行过程中不会改变的数据，试图改变会引发编译错误。Fundamentals of golang syntax 3 - constant variables and basic data</description></item><item><title>Win10效率优化1-综述</title><link>https://shuzang.github.io/2019/10/efficient-use-of-win10-1-overview/</link><pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/10/efficient-use-of-win10-1-overview/</guid><description>得益于苹果的生态，MacOS上的优秀软件不少，因此网上存在大量介绍如何利用Mac有效率的学习、工作和生活的文章。但对于Win10来说，这方面</description></item><item><title>Win10效率优化2-锁屏与登录</title><link>https://shuzang.github.io/2019/10/efficient-use-of-win10-2-lockscreen-and-login/</link><pubDate>Mon, 21 Oct 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/10/efficient-use-of-win10-2-lockscreen-and-login/</guid><description>Win10 系统中，锁屏是我们登录系统前看到的一个界面。它的作用是当我们暂时离开电脑时阻止别人操作，但早晨当我们打开电脑时，第一眼看到也是锁屏界面，因</description></item><item><title>Git学习 子模块管理与使用</title><link>https://shuzang.github.io/2019/09/git-learning-usage-of-submodule/</link><pubDate>Mon, 30 Sep 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/09/git-learning-usage-of-submodule/</guid><description>当我们在一个 Git 项目上工作时，有时候需要在其中使用另外一个 Git 项目。这个情况可以在 Git 中使用子模块 submodule 来进行管理。submodule 允许我们将一个 Git</description></item><item><title>hugo搭建个人博客4-主题美化</title><link>https://shuzang.github.io/2019/09/hugo-blog-theme-beautify/</link><pubDate>Mon, 30 Sep 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/09/hugo-blog-theme-beautify/</guid><description>1. 基础知识 通过一个简单的主题开发流程，理解需要的基本知识，为自己进行主题修改和美化打基础，这里参考create a new theme 一文。 开发准备 Ubunt</description></item><item><title>Golang语法基础2-命令、包与模块</title><link>https://shuzang.github.io/2019/09/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%802-%E5%91%BD%E4%BB%A4%E5%8C%85%E4%B8%8E%E6%A8%A1%E5%9D%97/</link><pubDate>Thu, 19 Sep 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/09/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%802-%E5%91%BD%E4%BB%A4%E5%8C%85%E4%B8%8E%E6%A8%A1%E5%9D%97/</guid><description>本篇介绍Go中的基础命令，包和垃圾回收机制 1. 命令 Go在安装后自带一个命令行工具，名为go，用来下载、编译、安装、测试Go的包和源文件，关于G</description></item><item><title>Golang语法基础1-背景与开发环境准备</title><link>https://shuzang.github.io/2019/09/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%801-%E8%83%8C%E6%99%AF%E4%B8%8E%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</link><pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/09/golang%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%801-%E8%83%8C%E6%99%AF%E4%B8%8E%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</guid><description>1. 起源与发展 Go/Golang起源于2007年，并于2009年正式对外发布，是一个完全开源的项目，背后的支持者是谷歌公司，核心设计者是三位著</description></item><item><title>win10使用WSL</title><link>https://shuzang.github.io/2019/09/win10%E4%BD%BF%E7%94%A8wsl/</link><pubDate>Wed, 11 Sep 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/09/win10%E4%BD%BF%E7%94%A8wsl/</guid><description>因为只是想熟悉一下Linux基本操作，每次都打开虚拟机未免有些麻烦，于是决定使用win10上的WSL(Windows Subsystem for Linux, windows下的</description></item><item><title>VMware虚拟机使用技巧</title><link>https://shuzang.github.io/2019/09/vmware-usage/</link><pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/09/vmware-usage/</guid><description>双系统时常折腾容易坏电脑，因此一般是在虚拟机中使用Linux系统，常用的虚拟机为VMware，本文对VMware的相关知识以及使用过程中的一</description></item><item><title>树莓派和虚拟机组网出现的问题及解决思路</title><link>https://shuzang.github.io/2019/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%92%8C%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BB%84%E7%BD%91%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF/</link><pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%92%8C%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BB%84%E7%BD%91%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF/</guid><description>小米随身WiFi拥有两种模式，网卡模式可以令电脑搜索并接入其它的WiFi，AP模式可以开启一个WiFi供别的设备加入。现在拥有一台主机，插在</description></item><item><title>树莓派使用网线直连电脑</title><link>https://shuzang.github.io/2019/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BA%BF%E7%9B%B4%E8%BF%9E%E7%94%B5%E8%84%91/</link><pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BA%BF%E7%9B%B4%E8%BF%9E%E7%94%B5%E8%84%91/</guid><description>树莓派刷好系统，要进行联网使用，手里没有显示屏和HDMI线，实验室没有路由器，电脑也没有无线网卡，唯一的网口也被占用。只能通过网线和USB网</description></item><item><title>树莓派常用设置</title><link>https://shuzang.github.io/2019/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/</link><pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/09/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/</guid><description>记录树莓派使用过程中经常使用的一些设置。 1. WiFi连接 这里指的是初次启动直连WiFi，主要是因为手里没有屏幕，因为使用的小米随身WiFi，所</description></item><item><title>Golang查漏补缺 按指定长度构造二维切片</title><link>https://shuzang.github.io/2019/09/golang%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA-%E6%8C%89%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6%E6%9E%84%E9%80%A0%E4%BA%8C%E7%BB%B4%E5%88%87%E7%89%87/</link><pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/09/golang%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA-%E6%8C%89%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6%E6%9E%84%E9%80%A0%E4%BA%8C%E7%BB%B4%E5%88%87%E7%89%87/</guid><description>因为初始化时，数组长度必须为常量，所以当要求按给定的长度构造数组时，一般都使用切片来完成。一维的切片直接使用arr := make([]int, len)构造，len是</description></item><item><title>Golang查漏补缺 bufio读取的字符串无法直接进行类型转换</title><link>https://shuzang.github.io/2019/08/golang%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA-bufio%E8%AF%BB%E5%8F%96%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%97%A0%E6%B3%95%E7%9B%B4%E6%8E%A5%E8%BF%9B%E8%A1%8C%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link><pubDate>Tue, 27 Aug 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/08/golang%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA-bufio%E8%AF%BB%E5%8F%96%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%97%A0%E6%B3%95%E7%9B%B4%E6%8E%A5%E8%BF%9B%E8%A1%8C%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid><description>如下列代码，在使用bufio包中的ReadString读取字符串之后，这个字符串无法进行类型转换，每次使用strconv.Atoi()函数返</description></item><item><title>Git学习 commit信息编写指南</title><link>https://shuzang.github.io/2019/08/github-commit-messages-guide/</link><pubDate>Thu, 22 Aug 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/08/github-commit-messages-guide/</guid><description>1. 什么是“commit”？ 简单来讲，commit 就是在本地仓库中编写的文件的快照。与印象中不同的是，Git 不仅存储不同版本文件之间的差异，还</description></item><item><title>Golang查漏补缺 对自定义类型排序</title><link>https://shuzang.github.io/2019/08/golang%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA-%E5%AF%B9%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E6%8E%92%E5%BA%8F/</link><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/08/golang%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA-%E5%AF%B9%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E6%8E%92%E5%BA%8F/</guid><description>PAT乙级25分的题好多需要根据一个结构体类型的某个字段进行排序，第一次遇到时确实不知所措，然后查了不少解决方案，这里做个总结。 这一问题一般</description></item><item><title>Golang查漏补缺 程序执行时间优化</title><link>https://shuzang.github.io/2019/08/golang%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA-%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4%E4%BC%98%E5%8C%96/</link><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/08/golang%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA-%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4%E4%BC%98%E5%8C%96/</guid><description>最近在刷PAT乙级的题，因为PAT考点一般只提供C/C++或Java环境的缘故，网上找到的90%都是C++代码，剩下的又绝大部分是Java，</description></item><item><title>hugo搭建个人博客3-进阶设置</title><link>https://shuzang.github.io/2019/07/hugo-blog-advanced-setup/</link><pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/07/hugo-blog-advanced-setup/</guid><description>本文是 Hugo 使用记录的第二篇，介绍如何为Hugo开启更多的功能。 1. 添加菜单栏页面 我们可以自己建立新的菜单页面1 ，比如我新建life页面用作展示阅</description></item><item><title>hugo搭建个人博客2-文章写作</title><link>https://shuzang.github.io/2019/05/hugo-blog-article-write/</link><pubDate>Wed, 15 May 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/05/hugo-blog-article-write/</guid><description>本文是 Hugo 使用记录的第二篇，介绍关于文章写作的一些问题，包括分类管理、排版技巧、特殊语法等，所有语法基于 LoveIt 主题。 Hugo支持的文章格式为.md</description></item><item><title>hugo搭建个人博客1-基础建站</title><link>https://shuzang.github.io/2019/04/hugo-builds-personal-blog-1/</link><pubDate>Fri, 26 Apr 2019 10:45:00 +0800</pubDate><guid>https://shuzang.github.io/2019/04/hugo-builds-personal-blog-1/</guid><description>Hugo 是由 Go 语言实现的静态网站生成器，可以快速建立一个静态网站，虽然多数情况下用来搭建个人博客，但也可以用作展示在线书籍、个人简历等。在使用 Hugo 之</description></item><item><title>Git学习 README页面添加徽章</title><link>https://shuzang.github.io/2019/03/add-badge-to-readme-page/</link><pubDate>Tue, 26 Mar 2019 22:14:00 +0800</pubDate><guid>https://shuzang.github.io/2019/03/add-badge-to-readme-page/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>我们在逛github的时候，经常能在README.md页面看到如下所示的徽章，通常展示了项目的相关信息，这种形式比单纯的文字描述更加吸引人，今天就来学一学如何在项目中插入这些徽章。&lt;/p>
&lt;p>&lt;figure>&lt;img src="https://shuzang.github.io/svg/loading.min.svg" data-sizes="auto" data-src="https://img.shields.io/badge/build-passing-brightgreen.svg" alt="编译进行中" title="编译进行中" class="lazyload">
&lt;figcaption class="image-caption">编译进行中&lt;/figcaption>&lt;/figure>
&lt;figure>&lt;img src="https://shuzang.github.io/svg/loading.min.svg" data-sizes="auto" data-src="https://img.shields.io/badge/downloads-120%2Fweek-green.svg" alt="下载" title="下载" class="lazyload">
&lt;figcaption class="image-caption">下载&lt;/figcaption>&lt;/figure>
&lt;figure>&lt;img src="https://shuzang.github.io/svg/loading.min.svg" data-sizes="auto" data-src="https://img.shields.io/badge/license-MIT-green.svg" alt="协议" title="协议" class="lazyload">
&lt;figcaption class="image-caption">协议&lt;/figcaption>&lt;/figure>
&lt;figure>&lt;img src="https://shuzang.github.io/svg/loading.min.svg" data-sizes="auto" data-src="https://img.shields.io/badge/platform-linux--64%20%7C%20win--32%20%7C%20osx--64%20%7C%20win--64-lightgrey.svg" alt="支持平台" title="支持平台" class="lazyload">
&lt;figcaption class="image-caption">支持平台&lt;/figcaption>&lt;/figure>
&lt;/p></description></item><item><title>树莓派项目构想-扫地机器人</title><link>https://shuzang.github.io/2019/03/raspberry-project-sweeping-robot/</link><pubDate>Tue, 26 Mar 2019 19:40:00 +0800</pubDate><guid>https://shuzang.github.io/2019/03/raspberry-project-sweeping-robot/</guid><description>&lt;h2 id="前言">前言&lt;/h2>
&lt;p>本文是创新创业的结课报告，结课报告的题目要求如下：&lt;/p>
&lt;ul>
&lt;li>通过课程学习、课下查阅网络与图文资料，了解和掌握树莓派的功能、扩展性与应用领域（树莓派的典型和非典型应用）&lt;/li>
&lt;li>深入分析某一个具体行业或工作的工作特点，找到痛点难点，并分析树莓派的适用性（树莓派的什么特点使其适合用于解决这一问题）&lt;/li>
&lt;li>基于树莓派的功能，讨论如何通过增加相应的软硬件（传感器、软件模块、算法库……等），满足所关注的问题&lt;/li>
&lt;li>以“开发产品原型并吸引风投”为目标，完成一份创业项目计划书&lt;/li>
&lt;/ul>
&lt;p>注：不要求完成实际作品，而是强调基于技术的创意、运用工具和所学知识解决实际问题的能力、分析评价项目商业价值的能力&lt;/p></description></item><item><title>利用树莓派作为服务器建立动态博客</title><link>https://shuzang.github.io/2019/03/using-virtual-machine-as-raspberry-pi-server-to-build-dynamic-blog/</link><pubDate>Wed, 13 Mar 2019 14:32:00 +0800</pubDate><guid>https://shuzang.github.io/2019/03/using-virtual-machine-as-raspberry-pi-server-to-build-dynamic-blog/</guid><description>1. 前言 该工作为课程作业，主要目标为利用树莓派作为服务器，完成wordpress的配置，建立动态博客网站。详细的作业要求如下： 制作raspbi</description></item><item><title>ping程序实现</title><link>https://shuzang.github.io/2018/10/ping%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0/</link><pubDate>Mon, 01 Oct 2018 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2018/10/ping%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0/</guid><description>1. 设计要求 基于Raw Socket编程实现Ping的客户端程序，并分析所实现的Ping的网络攻击性。 **注：**程序已给出，只需要调试使其正常</description></item><item><title>Markdown使用探索</title><link>https://shuzang.github.io/2018/07/markdown-usage/</link><pubDate>Sun, 01 Jul 2018 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2018/07/markdown-usage/</guid><description>前言 Markdown用习惯之后，就会不管什么事都想用它来做，因为真的太好用了。本篇文章就是一些尝试，因为往往“不堪大用”，所以给这篇文章起了</description></item><item><title>Markdown语法</title><link>https://shuzang.github.io/2018/06/markdown-syntax/</link><pubDate>Sat, 30 Jun 2018 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2018/06/markdown-syntax/</guid><description>Markdown由Aaron Swartz和John Gruber共同设计 Aaron Swartz的博客：http://www.aaronsw.com/ John</description></item><item><title>Git学习 提高</title><link>https://shuzang.github.io/2018/04/git-learning-improvement/</link><pubDate>Sun, 22 Apr 2018 10:21:16 +0800</pubDate><guid>https://shuzang.github.io/2018/04/git-learning-improvement/</guid><description>上一篇我们学习了Git的基本知识，包括仓库创建，提交、修改、推送、回退等等操作，本篇学习一些高级的功能。 1. 分支管理 每个仓库都可能有几条不同的</description></item><item><title>Git学习 入门</title><link>https://shuzang.github.io/2018/04/getting-started-with-git/</link><pubDate>Fri, 20 Apr 2018 19:06:20 +0800</pubDate><guid>https://shuzang.github.io/2018/04/getting-started-with-git/</guid><description>版本控制系统的使用在代码开发中必不可少，本系列记录学习Git和Github的历史。 1. 版本控制系统 生活中可能会出现两种情况 写的文章不断进行修改</description></item><item><title>编程语言选择</title><link>https://shuzang.github.io/2018/04/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E9%80%89%E6%8B%A9/</link><pubDate>Wed, 18 Apr 2018 20:06:18 +0800</pubDate><guid>https://shuzang.github.io/2018/04/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E9%80%89%E6%8B%A9/</guid><description>从大学期间教授的C、C++、Java，到自己接触的python、js，以及耳熟能详的PHP、C#、Ruby，甚至其它众多听过的没听过的语言。</description></item><item><title>Hexo 搭建个人博客</title><link>https://shuzang.github.io/2018/04/using-hexo-build-persoanl-blog/</link><pubDate>Tue, 17 Apr 2018 20:30:00 +0800</pubDate><guid>https://shuzang.github.io/2018/04/using-hexo-build-persoanl-blog/</guid><description>Hexo 是一款快速、简洁且高效的静态博客框架，使用Markdown渲染引擎解析文章，拥有着丰富的主题社区 ，可以帮助我们快速建立自己的博客，正在成为</description></item><item><title>Android系统移植</title><link>https://shuzang.github.io/2018/04/android-system-migration/</link><pubDate>Wed, 11 Apr 2018 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2018/04/android-system-migration/</guid><description>采用Android6.0（棉花糖），编译环境为Ubuntu14.04和opoenjdk-7-jdk 1. 获取源码 首先参阅Android网站sou</description></item><item><title>Debian系统的移植</title><link>https://shuzang.github.io/2018/04/migration-of-debian-system/</link><pubDate>Wed, 11 Apr 2018 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2018/04/migration-of-debian-system/</guid><description>Debian 系统的移植总分四部分：u-boot的编译与烧录，Linux内核的编译与烧录，Debian 基本根文件系统的制作、配置与烧录，开发板设置。 1. u</description></item><item><title>内核配置</title><link>https://shuzang.github.io/2018/04/linux-lernel-configuration/</link><pubDate>Wed, 11 Apr 2018 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2018/04/linux-lernel-configuration/</guid><description>内核配置的目的主要是裁剪掉不必要的文件和目录，获得一个最适用的操作系统。可通过执行下面的命令进入配置窗口 1 $ make menuconfig 执行完毕后显示一个基于文本的</description></item><item><title>移植相关知识</title><link>https://shuzang.github.io/2018/04/migration-related-knowledge/</link><pubDate>Wed, 11 Apr 2018 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2018/04/migration-related-knowledge/</guid><description>1. Linux 操作系统组成 Linux 操作系统由 Linux 内核、shell 命令解释器和应用程序3部分构成 1.1 shell Linux的内核不能直接接受来自终端的用户命令，shell 为</description></item></channel></rss>