<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Go实战 - 标签 - Shuzang's Blog</title><link>https://shuzang.github.io/tags/go%E5%AE%9E%E6%88%98/</link><description>Go实战 - 标签 - Shuzang's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>lylw1996@qq.com (shuzang)</managingEditor><webMaster>lylw1996@qq.com (shuzang)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 08 Oct 2020 19:35:00 +0800</lastBuildDate><atom:link href="https://shuzang.github.io/tags/go%E5%AE%9E%E6%88%98/" rel="self" type="application/rss+xml"/><item><title>Go实现2048小游戏</title><link>https://shuzang.github.io/a-cli-implement-of-2048-game-using-go/</link><pubDate>Thu, 08 Oct 2020 19:35:00 +0800</pubDate><author>作者</author><guid>https://shuzang.github.io/a-cli-implement-of-2048-game-using-go/</guid><description><![CDATA[<p>Go 实现一个命令行界面的 2048 游戏，仅涉及 Git 和 Go，用来熟悉基本语言特性。原型项目来自 <a href="https://github.com/chhabraamit/2048">https://github.com/chhabraamit/2048</a></p>
<h2 id="1-环境准备">1. 环境准备</h2>
<p>Win10 环境，go 1.14.3，编辑器为 VScode，使用 Github 管理代码。</p>
<p>首先在网页端建立 Github 仓库，选择 MIT 协议，然后克隆仓库到本地</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ git clone https://github.com/shuzang/2048.git
</code></pre></td></tr></table>
</div>
</div><p>在项目根目录创建 <code>main.go</code> 文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Getting started!&#34;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>初始化项目</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ go mod init github.com/shuzang
</code></pre></td></tr></table>
</div>
</div><h2 id="2-显示游戏面板">2. 显示游戏面板</h2>
<p>2048 的游戏界面是一个 4×4 的网格，我们使用一个二维切片作为底层结构存储数字，然后按照网格的形式输出到终端，数字随机生成。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// game/board.go
</span><span class="c1"></span><span class="kn">package</span> <span class="nx">game</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;math/rand&#34;</span>
	<span class="s">&#34;time&#34;</span>
<span class="p">)</span>

<span class="c1">// 游戏界面规格
</span><span class="c1"></span><span class="kd">const</span> <span class="nx">_rows</span><span class="p">,</span> <span class="nx">_cols</span> <span class="p">=</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span>

<span class="kd">type</span> <span class="nx">Board</span> <span class="kd">interface</span> <span class="p">{</span>
	<span class="nf">Display</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">board</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">board</span> <span class="p">[][]</span><span class="kt">int</span>
<span class="p">}</span>

<span class="cm">/* 显示 4×4 网格形式的游戏界面
</span><span class="cm">*/</span>
<span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">Display</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">b</span><span class="p">.</span><span class="nx">board</span> <span class="p">=</span> <span class="nf">generate</span><span class="p">()</span>
	<span class="nf">printHorizontalLine</span><span class="p">()</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nf">printVerticalLine</span><span class="p">()</span>
		<span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">_cols</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
            <span class="c1">// 每个数字占7个位置，如果为0，输出空字符
</span><span class="c1"></span>			<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
				<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%7s&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span><span class="c1">// 数字不为0，使其位于中间，方法是使其占4位，然后接着输出3个空字符
</span><span class="c1"></span>				<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%4d%3s&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">],</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
			<span class="p">}</span>
			<span class="nf">printVerticalLine</span><span class="p">()</span>
		<span class="p">}</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">()</span>
		<span class="nf">printHorizontalLine</span><span class="p">()</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 输出横线，4*7+5 = 33
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">printHorizontal</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">33</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;-&#34;</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">()</span>
<span class="p">}</span>

<span class="c1">// 输出竖线
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">printVertical</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;|&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 生成所需的所有随机数
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">generate</span><span class="p">()</span> <span class="p">[][]</span><span class="kt">int</span> <span class="p">{</span>
	<span class="c1">// Store all available numbers from 2 to 2048
</span><span class="c1"></span>	<span class="nx">nums</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
	<span class="nx">nums</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">nums</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">2</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;=</span> <span class="mi">2048</span><span class="p">;</span> <span class="nx">i</span> <span class="o">*=</span> <span class="mi">2</span> <span class="p">{</span>
		<span class="nx">nums</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">nums</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="c1">// generate random numbers for init board
</span><span class="c1"></span>	<span class="nx">rand</span><span class="p">.</span><span class="nf">Seed</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">UnixNano</span><span class="p">())</span>
    <span class="nx">matrix</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">_rows</span><span class="p">)</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">matrix</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">_cols</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">_cols</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
			<span class="nx">matrix</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="p">=</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">rand</span><span class="p">.</span><span class="nf">Int</span><span class="p">()</span><span class="o">%</span><span class="nb">len</span><span class="p">(</span><span class="nx">nums</span><span class="p">)]</span>
		<span class="p">}</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="nx">matrix</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">NewBoard</span><span class="p">()</span> <span class="o">*</span><span class="nx">Board</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">board</span><span class="p">{}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>然后修改 main.go 如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// main.go
</span><span class="c1"></span><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;fmt&#34;</span>

	<span class="s">&#34;github.com/shuzang/2048/game&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Getting started!&#34;</span><span class="p">)</span>
	<span class="nx">b</span> <span class="o">:=</span> <span class="nx">game</span><span class="p">.</span><span class="nf">NewBoard</span><span class="p">()</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">Display</span><span class="p">()</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>运行 <code>go run main.go</code> 可以看到一个临时的游戏面板。</p>
<h2 id="3-添加元素">3. 添加元素</h2>
<p>上面的程序随机生成了 16 个数字填充游戏面板，但这只是初始测试，正式游戏的做法是：初始时随机填充两个数字，然后每个键盘输入新增一个数字。这里还要注意每一步生成的数字有两种选择，2 或 4，我们可以控制这两个数字生成的概率。</p>
<p>所以添加新元素被抽象为一个独立的函数，如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// game/board.go
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">board</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">board</span>  <span class="p">[][]</span><span class="kt">int</span>
	<span class="nx">nx</span><span class="p">,</span> <span class="nx">ny</span> <span class="kt">int</span>
<span class="p">}</span>

<span class="c1">// 被折叠的代码...
</span><span class="c1"></span>
<span class="c1">// 随机填充一个新数字
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">AddElement</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">rand</span><span class="p">.</span><span class="nf">Seed</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">UnixNano</span><span class="p">())</span>
	<span class="c1">// 随机选择一个空白位置
</span><span class="c1"></span>	<span class="nx">index</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([][</span><span class="mi">2</span><span class="p">]</span><span class="kt">int</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">_cols</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
			<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
				<span class="nx">index</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">index</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="kt">int</span><span class="p">{</span><span class="nx">i</span><span class="p">,</span> <span class="nx">j</span><span class="p">})</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="nx">next</span> <span class="o">:=</span> <span class="nx">rand</span><span class="p">.</span><span class="nf">Int</span><span class="p">()</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="nx">index</span><span class="p">)</span>
	<span class="nx">nx</span><span class="p">,</span> <span class="nx">ny</span> <span class="o">:=</span> <span class="nx">index</span><span class="p">[</span><span class="nx">next</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="nx">index</span><span class="p">[</span><span class="nx">next</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>
    
	<span class="c1">// 按概率选择数字 2 和 4
</span><span class="c1"></span>	<span class="kd">var</span> <span class="nx">number</span> <span class="kt">int</span>
	<span class="k">if</span> <span class="nx">rand</span><span class="p">.</span><span class="nf">Int</span><span class="p">()</span><span class="o">%</span><span class="mi">100</span> <span class="p">&lt;</span> <span class="mi">80</span> <span class="p">{</span>
		<span class="nx">number</span> <span class="p">=</span> <span class="mi">2</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="nx">number</span> <span class="p">=</span> <span class="mi">4</span>
	<span class="p">}</span>
	<span class="c1">// 将数字填充到选择的位置
</span><span class="c1"></span>    <span class="nx">b</span><span class="p">.</span><span class="nx">nx</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">ny</span> <span class="p">=</span> <span class="nx">nx</span><span class="p">,</span> <span class="nx">ny</span>
	<span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">nx</span><span class="p">][</span><span class="nx">ny</span><span class="p">]</span> <span class="p">=</span> <span class="nx">number</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">NewBoard</span><span class="p">()</span> <span class="o">*</span><span class="nx">board</span> <span class="p">{</span>
	<span class="nx">matrix</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">_rows</span><span class="p">)</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">matrix</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">_cols</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="o">&amp;</span><span class="nx">board</span><span class="p">{</span><span class="nx">board</span><span class="p">:</span> <span class="nx">matrix</span><span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>board 结构体新增了 nx,ny 两个字段，是为了标记新添加的元素在游戏面板中的位置，我们需要将新元素以不同的颜色表示，这里用到了 fatih/color 包。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ go get -v github.com/gatih/color
</code></pre></td></tr></table>
</div>
</div><p>导入该包后修改显示函数如下，用不同的颜色输出新添加的元素。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// game/board.go
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">Display</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">c</span> <span class="o">:=</span> <span class="nx">color</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">color</span><span class="p">.</span><span class="nx">FgCyan</span><span class="p">,</span> <span class="nx">color</span><span class="p">.</span><span class="nx">Bold</span><span class="p">)</span>
	<span class="nf">printHorizontalLine</span><span class="p">()</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nf">printVerticalLine</span><span class="p">()</span>
		<span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">_cols</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
			<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
				<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%7s&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
			<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">i</span> <span class="o">==</span> <span class="nx">b</span><span class="p">.</span><span class="nx">nx</span> <span class="o">&amp;&amp;</span> <span class="nx">j</span> <span class="o">==</span> <span class="nx">b</span><span class="p">.</span><span class="nx">ny</span> <span class="p">{</span>
				<span class="nx">c</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%4d%3s&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">],</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
				<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%4d%3s&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">],</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
			<span class="p">}</span>
			<span class="nf">printVerticalLine</span><span class="p">()</span>
		<span class="p">}</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">()</span>
		<span class="nf">printHorizontalLine</span><span class="p">()</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>相应的，主函数修改如下，添加 10 个元素并输出</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// main.go
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Getting started!&#34;</span><span class="p">)</span>
    <span class="nx">b</span> <span class="o">:=</span> <span class="nx">game</span><span class="p">.</span><span class="nf">NewBoard</span><span class="p">()</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">b</span><span class="p">.</span><span class="nf">Display</span><span class="p">()</span>
		<span class="nx">b</span><span class="p">.</span><span class="nf">AddElement</span><span class="p">()</span>		
	<span class="p">}</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Game over!&#34;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="4-先清屏后显示">4. 先清屏后显示</h2>
<p>上面的程序会把每一步的面板都输出到终端，我们应当添加的一个功能是，每一步只输出当前的游戏面板。该功能通过清屏函数实现，注意，清屏的实现在不同操作系统可能会有区别，下面的实现适用于 Windows 系统。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// game/board.go
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">Display</span><span class="p">()</span> <span class="p">{</span>
	<span class="c1">// clear screen, but only works on windows
</span><span class="c1"></span>	<span class="nx">cmd</span> <span class="o">:=</span> <span class="nx">exec</span><span class="p">.</span><span class="nf">Command</span><span class="p">(</span><span class="s">&#34;cmd&#34;</span><span class="p">,</span> <span class="s">&#34;/c&#34;</span><span class="p">,</span> <span class="s">&#34;cls&#34;</span><span class="p">)</span>
	<span class="nx">cmd</span><span class="p">.</span><span class="nx">Stdout</span> <span class="p">=</span> <span class="nx">os</span><span class="p">.</span><span class="nx">Stdout</span>
	<span class="nx">cmd</span><span class="p">.</span><span class="nf">Run</span><span class="p">()</span>
	<span class="nx">c</span> <span class="o">:=</span> <span class="nx">color</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">color</span><span class="p">.</span><span class="nx">FgCyan</span><span class="p">,</span> <span class="nx">color</span><span class="p">.</span><span class="nx">Bold</span><span class="p">)</span>
	<span class="nf">printHorizontalLine</span><span class="p">()</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nf">printVerticalLine</span><span class="p">()</span>
		<span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">_cols</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
			<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
				<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%7s&#34;</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
			<span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="nx">i</span> <span class="o">==</span> <span class="nx">b</span><span class="p">.</span><span class="nx">nx</span> <span class="o">&amp;&amp;</span> <span class="nx">j</span> <span class="o">==</span> <span class="nx">b</span><span class="p">.</span><span class="nx">ny</span> <span class="p">{</span>
				<span class="nx">c</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%4d%3s&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">],</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
			<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
				<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;%4d%3s&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">],</span> <span class="s">&#34;&#34;</span><span class="p">)</span>
			<span class="p">}</span>

			<span class="nf">printVerticalLine</span><span class="p">()</span>
		<span class="p">}</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">()</span>
		<span class="nf">printHorizontalLine</span><span class="p">()</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="5-获取键盘输入">5. 获取键盘输入</h2>
<p>游戏的每一步操作肯定都是根据键盘的输入来的，可以使用 {W, A, S, D} 和 方向键，如果使用 fmt 包中的输入函数，那么每次输入后都需要手动按下回车。为了不必每次输入字符后都敲一下回车键，我们使用 eiannone/keyboard 包</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ go get -v github.com/eiannone/keyboard
</code></pre></td></tr></table>
</div>
</div><p>将键盘输入对应的几个操作定义为几个常量，然后调用 keyboard 包中的 GetKeyStrokes() 函数接收键盘输入，返回对应的常量，最后在 TakeInput() 函数中根据不同常量交给对应的操作函数处理。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// game/board.go
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Key</span> <span class="kt">int</span>

<span class="c1">// 几个操作常量，向四个方向移动、退出和错误按键
</span><span class="c1"></span><span class="kd">const</span> <span class="p">(</span>
	<span class="nx">UP</span> <span class="nx">Key</span> <span class="p">=</span> <span class="kc">iota</span>
	<span class="nx">DOWN</span>
	<span class="nx">LEFT</span>
	<span class="nx">RIGHT</span>
	<span class="nx">QUIT</span>
	<span class="nx">ERROR_KEY</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">TakeInput</span><span class="p">()</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="nx">key</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">GetKeyStrokes</span><span class="p">()</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
	<span class="p">}</span>
	<span class="k">if</span> <span class="nx">key</span> <span class="o">==</span> <span class="nx">ERROR_KEY</span> <span class="p">{</span>
		<span class="nx">b</span><span class="p">.</span><span class="nf">TakeInput</span><span class="p">()</span>
	<span class="p">}</span>
	<span class="k">switch</span> <span class="nx">key</span> <span class="p">{</span>
	<span class="k">case</span> <span class="nx">UP</span><span class="p">:</span>
		<span class="nx">b</span><span class="p">.</span><span class="nf">moveUp</span><span class="p">()</span>
	<span class="k">case</span> <span class="nx">DOWN</span><span class="p">:</span>
		<span class="nx">b</span><span class="p">.</span><span class="nf">moveDown</span><span class="p">()</span>
	<span class="k">case</span> <span class="nx">LEFT</span><span class="p">:</span>
		<span class="nx">b</span><span class="p">.</span><span class="nf">moveLeft</span><span class="p">()</span>
	<span class="k">case</span> <span class="nx">RIGHT</span><span class="p">:</span>
		<span class="nx">b</span><span class="p">.</span><span class="nf">moveRight</span><span class="p">()</span>
	<span class="k">case</span> <span class="nx">QUIT</span><span class="p">:</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;You press ESC, game exit!&#34;</span><span class="p">)</span>
		<span class="k">return</span> <span class="kc">false</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="kc">true</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">GetKeyStrokes</span><span class="p">()</span> <span class="p">(</span><span class="nx">Key</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">char</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">keyboard</span><span class="p">.</span><span class="nf">GetSingleKey</span><span class="p">()</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">ERROR_KEY</span><span class="p">,</span> <span class="nx">err</span>
	<span class="p">}</span>
	<span class="c1">//fmt.Printf(&#34;You pressed: %c, key %X\r\n&#34;, char, key)
</span><span class="c1"></span>	<span class="k">if</span> <span class="nb">int</span><span class="p">(</span><span class="nx">char</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
		<span class="k">switch</span> <span class="nx">key</span> <span class="p">{</span>
		<span class="k">case</span> <span class="nx">keyboard</span><span class="p">.</span><span class="nx">KeyArrowUp</span><span class="p">:</span>
			<span class="k">return</span> <span class="nx">UP</span><span class="p">,</span> <span class="kc">nil</span>
		<span class="k">case</span> <span class="nx">keyboard</span><span class="p">.</span><span class="nx">KeyArrowDown</span><span class="p">:</span>
			<span class="k">return</span> <span class="nx">DOWN</span><span class="p">,</span> <span class="kc">nil</span>
		<span class="k">case</span> <span class="nx">keyboard</span><span class="p">.</span><span class="nx">KeyArrowLeft</span><span class="p">:</span>
			<span class="k">return</span> <span class="nx">LEFT</span><span class="p">,</span> <span class="kc">nil</span>
		<span class="k">case</span> <span class="nx">keyboard</span><span class="p">.</span><span class="nx">KeyArrowRight</span><span class="p">:</span>
			<span class="k">return</span> <span class="nx">RIGHT</span><span class="p">,</span> <span class="kc">nil</span>
		<span class="k">case</span> <span class="nx">keyboard</span><span class="p">.</span><span class="nx">KeyEsc</span><span class="p">:</span>
			<span class="k">return</span> <span class="nx">QUIT</span><span class="p">,</span> <span class="kc">nil</span>
		<span class="k">default</span><span class="p">:</span>
			<span class="k">return</span> <span class="nx">ERROR_KEY</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;Invalid key, please press again!&#34;</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
		<span class="k">switch</span> <span class="nx">char</span> <span class="p">{</span>
		<span class="k">case</span> <span class="mi">119</span><span class="p">:</span>
			<span class="k">return</span> <span class="nx">UP</span><span class="p">,</span> <span class="kc">nil</span>
		<span class="k">case</span> <span class="mi">97</span><span class="p">:</span>
			<span class="k">return</span> <span class="nx">LEFT</span><span class="p">,</span> <span class="kc">nil</span>
		<span class="k">case</span> <span class="mi">115</span><span class="p">:</span>
			<span class="k">return</span> <span class="nx">DOWN</span><span class="p">,</span> <span class="kc">nil</span>
		<span class="k">case</span> <span class="mi">100</span><span class="p">:</span>
			<span class="k">return</span> <span class="nx">RIGHT</span><span class="p">,</span> <span class="kc">nil</span>
		<span class="k">default</span><span class="p">:</span>
			<span class="k">return</span> <span class="nx">ERROR_KEY</span><span class="p">,</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;Invalid key, please press again!&#34;</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>游戏退出有两种情况，一个是上面程序中定义的 QUIT 操作，用于游戏过程中主动输入 ESC 按键退出，另一个是游戏面板 16 个数字已满，Game over，通过添加以下函数实现</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// game/board.go
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">IsOver</span><span class="p">()</span> <span class="kt">bool</span> <span class="p">{</span>
	<span class="nx">blank</span> <span class="o">:=</span> <span class="mi">0</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">_cols</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
			<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span> <span class="p">{</span>
				<span class="nx">blank</span><span class="o">++</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">blank</span> <span class="o">==</span> <span class="mi">0</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>最后是程序开始的逻辑，即输入任意键开始。这部分逻辑在 main 函数中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// main.go
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Use {W A S D} or Arrow keys to move the board&#34;</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Press and key to start\n&#34;</span><span class="p">)</span>
	<span class="nx">_</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">keyboard</span><span class="p">.</span><span class="nf">GetSingleKey</span><span class="p">()</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalln</span><span class="p">(</span><span class="s">&#34;error while taking input to start the game&#34;</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">b</span> <span class="o">:=</span> <span class="nx">game</span><span class="p">.</span><span class="nf">NewBoard</span><span class="p">()</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">AddElement</span><span class="p">()</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">AddElement</span><span class="p">()</span>
	<span class="k">for</span> <span class="kc">true</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nf">IsOver</span><span class="p">()</span> <span class="p">{</span>
			<span class="k">break</span>
		<span class="p">}</span>
		<span class="nx">b</span><span class="p">.</span><span class="nf">AddElement</span><span class="p">()</span>
		<span class="nx">b</span><span class="p">.</span><span class="nf">Display</span><span class="p">()</span>
		<span class="nx">res</span> <span class="o">:=</span> <span class="nx">b</span><span class="p">.</span><span class="nf">TakeInput</span><span class="p">()</span>
		<span class="k">if</span> <span class="p">!</span><span class="nx">res</span> <span class="p">{</span>
			<span class="k">return</span>
		<span class="p">}</span>

	<span class="p">}</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;game over&#34;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="6-数字移动合并">6. 数字移动合并</h2>
<p>每个键盘输入都对应一个操作函数，四个方向的数字移动和合并是游戏的核心逻辑。如下，向左移动数字和合并单独实现，向右、向上和向下都能通过矩阵旋转转换为向左移动和合并的问题。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// game/board.go
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">moveLeft</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">old</span> <span class="o">:=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
		<span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nf">moveRow</span><span class="p">(</span><span class="nx">old</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">moveRight</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">Reverse</span><span class="p">()</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">moveLeft</span><span class="p">()</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">Reverse</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">moveUp</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">leftRotate90</span><span class="p">()</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">moveLeft</span><span class="p">()</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">rightRotate90</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">moveDown</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">rightRotate90</span><span class="p">()</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">moveLeft</span><span class="p">()</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">leftRotate90</span><span class="p">()</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">rightRotate90</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">matrix</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">_rows</span><span class="p">)</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">matrix</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">_cols</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">_cols</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
			<span class="nx">matrix</span><span class="p">[</span><span class="nx">j</span><span class="p">][</span><span class="nx">_cols</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="nx">b</span><span class="p">.</span><span class="nx">board</span> <span class="p">=</span> <span class="nx">matrix</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">leftRotate90</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">matrix</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([][]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">_rows</span><span class="p">)</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">matrix</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">int</span><span class="p">,</span> <span class="nx">_cols</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">_cols</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
			<span class="nx">matrix</span><span class="p">[</span><span class="nx">_cols</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="nx">j</span><span class="p">][</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="nx">b</span><span class="p">.</span><span class="nx">board</span> <span class="p">=</span> <span class="nx">matrix</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">Reverse</span><span class="p">()</span> <span class="p">{</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">for</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">k</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">_cols</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">k</span><span class="p">;</span> <span class="nx">j</span><span class="p">,</span> <span class="nx">k</span> <span class="p">=</span> <span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="nx">k</span><span class="o">-</span><span class="mi">1</span> <span class="p">{</span>
			<span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">],</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">k</span><span class="p">]</span> <span class="p">=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">k</span><span class="p">],</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">moveRow</span><span class="p">(</span><span class="nx">row</span> <span class="p">[]</span><span class="kt">int</span><span class="p">)</span> <span class="p">[]</span><span class="kt">int</span> <span class="p">{</span>
	<span class="nx">index</span> <span class="o">:=</span> <span class="mi">0</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">row</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nx">row</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
			<span class="nx">row</span><span class="p">[</span><span class="nx">index</span><span class="p">],</span> <span class="nx">row</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">row</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">row</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span>
			<span class="nx">index</span><span class="o">++</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">row</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nx">row</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="nx">row</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="p">{</span>
			<span class="nx">row</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">+=</span> <span class="nx">row</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span>
			<span class="nx">row</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="p">=</span> <span class="mi">0</span>
			<span class="nx">i</span><span class="o">++</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="nx">index</span> <span class="p">=</span> <span class="mi">0</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">row</span><span class="p">);</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nx">row</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
			<span class="nx">row</span><span class="p">[</span><span class="nx">index</span><span class="p">],</span> <span class="nx">row</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="p">=</span> <span class="nx">row</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span> <span class="nx">row</span><span class="p">[</span><span class="nx">index</span><span class="p">]</span>
			<span class="nx">index</span><span class="o">++</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">row</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>由于这部分逻辑比较复杂，需要测试一下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// game/board_test.go
</span><span class="c1"></span><span class="kn">package</span> <span class="nx">game</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;reflect&#34;</span>
	<span class="s">&#34;testing&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">TestMoveRow</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">tests</span> <span class="o">:=</span> <span class="p">[]</span><span class="kd">struct</span> <span class="p">{</span>
		<span class="nx">name</span>  <span class="kt">string</span>
		<span class="nx">input</span> <span class="p">[]</span><span class="kt">int</span>
		<span class="nx">want</span>  <span class="p">[]</span><span class="kt">int</span>
	<span class="p">}{</span>
		<span class="p">{</span>
			<span class="nx">name</span><span class="p">:</span>  <span class="s">&#34;one&#34;</span><span class="p">,</span>
			<span class="nx">input</span><span class="p">:</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
			<span class="nx">want</span><span class="p">:</span>  <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
		<span class="p">},</span>
		<span class="p">{</span>
			<span class="nx">name</span><span class="p">:</span>  <span class="s">&#34;two&#34;</span><span class="p">,</span>
			<span class="nx">input</span><span class="p">:</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">},</span>
			<span class="nx">want</span><span class="p">:</span>  <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
		<span class="p">},</span>
		<span class="p">{</span>
			<span class="nx">name</span><span class="p">:</span>  <span class="s">&#34;three&#34;</span><span class="p">,</span>
			<span class="nx">input</span><span class="p">:</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">},</span>
			<span class="nx">want</span><span class="p">:</span>  <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
		<span class="p">},</span>
		<span class="p">{</span>
			<span class="nx">name</span><span class="p">:</span>  <span class="s">&#34;four&#34;</span><span class="p">,</span>
			<span class="nx">input</span><span class="p">:</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">},</span>
			<span class="nx">want</span><span class="p">:</span>  <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
		<span class="p">},</span>
		<span class="p">{</span>
			<span class="nx">name</span><span class="p">:</span>  <span class="s">&#34;five&#34;</span><span class="p">,</span>
			<span class="nx">input</span><span class="p">:</span> <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">},</span>
			<span class="nx">want</span><span class="p">:</span>  <span class="p">[]</span><span class="kt">int</span><span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">},</span>
		<span class="p">},</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">tt</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">tests</span> <span class="p">{</span>
		<span class="nx">t</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">tt</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">if</span> <span class="nx">got</span> <span class="o">:=</span> <span class="nf">moveRow</span><span class="p">(</span><span class="nx">tt</span><span class="p">.</span><span class="nx">input</span><span class="p">);</span> <span class="p">!</span><span class="nx">reflect</span><span class="p">.</span><span class="nf">DeepEqual</span><span class="p">(</span><span class="nx">got</span><span class="p">,</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">want</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;moveRow() = %v, want %v&#34;</span><span class="p">,</span> <span class="nx">got</span><span class="p">,</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">want</span><span class="p">)</span>
			<span class="p">}</span>
		<span class="p">})</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">TestLeftRotate90</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">type</span> <span class="nx">fields</span> <span class="kd">struct</span> <span class="p">{</span>
		<span class="nx">matrix</span> <span class="p">[][]</span><span class="kt">int</span>
	<span class="p">}</span>

	<span class="nx">tests</span> <span class="o">:=</span> <span class="p">[]</span><span class="kd">struct</span> <span class="p">{</span>
		<span class="nx">name</span>   <span class="kt">string</span>
		<span class="nx">fields</span> <span class="nx">fields</span>
		<span class="nx">want</span>   <span class="p">[][]</span><span class="kt">int</span>
	<span class="p">}{</span>
		<span class="p">{</span>
			<span class="nx">name</span><span class="p">:</span> <span class="s">&#34;one&#34;</span><span class="p">,</span>
			<span class="nx">fields</span><span class="p">:</span> <span class="nx">fields</span><span class="p">{</span>
				<span class="nx">matrix</span><span class="p">:</span> <span class="p">[][]</span><span class="kt">int</span><span class="p">{</span>
					<span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="p">},</span>
					<span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">10</span><span class="p">},</span>
					<span class="p">{</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">11</span><span class="p">},</span>
					<span class="p">{</span><span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">111</span><span class="p">},</span>
				<span class="p">},</span>
			<span class="p">},</span>
			<span class="nx">want</span><span class="p">:</span> <span class="p">[][]</span><span class="kt">int</span><span class="p">{</span>
				<span class="p">{</span><span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">111</span><span class="p">},</span>
				<span class="p">{</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">18</span><span class="p">},</span>
				<span class="p">{</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">17</span><span class="p">},</span>
				<span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">16</span><span class="p">},</span>
			<span class="p">},</span>
		<span class="p">},</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">tt</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">tests</span> <span class="p">{</span>
		<span class="nx">t</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">tt</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">b</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">board</span><span class="p">{</span><span class="nx">board</span><span class="p">:</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">fields</span><span class="p">.</span><span class="nx">matrix</span><span class="p">}</span>
			<span class="nx">b</span><span class="p">.</span><span class="nf">leftRotate90</span><span class="p">()</span>
			<span class="k">if</span> <span class="p">!</span><span class="nx">reflect</span><span class="p">.</span><span class="nf">DeepEqual</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">,</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">want</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;b.leftRotate90() = %v, want %v&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">,</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">want</span><span class="p">)</span>
			<span class="p">}</span>
		<span class="p">})</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">TestRightRotate90</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">type</span> <span class="nx">fields</span> <span class="kd">struct</span> <span class="p">{</span>
		<span class="nx">matrix</span> <span class="p">[][]</span><span class="kt">int</span>
	<span class="p">}</span>

	<span class="nx">tests</span> <span class="o">:=</span> <span class="p">[]</span><span class="kd">struct</span> <span class="p">{</span>
		<span class="nx">name</span>   <span class="kt">string</span>
		<span class="nx">fields</span> <span class="nx">fields</span>
		<span class="nx">want</span>   <span class="p">[][]</span><span class="kt">int</span>
	<span class="p">}{</span>
		<span class="p">{</span>
			<span class="nx">name</span><span class="p">:</span> <span class="s">&#34;one&#34;</span><span class="p">,</span>
			<span class="nx">fields</span><span class="p">:</span> <span class="nx">fields</span><span class="p">{</span>
				<span class="nx">matrix</span><span class="p">:</span> <span class="p">[][]</span><span class="kt">int</span><span class="p">{</span>
					<span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">9</span><span class="p">},</span>
					<span class="p">{</span><span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">10</span><span class="p">},</span>
					<span class="p">{</span><span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">11</span><span class="p">},</span>
					<span class="p">{</span><span class="mi">16</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">18</span><span class="p">,</span> <span class="mi">111</span><span class="p">},</span>
				<span class="p">},</span>
			<span class="p">},</span>
			<span class="nx">want</span><span class="p">:</span> <span class="p">[][]</span><span class="kt">int</span><span class="p">{</span>
				<span class="p">{</span><span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">1</span><span class="p">},</span>
				<span class="p">{</span><span class="mi">17</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">2</span><span class="p">},</span>
				<span class="p">{</span><span class="mi">18</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">3</span><span class="p">},</span>
				<span class="p">{</span><span class="mi">111</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">9</span><span class="p">},</span>
			<span class="p">},</span>
		<span class="p">},</span>
	<span class="p">}</span>
	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">tt</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">tests</span> <span class="p">{</span>
		<span class="nx">t</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="nx">tt</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span> <span class="kd">func</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">b</span> <span class="o">:=</span> <span class="o">&amp;</span><span class="nx">board</span><span class="p">{</span><span class="nx">board</span><span class="p">:</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">fields</span><span class="p">.</span><span class="nx">matrix</span><span class="p">}</span>
			<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nf">rightRotate90</span><span class="p">();</span> <span class="p">!</span><span class="nx">reflect</span><span class="p">.</span><span class="nf">DeepEqual</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">,</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">want</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">t</span><span class="p">.</span><span class="nf">Errorf</span><span class="p">(</span><span class="s">&#34;b.rightRotate90() = %v, want %v&#34;</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span><span class="p">,</span> <span class="nx">tt</span><span class="p">.</span><span class="nx">want</span><span class="p">)</span>
			<span class="p">}</span>
		<span class="p">})</span>
	<span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="7-分数计算">7. 分数计算</h2>
<p>游戏正常结束后显示当前最大分数和总分数，算是一个小功能。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">//game/board.go
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">b</span> <span class="o">*</span><span class="nx">board</span><span class="p">)</span> <span class="nf">CountScore</span><span class="p">()</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">total</span><span class="p">,</span> <span class="nx">max</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span>
	<span class="nx">matrix</span> <span class="o">:=</span> <span class="nx">b</span><span class="p">.</span><span class="nx">board</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="nx">_rows</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">for</span> <span class="nx">j</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="p">&lt;</span> <span class="nx">_cols</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span> <span class="p">{</span>
			<span class="nx">total</span> <span class="o">+=</span> <span class="nx">matrix</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span>
			<span class="nx">max</span> <span class="p">=</span> <span class="nf">maxInts</span><span class="p">(</span><span class="nx">max</span><span class="p">,</span> <span class="nx">matrix</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">])</span>
		<span class="p">}</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">max</span><span class="p">,</span> <span class="nx">total</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="nf">maxInts</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span> <span class="kt">int</span><span class="p">)</span> <span class="kt">int</span> <span class="p">{</span>
	<span class="k">if</span> <span class="nx">a</span> <span class="p">&gt;</span> <span class="nx">b</span> <span class="p">{</span>
		<span class="k">return</span> <span class="nx">a</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">b</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">//main.go
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Use {W A S D} or Arrow keys to move the board&#34;</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Press and key to start\n&#34;</span><span class="p">)</span>
	<span class="nx">_</span><span class="p">,</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">keyboard</span><span class="p">.</span><span class="nf">GetSingleKey</span><span class="p">()</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalln</span><span class="p">(</span><span class="s">&#34;error while taking input to start the game&#34;</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="nx">b</span> <span class="o">:=</span> <span class="nx">game</span><span class="p">.</span><span class="nf">NewBoard</span><span class="p">()</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">AddElement</span><span class="p">()</span>
	<span class="nx">b</span><span class="p">.</span><span class="nf">AddElement</span><span class="p">()</span>
	<span class="k">for</span> <span class="kc">true</span> <span class="p">{</span>
		<span class="k">if</span> <span class="nx">b</span><span class="p">.</span><span class="nf">IsOver</span><span class="p">()</span> <span class="p">{</span>
			<span class="k">break</span>
		<span class="p">}</span>
		<span class="nx">b</span><span class="p">.</span><span class="nf">AddElement</span><span class="p">()</span>
		<span class="nx">b</span><span class="p">.</span><span class="nf">Display</span><span class="p">()</span>
		<span class="nx">res</span> <span class="o">:=</span> <span class="nx">b</span><span class="p">.</span><span class="nf">TakeInput</span><span class="p">()</span>
		<span class="k">if</span> <span class="p">!</span><span class="nx">res</span> <span class="p">{</span>
			<span class="k">return</span>
		<span class="p">}</span>

	<span class="p">}</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;\n**********  game over  **********&#34;</span><span class="p">)</span>
	<span class="nx">max</span><span class="p">,</span> <span class="nx">total</span> <span class="o">:=</span> <span class="nx">b</span><span class="p">.</span><span class="nf">CountScore</span><span class="p">()</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Max Score: %v \n&#34;</span><span class="p">,</span> <span class="nx">max</span><span class="p">)</span>
	<span class="nx">fmt</span><span class="p">.</span><span class="nf">Printf</span><span class="p">(</span><span class="s">&#34;Total Score %v \n&#34;</span><span class="p">,</span> <span class="nx">total</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="8-代码重构">8. 代码重构</h2>
<p>所有功能完成后，对代码进行重构整理，包括</p>
<ol>
<li>将数字移动合并的相关代码移动到单独的 <code>move.go</code> 源文件中；</li>
<li>（可选）将输入和显示的相关函数都拆分到单独的源文件中；</li>
<li>为所有代码添加注释，并编写 README.md 文档；</li>
</ol>
<h2 id="9-结果与收获">9. 结果与收获</h2>
<p>完整的项目代码可以查看我的 <a href="https://github.com/shuzang/2048" target="_blank" rel="noopener noreffer">github 仓库</a>，与原项目有一些实现上的区别，并完善了一些功能。</p>
<p></p>
<p>编写该项目的收获有</p>
<ol>
<li>开源协议的选择；</li>
<li>对结构体和接口作用和意义的思考；</li>
<li>一个项目是从简单到复杂一步步建立的，不要想一步登天做的很完善；</li>
<li>方法中 (b *board) 和 (b board) 的区别；</li>
<li>一些重要的可定制的参数可以抽取作为为常量，比如面板规格，常量命名时前面最好加下划线 <code>_</code> 加以区分；</li>
<li>fmt.Printf 可以输出固定长度的空字符用于占位，fmt.Println() 可以用来换行；</li>
<li>随机数的生成方法，一个小技巧是使用数组存放待选择数字，然后随机生成数组长度范围内的数字作为索引进行选择；</li>
<li>结构体对象的生成可以使用工厂模式，比如  NewBoard 函数；</li>
<li>格式化输出的颜色控制（fatih/color包）；</li>
<li>清屏的实现方法；</li>
<li>无需回车不断读取键盘输入的实现方法（eiannone/keyboard包）;</li>
<li>矩阵旋转等大量关于二维切片的算法实现（PS：刷题还是有用的）；</li>
<li>测试用例的编写；</li>
<li>所有功能完成后，根据情况进行重构，比如代码的解耦等，然后完成添加注释、编写文档等工作；</li>
<li>Go 文档的编写与使用；</li>
<li>日志系统的使用。</li>
</ol>]]></description></item><item><title>基于Go语言开发在线论坛9-部署Go Web应用</title><link>https://shuzang.github.io/development-of-online-forum-based-on-golang-9-deploy-go-web-application/</link><pubDate>Sun, 07 Jun 2020 20:50:00 +0800</pubDate><author>作者</author><guid>https://shuzang.github.io/development-of-online-forum-based-on-golang-9-deploy-go-web-application/</guid><description><![CDATA[<p>部署 Go 应用相对简单，因为所有应用代码都被打包成一个二进制文件了（视图模板、静态资源和配置文件等非 Go 代码除外），并且不需要依赖其他库，不需要额外的运行时环境（比如 Java 需要再安装 JVM），也不需要部署额外的 HTTP 服务器。</p>
<p>对于在线论坛项目，包含了静态资源文件（CSS、JavaScript、图片），所以我们将在 Go Web 应用之前前置一个 Nginx 服务器处理静态资源请求，然后通过反向代理处理动态资源请求（指向 Go 处理器方法的请求），对于那些不包含静态资源和视图模板的纯 API 项目，通常只需要打包一份二进制文件部署到服务器即可，更加便捷。</p>
<blockquote>
<p>注：其实 Go 应用部署的最佳实践是基于 Docker，后续我们在部署专题中再介绍如何基于 Docker 将应用快速部署到远程云服务器。</p>
</blockquote>
<h2 id="1-构建应用">1. 构建应用</h2>
<p>首先，我们可以在本地项目根目录下通过如下命令将应用代码打包成二进制可执行文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">GOOS</span><span class="p">=</span><span class="nx">linux</span> <span class="nx">GOARCH</span><span class="p">=</span><span class="nx">amd64</span> <span class="k">go</span> <span class="nx">build</span>
</code></pre></td></tr></table>
</div>
</div><p>注意这里指定了 <code>GOOS</code> 和 <code>GOARCH</code> 选项进行交叉编译，因为我们是在 Win10 系统（<code>amd64</code>）中打包，并且目标二进制文件需要在 Linux 服务器（<code>linux</code>）执行。该命令执行成功后会在当前目录下生成和项目名称相同的二进制文件：</p>
<p></p>
<p>然后我们可以将代码提交到 Github 或者其他代码仓库。</p>
<h2 id="2-部署应用">2. 部署应用</h2>
<h3 id="21-部署代码">2.1 部署代码</h3>
<p>再登录服务器到部署目录下拉取代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">git clone https://github.com/nonfu/chitchat
</code></pre></td></tr></table>
</div>
</div><p>初次拉取使用 <code>git clone</code>，后续在 <code>chitchat</code> 目录下运行 <code>git pull</code> 即可。</p>
<p>然后我们进入 <code>chitchat</code> 目录，配置 <code>config.json</code> 进行服务端数据库配置（正式项目不要将 <code>config.json</code> 提交到代码仓库，以免安全风险和后续拉取代码覆盖），确保 <code>logs</code> 目录对 Web 用户具有写权限（比如配置权限为 <code>777</code>，或者所属用户与 Web 用户组一致）。</p>
<blockquote>
<p>注：当然我们这里部署代码的方式比较原始，对于多人协作的大型项目，可以借助持续集成工具（比如 Jenkins）进行自动化部署，并且由于项目比较简单，就不再演示单元测试、CI/CD 等其他 DevOps 工具的使用了。</p>
</blockquote>
<h3 id="22-数据库初始化">2.2 数据库初始化</h3>
<p>在服务端 MySqL 数据库中创建 <code>chitchat</code> 数据库，并初始化对应数据表。如果不了解如何安装和创建数据库，可以参考这篇教程：<a href="https://xueyuanjun.com/post/9749.html#bkmrk-%E5%88%9B%E5%BB%BA%E7%BA%BF%E4%B8%8A%E6%95%B0%E6%8D%AE%E5%BA%93" target="_blank" rel="noopener noreffer">将博客应用自动部署到线上服务器完整流程详解</a>。</p>
<h3 id="23-访问应用">2.3 访问应用</h3>
<p>完成以上工作后，我们就可以在 <code>chitchat</code> 项目目录下运行 <code>chitchat</code> 二进制文件启动应用了：</p>
<p></p>
<p>然后我们在本地 <code>hosts</code> 文件中自定义一个测试域名与服务器 IP 的映射：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">your-server-ip-address chitchat.test
</code></pre></td></tr></table>
</div>
</div><p>将上述 <code>your-server-ip-address</code> 替换成自己的远程服务器 IP 地址，然后我们就可以在浏览器中通过 <code>http://chitchat.test:8080</code> 访问应用了：</p>
<p></p>
<h2 id="3-通过-nginx-做反向代理">3. 通过 Nginx 做反向代理</h2>
<p>虽然上述方式可以正常运行，但是如果要高效处理静态资源文件并对其做缓存，可以借助 Nginx 作为反向代理服务器来完成，我们在 Nginx 虚拟主机配置目录 <code>/etc/nginx/sites-available</code> 中新增一个配置文件 <code>chitchat.conf</code>（以 Ubuntu 服务器为例）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-nginx" data-lang="nginx"><span class="k">server</span> <span class="p">{</span>
    <span class="kn">listen</span>      <span class="mi">80</span><span class="p">;</span> 
    <span class="kn">server_name</span> <span class="s">chitchat.test</span> <span class="s">www.chitchat.test</span><span class="p">;</span>
    
    <span class="c1"># 静态资源交由 Nginx 管理，并缓存一天
</span><span class="c1"></span>    <span class="kn">location</span> <span class="s">/static</span> <span class="p">{</span>
        <span class="kn">root</span>        <span class="s">/var/www/chitchat/public</span><span class="p">;</span>
        <span class="kn">expires</span>     <span class="s">1d</span><span class="p">;</span>
        <span class="kn">add_header</span>  <span class="s">Cache-Control</span> <span class="s">public</span><span class="p">;</span>
        <span class="kn">access_log</span>  <span class="no">off</span><span class="p">;</span>
        <span class="kn">try_files</span> <span class="nv">$uri</span> <span class="s">@goweb</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
        <span class="kn">try_files</span> <span class="s">/_not_exists_</span> <span class="s">@goweb</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="c1"># 动态请求默认通过 Go Web 服务器处理
</span><span class="c1"></span>    <span class="kn">location</span> <span class="s">@goweb</span> <span class="p">{</span>
        <span class="kn">proxy_set_header</span> <span class="s">Host</span> <span class="nv">$http_host</span><span class="p">;</span>
        <span class="kn">proxy_set_header</span> <span class="s">X-Real-IP</span> <span class="nv">$remote_addr</span><span class="p">;</span>
        <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
        <span class="kn">proxy_set_header</span> <span class="s">X-Scheme</span> <span class="nv">$scheme</span><span class="p">;</span>
        <span class="kn">proxy_redirect</span> <span class="no">off</span><span class="p">;</span>
        <span class="kn">proxy_pass</span> <span class="s">http://127.0.0.1:8080</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="kn">error_log</span> <span class="s">/var/log/nginx/chitchat_error.log</span><span class="p">;</span>
    <span class="kn">access_log</span> <span class="s">/var/log/nginx/chitchat_access.log</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>然后再启用该配置文件：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">ln -s /etc/nginx/sites-available/chitchat /etc/nginx/sites-enabled/chitchat
</code></pre></td></tr></table>
</div>
</div><p>重启 Nginx 服务：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">service nginx restart
</code></pre></td></tr></table>
</div>
</div><p>与此同时，我们可以把 <code>chitchat/config.json</code> 中的 <code>App</code> 配置项启动 IP 地址改为 <code>127.0.0.1</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="s2">&#34;App&#34;</span>: <span class="o">{</span>
    <span class="s2">&#34;Address&#34;</span>: <span class="s2">&#34;127.0.0.1:8080&#34;</span>,
    <span class="s2">&#34;Static&#34;</span>: <span class="s2">&#34;public&#34;</span>,
    <span class="s2">&#34;Log&#34;</span>: <span class="s2">&#34;logs&#34;</span>,
    <span class="s2">&#34;Locale&#34;</span>: <span class="s2">&#34;locales&#34;</span>,
    <span class="s2">&#34;Language&#34;</span>: <span class="s2">&#34;zh&#34;</span>
  <span class="o">}</span>,
</code></pre></td></tr></table>
</div>
</div><p>并再次重启这个 Go 应用，这样就只能通过 Nginx 访问应用，在浏览器中访问 <code>http://chitchat.test</code>：</p>
<p>而当你试图再通过 <code>http://chitchat.test:8080</code> 访问应用，则会报错：</p>
<p></p>
<p>我们可以测试下注册登录功能以及创建新群组功能：</p>
<p></p>
<h2 id="4-通过-supervisor-维护应用守护进程">4. 通过 Supervisor 维护应用守护进程</h2>
<p>看起来一切都 OK 了，但是目前这种模式下，用户退出后 Go Web 应用进程会关闭，这显然是不行的，而且如果 Go Web 应用进程因为其他异常挂掉，也无法自动重启，每次需要我们登录到服务器进行启动操作，这很不方便，也影响在线应用的稳定性，为此，我们需要借助第三方进程监控工具帮我们实现 Go Web 应用进程以后台守护进程的方式运行。常见的进程监控工具有 Supervisor、Upstart、systemd 等，由于我的服务器之前部署过 Supervisor，所以我就借助它来管理 Go Web 应用进程。</p>
<blockquote>
<p>注：对 Supervisor 安装配置不了解的同学，可以参考这篇教程 —— <a href="https://xueyuanjun.com/post/21566#bkmrk-%E9%83%A8%E7%BD%B2-horizon" target="_blank" rel="noopener noreffer">队列系统解决方案：Horizon</a>。</p>
</blockquote>
<p>首先创建对应的 Supervisor 配置文件 <code>/etc/supervisor/conf.d/chitchat.conf</code>，这里需要设置进程启动目录及命令、进程意外挂掉后是否自动重启、以及日志文件路径等：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">[program:chitchat]
process_name=%(program_name)s
directory=/var/www/chitchat
command=/var/www/chitchat/chitchat
autostart=true
autorestart=true
user=root
redirect_stderr=true
stdout_logfile=/var/www/chitchat/logs/chitchat.log
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>注意：我们需要进入 <code>chitchat</code> 所在目录执行启动命令，否则会找不到配置文件和其他资源路径，所以需要配置 <code>directory</code> 选项。</p>
</blockquote>
<p>然后关闭之前通过手动运行 <code>chitchat</code> 启动的 Go Web 服务器，再运行如下指令通过 Supervisor 启动并维护 Go Web 应用进程：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">supervisorctl reread
supervisorctl update
supervisorctl start chitchat
</code></pre></td></tr></table>
</div>
</div><p>你可以通过 <code>ps -ef | grep chitchat</code> 查看进程是否启动成功：</p>
<p></p>
<p>启动成功后，就可以在浏览器通过 <code>http://chitchat.test</code> 访问部署在远程服务器的在线论坛了：</p>
<p></p>
<p>并且无论是否退出远程服务器还是关闭 Go Web 应用进程，都不会影响在线论坛的访问，因为它是以守护进程的方式运行的，并且可以在关闭后自动重启。</p>]]></description></item><item><title>基于Go语言开发在线论坛8-消息、视图和日期时间本地化</title><link>https://shuzang.github.io/development-of-online-forum-based-on-golang-8-message-view-and-date-time-localizationsingleton-mode/</link><pubDate>Sun, 07 Jun 2020 20:30:00 +0800</pubDate><author>作者</author><guid>https://shuzang.github.io/development-of-online-forum-based-on-golang-8-message-view-and-date-time-localizationsingleton-mode/</guid><description><![CDATA[<p>由于之前所有页面和消息文本都是英文的，而我们开发的应用基本都是面向中文用户的，所以需要对项目进行本地化，因此本篇介绍如何在 Go Web 应用中进行国际化和本地化编程，由于项目比较简单，只介绍消息提示、视图模板和日期格式的本地化。</p>
<h2 id="1-消息本地化">1. 消息本地化</h2>
<h3 id="11-安装-go-i18n-扩展包">1.1 安装 go-i18n 扩展包</h3>
<p>首先来看消息提示文本，消息提示文本通常包括表单验证消息、应用异常消息、接口响应消息等后端接口返回的消息字符串片段，关于这一块的本地化，可以借助 Go 官方自带的 <code>golang.org/x/text</code> 扩展包实现，这个扩展包扩展性好，但是上手起来有点复杂，因此我们使用的是一款更容易上手的第三方扩展包 —— <a href="https://github.com/nicksnyder/go-i18n" target="_blank" rel="noopener noreffer">go-i18n</a>。</p>
<p>在使用这个扩展包之前，先在项目根目录下运行如下命令下载相关的扩展包：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">go get -u github.com/nicksnyder/go-i18n/v2/i18n
go get -u github.com/nicksnyder/go-i18n/v2/goi18n
</code></pre></td></tr></table>
</div>
</div><p>下载完成后，我们可以运行 <code>goi18n -help</code> 确保 <code>goi18n</code> 命令可执行</p>
<h3 id="12-通过-go-i18n-自动生成翻译文件">1.2 通过 go-i18n 自动生成翻译文件</h3>
<p>接下来，我们来编写消息文本模板用于生成翻译文件。在这个项目中，只有一个消息提示文本，那就是访问的群组不存在时返回的 <code>Cannot read thread</code>，因此，我们在项目根目录下创建 <code>messages.go</code>，并基于 <code>go-i18n</code> 提供的类型编写消息模板如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="s">&#34;github.com/nicksnyder/go-i18n/v2/i18n&#34;</span>

<span class="kd">var</span> <span class="nx">messages</span> <span class="p">=</span> <span class="p">[]</span><span class="nx">i18n</span><span class="p">.</span><span class="nx">Message</span><span class="p">{</span>
    <span class="p">{</span>
        <span class="nx">ID</span><span class="p">:</span> <span class="s">&#34;thread_not_found&#34;</span><span class="p">,</span>
        <span class="nx">Description</span><span class="p">:</span> <span class="s">&#34;Thread not exists in db&#34;</span><span class="p">,</span>
        <span class="nx">Other</span><span class="p">:</span> <span class="s">&#34;Cannot read thread&#34;</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>其中 <code>ID</code> 是消息文本的唯一标识，<code>Other</code> 则是对应的翻译字符串（默认是英文），然后基于 <code>goi18n</code> 命令自动生成翻译文件到 <code>locales</code> 目录（执行前先创建 <code>locales</code> 目录）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">mkdir</span> <span class="nx">locales</span>
<span class="nx">goi18n</span> <span class="nx">extract</span> <span class="o">-</span><span class="nx">outdir</span><span class="p">=</span><span class="nx">locales</span> <span class="o">-</span><span class="nx">format</span><span class="p">=</span><span class="nx">json</span> <span class="nx">messages</span><span class="p">.</span><span class="k">go</span>
</code></pre></td></tr></table>
</div>
</div><p>这样，就会在 <code>locales</code> 目录下生成可以被 <code>go-i18n</code> 包识别并解析的 JSON 格式翻译文件 <code>active.en.json</code>：</p>
<p></p>
<h3 id="13-编写中文版本翻译文件">1.3 编写中文版本翻译文件</h3>
<p>然后，要进行本地化编程，可以在同级目录下创建并编辑 <code>active.zh.json</code> 用于存放消息文本的中文翻译：</p>
<p></p>
<h3 id="14-本地化配置初始化">1.4 本地化配置初始化</h3>
<p>回到在在线论坛项目，打开配置文件 <code>config.json</code>，新增本地化目录和语言配置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="p">{</span>
  <span class="s">&#34;App&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="o">...</span>
    <span class="s">&#34;Locale&#34;</span><span class="p">:</span> <span class="s">&#34;locales&#34;</span><span class="p">,</span>
    <span class="s">&#34;Language&#34;</span><span class="p">:</span> <span class="s">&#34;zh&#34;</span>
  <span class="p">},</span>
  <span class="o">...</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>然后在 <code>config/config.go</code> 中新增与之映射的结构体字段，以及对应的初始化设置：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">config</span>

<span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;encoding/json&#34;</span>
    <span class="s">&#34;github.com/nicksnyder/go-i18n/v2/i18n&#34;</span>
    <span class="s">&#34;golang.org/x/text/language&#34;</span>
    <span class="s">&#34;log&#34;</span>
    <span class="s">&#34;os&#34;</span>
    <span class="s">&#34;sync&#34;</span>
<span class="p">)</span>

<span class="kd">type</span> <span class="nx">App</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="o">...</span>
    <span class="nx">Locale</span>       <span class="kt">string</span>
    <span class="nx">Language</span>     <span class="kt">string</span>
<span class="p">}</span>

<span class="o">...</span>

<span class="kd">type</span> <span class="nx">Configuration</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">App</span> <span class="nx">App</span>
    <span class="nx">Db</span>  <span class="nx">Database</span>
    <span class="nx">LocaleBundle</span> <span class="o">*</span><span class="nx">i18n</span><span class="p">.</span><span class="nx">Bundle</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">config</span> <span class="o">*</span><span class="nx">Configuration</span>
<span class="kd">var</span> <span class="nx">once</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Once</span>

<span class="c1">// 通过单例模式初始化全局配置
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">LoadConfig</span><span class="p">()</span> <span class="o">*</span><span class="nx">Configuration</span> <span class="p">{</span>
    <span class="nx">once</span><span class="p">.</span><span class="nf">Do</span><span class="p">(</span><span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;config.json&#34;</span><span class="p">)</span>
        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="nx">log</span><span class="p">.</span><span class="nf">Fatalln</span><span class="p">(</span><span class="s">&#34;Cannot open config file&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="nx">decoder</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">NewDecoder</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
        <span class="nx">config</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">Configuration</span><span class="p">{}</span>
        <span class="nx">err</span> <span class="p">=</span> <span class="nx">decoder</span><span class="p">.</span><span class="nf">Decode</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span>
        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="nx">log</span><span class="p">.</span><span class="nf">Fatalln</span><span class="p">(</span><span class="s">&#34;Cannot get configuration from file&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="c1">// 本地化初始设置
</span><span class="c1"></span>        <span class="nx">bundle</span> <span class="o">:=</span> <span class="nx">i18n</span><span class="p">.</span><span class="nf">NewBundle</span><span class="p">(</span><span class="nx">language</span><span class="p">.</span><span class="nx">English</span><span class="p">)</span>
        <span class="nx">bundle</span><span class="p">.</span><span class="nf">RegisterUnmarshalFunc</span><span class="p">(</span><span class="s">&#34;json&#34;</span><span class="p">,</span> <span class="nx">json</span><span class="p">.</span><span class="nx">Unmarshal</span><span class="p">)</span>
        <span class="nx">bundle</span><span class="p">.</span><span class="nf">MustLoadMessageFile</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">Locale</span> <span class="o">+</span> <span class="s">&#34;/active.en.json&#34;</span><span class="p">)</span>
        <span class="nx">bundle</span><span class="p">.</span><span class="nf">MustLoadMessageFile</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">Locale</span> <span class="o">+</span> <span class="s">&#34;/active.&#34;</span> <span class="o">+</span> <span class="nx">config</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">Language</span> <span class="o">+</span> <span class="s">&#34;.json&#34;</span><span class="p">)</span>
        <span class="nx">config</span><span class="p">.</span><span class="nx">LocaleBundle</span> <span class="p">=</span> <span class="nx">bundle</span>
    <span class="p">})</span>
    <span class="k">return</span> <span class="nx">config</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>注意我们在 <code>App</code> 结构体中新增了一个 <code>*i18n.Bundle</code> 类型的 <code>LocaleBundle</code> 字段，用于存放全局本地化 Bundle 实例，并且在 <code>LoadConfig()</code> 方法中以单例模式初始化该实例。</p>
<h3 id="15-在处理器方法中返回本地化消息">1.5 在处理器方法中返回本地化消息</h3>
<p>接下来，我们打开 <code>handlers/helper.go</code>，在 <code>init</code> 方法中初始化 Localizer 以便被所有处理器方法使用：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">handlers</span>

<span class="kn">import</span> <span class="p">(</span>
    <span class="o">...</span>
    <span class="s">&#34;github.com/nicksnyder/go-i18n/v2/i18n&#34;</span>
    <span class="p">.</span> <span class="s">&#34;github.com/xueyuanjun/chitchat/config&#34;</span>
<span class="p">)</span>

<span class="kd">var</span> <span class="nx">logger</span> <span class="o">*</span><span class="nx">log</span><span class="p">.</span><span class="nx">Logger</span>
<span class="kd">var</span> <span class="nx">config</span> <span class="o">*</span><span class="nx">Configuration</span>
<span class="kd">var</span> <span class="nx">localizer</span> <span class="o">*</span><span class="nx">i18n</span><span class="p">.</span><span class="nx">Localizer</span>

<span class="kd">func</span> <span class="nf">init</span><span class="p">()</span>  <span class="p">{</span>
    <span class="c1">// 获取全局配置实例
</span><span class="c1"></span>    <span class="nx">config</span> <span class="p">=</span> <span class="nf">LoadConfig</span><span class="p">()</span>
    <span class="c1">// 获取本地化实例
</span><span class="c1"></span>    <span class="nx">localizer</span> <span class="p">=</span> <span class="nx">i18n</span><span class="p">.</span><span class="nf">NewLocalizer</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">LocaleBundle</span><span class="p">,</span> <span class="nx">config</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">Language</span><span class="p">)</span>
    <span class="o">...</span>
<span class="p">}</span>

<span class="o">...</span>
</code></pre></td></tr></table>
</div>
</div><p>最后在 <code>handlers/thread.go</code> 和 <code>handlers/post.go</code> 中调用 <code>errorMessage</code> 辅助函数的地方调用 Localizer 提供的方法对消息文本进行翻译并返回给用户：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
    <span class="nx">msg</span> <span class="o">:=</span> <span class="nx">localizer</span><span class="p">.</span><span class="nf">MustLocalize</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">i18n</span><span class="p">.</span><span class="nx">LocalizeConfig</span><span class="p">{</span>
        <span class="nx">MessageID</span><span class="p">:</span> <span class="s">&#34;thread_not_found&#34;</span><span class="p">,</span>
    <span class="p">})</span>
    <span class="nf">errorMessage</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">request</span><span class="p">,</span> <span class="nx">msg</span><span class="p">)</span>
<span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="o">...</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="16-测试消息本地化">1.6 测试消息本地化</h3>
<p>重新启动应用，如果试图访问一个不存在的群组页面，就会返回如下中文提示信息：</p>
<p>说明我们的本地化翻译生效了，当然这里只是使用了 <code>go-i18n</code> 提供的最基本的功能，想要了解更多使用示例，可以参考如下链接：</p>
<ul>
<li><a href="https://github.com/nicksnyder/go-i18n" target="_blank" rel="noopener noreffer">官方文档</a></li>
<li><a href="https://zyfdegh.github.io/post/201809-translation-go-i18n/" target="_blank" rel="noopener noreffer">借助 go-i18n 更简单地实现全球化</a></li>
</ul>
<h2 id="2-视图本地化">2. 视图本地化</h2>
<p>所谓视图本地化指的是静态 HTML 视图模板的本地化，这里就不再适合使用消息文本翻译的方式实现了，最简单的方式就是为每个语言创建独立的视图模板进行本地化，然后在应用代码中通过读取全局配置、用户手动选择、客户端参数（比如 HTML 请求头中的 <code>Accept-Language</code> 字段）、或者域名信息来判断加载那种本地化视图模板，为了简化演示流程，这里我们使用全局配置的方式，也就是我们上面配置文件中设置的 <code>Language</code> 字段。</p>
<h3 id="21-创建本地化视图模板">2.1 创建本地化视图模板</h3>
<p>首先，我们在 <code>views</code> 目录下新增 <code>en</code> 和 <code>zh</code> 两个子目录，分别用于存放英文视图模板和中文视图模板，然后将原有视图文件移动到 <code>en</code> 目录下，并且在 <code>zh</code> 目录下创建每个视图模板的中文版本，以首页 <code>index.html</code> 为例，对应的中文版本如下：</p>
<p></p>
<p>其他中文视图模板也是类似，将其中的英文文本统一翻译成中文即可。</p>
<h3 id="22-通过配置加载本地化视图">2.2 通过配置加载本地化视图</h3>
<p>打开 <code>handlers/helper.go</code>，在 <code>generateHTML</code> 方法中通过读取全局配置加载对应的本地化视图模板：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">generateHTML</span><span class="p">(</span><span class="nx">writer</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">data</span> <span class="kd">interface</span><span class="p">{},</span> <span class="nx">filenames</span> <span class="o">...</span><span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">files</span> <span class="p">[]</span><span class="kt">string</span>
    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">file</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">filenames</span> <span class="p">{</span>
        <span class="nx">files</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">files</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;views/%s/%s.html&#34;</span><span class="p">,</span> <span class="nx">config</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">Language</span><span class="p">,</span> <span class="nx">file</span><span class="p">))</span>
    <span class="p">}</span>
    
    <span class="nx">templates</span> <span class="o">:=</span> <span class="nx">template</span><span class="p">.</span><span class="nf">Must</span><span class="p">(</span><span class="nx">template</span><span class="p">.</span><span class="nf">ParseFiles</span><span class="p">(</span><span class="nx">files</span><span class="o">...</span><span class="p">))</span>
    <span class="nx">templates</span><span class="p">.</span><span class="nf">ExecuteTemplate</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="s">&#34;layout&#34;</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>非常简单，不再赘述。</p>
<blockquote>
<p>注：同时移除 <code>parseTemplateFiles</code> 方法，并将调用该方法的地方调整为调用 <code>generateHTML</code> 以避免维护两个地方。</p>
</blockquote>
<h3 id="23-测试视图本地化">2.3 测试视图本地化</h3>
<p>重启应用，访问首页，即可看到页面视图已经都是中文显示了：</p>
<p></p>
<p></p>
<p></p>
<p></p>
<h2 id="3-日期时间本地化">3. 日期时间本地化</h2>
<p>看起来都已经 OK 了，不过还有个小问题，那就是日期时间显示还是英文风格的，对应的实现代码在 <code>models/thread.go</code> 中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="p">(</span><span class="nx">thread</span> <span class="o">*</span><span class="nx">Thread</span><span class="p">)</span> <span class="nf">CreatedAtDate</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">thread</span><span class="p">.</span><span class="nx">CreatedAt</span><span class="p">.</span><span class="nf">Format</span><span class="p">(</span><span class="s">&#34;Jan 2, 2006 at 3:04pm&#34;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>我们当然可以直接修改这里来实现类似 <code>2006-01-02 15:04:05</code> 的日期时间格式（该时间节点是 Go 语言元年），不过，学院君这里换一种复杂一点的实现，以便顺手介绍下如何在 Go 视图模板中通过管道模式调用自定义函数。</p>
<h3 id="31-将自定义函数应用到视图模板">3.1 将自定义函数应用到视图模板</h3>
<p>打开 <code>handlers/helper.go</code>，新增一个格式化日期时间的函数 <code>formatDate</code>，然后在 <code>generateHTML</code> 方法中将这个函数通过 <code>template.FuncMap</code> 组装后再通过 <code>Funcs</code> 方法应用到视图模板中，这样，就可以在所有视图模板中通过 <code>fdate</code> 别名来调用 <code>formatDate</code> 函数了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// 生成 HTML 模板
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">generateHTML</span><span class="p">(</span><span class="nx">writer</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">data</span> <span class="kd">interface</span><span class="p">{},</span> <span class="nx">filenames</span> <span class="o">...</span><span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">files</span> <span class="p">[]</span><span class="kt">string</span>
    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">file</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">filenames</span> <span class="p">{</span>
        <span class="nx">files</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">files</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;views/%s/%s.html&#34;</span><span class="p">,</span> <span class="nx">config</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">Language</span><span class="p">,</span> <span class="nx">file</span><span class="p">))</span>
    <span class="p">}</span>
    <span class="nx">funcMap</span> <span class="o">:=</span> <span class="nx">template</span><span class="p">.</span><span class="nx">FuncMap</span><span class="p">{</span><span class="s">&#34;fdate&#34;</span><span class="p">:</span> <span class="nx">formatDate</span><span class="p">}</span>
    <span class="nx">t</span> <span class="o">:=</span> <span class="nx">template</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;layout&#34;</span><span class="p">).</span><span class="nf">Funcs</span><span class="p">(</span><span class="nx">funcMap</span><span class="p">)</span>
    <span class="nx">templates</span> <span class="o">:=</span> <span class="nx">template</span><span class="p">.</span><span class="nf">Must</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nf">ParseFiles</span><span class="p">(</span><span class="nx">files</span><span class="o">...</span><span class="p">))</span>
    <span class="nx">templates</span><span class="p">.</span><span class="nf">ExecuteTemplate</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="s">&#34;layout&#34;</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
<span class="p">}</span>

<span class="o">...</span>

<span class="c1">// 日期格式化辅助函数
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">formatDate</span><span class="p">(</span><span class="nx">t</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span><span class="p">)</span> <span class="kt">string</span> <span class="p">{</span>
    <span class="nx">datetime</span> <span class="o">:=</span> <span class="s">&#34;2006-01-02 15:04:05&#34;</span>
    <span class="k">return</span> <span class="nx">t</span><span class="p">.</span><span class="nf">Format</span><span class="p">(</span><span class="nx">datetime</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="32-调用自定义函数格式化本地日期时间">3.2 调用自定义函数格式化本地日期时间</h3>
<p>然后我们在所有视图文件中将群组创建日期渲染调整为如下方式，即通过管道连接符的方式将 <code>.CreatedAt</code> 变量作为参数传入 <code>fdate</code> 并输出返回值：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="p">{{</span> <span class="p">.</span><span class="nx">CreatedAt</span> <span class="p">|</span> <span class="nx">fdate</span> <span class="p">}}</span>
</code></pre></td></tr></table>
</div>
</div><p>注意这里一定要使用 <code>.CreatedAt</code>，这个变量才是 <code>time.Time</code> 类型，而 <code>.CreatedAtDate</code> 是字符串类型。</p>
<p>再次重新启动应用，访问首页和群组详情页就可以看到格式化后的本地日期时间格式了：</p>
<p></p>
<p></p>]]></description></item><item><title>基于Go语言开发在线论坛7-通过单例模式获取全局配置</title><link>https://shuzang.github.io/development-of-online-forum-based-on-golang-7-get-global-configuration-through-singleton-mode/</link><pubDate>Sun, 07 Jun 2020 16:25:00 +0800</pubDate><author>作者</author><guid>https://shuzang.github.io/development-of-online-forum-based-on-golang-7-get-global-configuration-through-singleton-mode/</guid><description><![CDATA[<p>本文介绍如何将敏感信息或可变信息通过配置文件进行配置，然后在应用中读取这些配置文件来获取配置信息。</p>
<p>将敏感信息通过配置文件读取是为了避免随着代码提交到公开库造成敏感信息的泄露，给线上环境带来安全隐患，这些敏感信息包括数据库连接信息、第三方 SDK （比如微信、支付宝、Github）的密钥等。</p>
<p>将可变信息通过配置文件读取是为了避免硬编码，将经常变动的信息通过配置文件配置可以极大的提高代码的可维护性，这些可变信息通常包括应用服务器监听的地址和端口、目录路径设置、当前运行环境、超时时间等。</p>
<p>使用公开库时，如 github，配置文件需要写入 .gitignore 文件从而避免提交到线上。</p>
<h2 id="1-定义全局配置文件">1. 定义全局配置文件</h2>
<p>接下来，我们为在线论坛项目设置配置文件 <code>config.json</code>，将一些敏感信息和可变信息提交到 JSON 配置文件中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;App&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;Address&#34;</span><span class="p">:</span> <span class="s2">&#34;0.0.0.0:8080&#34;</span><span class="p">,</span>
    <span class="nt">&#34;Static&#34;</span><span class="p">:</span> <span class="s2">&#34;public&#34;</span><span class="p">,</span>
    <span class="nt">&#34;Log&#34;</span><span class="p">:</span> <span class="s2">&#34;logs&#34;</span>
  <span class="p">},</span>
  <span class="nt">&#34;Db&#34;</span><span class="p">:</span> <span class="p">{</span>
    <span class="nt">&#34;Driver&#34;</span><span class="p">:</span> <span class="s2">&#34;mysql&#34;</span><span class="p">,</span>
    <span class="nt">&#34;Address&#34;</span><span class="p">:</span> <span class="s2">&#34;localhost:3306&#34;</span><span class="p">,</span>
    <span class="nt">&#34;Database&#34;</span><span class="p">:</span> <span class="s2">&#34;chitchat&#34;</span><span class="p">,</span>
    <span class="nt">&#34;User&#34;</span><span class="p">:</span> <span class="s2">&#34;root&#34;</span><span class="p">,</span>
    <span class="nt">&#34;Password&#34;</span><span class="p">:</span> <span class="s2">&#34;root&#34;</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>应用相关的可变信息配置到 <code>app</code> 配置项，数据库相关的敏感信息配置到 <code>Db</code> 配置项</p>
<h2 id="2-通过单例模式初始化全局配置">2. 通过单例模式初始化全局配置</h2>
<p>在根目录下创建 <code>config</code> 目录，然后在该目录下新增 <code>config.go</code> 用来存放配置初始化代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">config</span>

<span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;encoding/json&#34;</span>
    <span class="s">&#34;log&#34;</span>
    <span class="s">&#34;os&#34;</span>
    <span class="s">&#34;sync&#34;</span>
<span class="p">)</span>

<span class="kd">type</span> <span class="nx">App</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">Address</span>      <span class="kt">string</span>
    <span class="nx">Static</span>       <span class="kt">string</span>
    <span class="nx">Log</span>          <span class="kt">string</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">Database</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">Driver</span>      <span class="kt">string</span>
    <span class="nx">Address</span>        <span class="kt">string</span>
    <span class="nx">Database</span>    <span class="kt">string</span>
    <span class="nx">User</span>        <span class="kt">string</span>
    <span class="nx">Password</span>    <span class="kt">string</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">Configuration</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">App</span> <span class="nx">App</span>
    <span class="nx">Db</span>  <span class="nx">Database</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">config</span> <span class="o">*</span><span class="nx">Configuration</span>
<span class="kd">var</span> <span class="nx">once</span> <span class="nx">sync</span><span class="p">.</span><span class="nx">Once</span>

<span class="c1">// 通过单例模式初始化全局配置
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">LoadConfig</span><span class="p">()</span> <span class="o">*</span><span class="nx">Configuration</span> <span class="p">{</span>
    <span class="nx">once</span><span class="p">.</span><span class="nf">Do</span><span class="p">(</span><span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;config.json&#34;</span><span class="p">)</span>
        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="nx">log</span><span class="p">.</span><span class="nf">Fatalln</span><span class="p">(</span><span class="s">&#34;Cannot open config file&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="nx">decoder</span> <span class="o">:=</span> <span class="nx">json</span><span class="p">.</span><span class="nf">NewDecoder</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
        <span class="nx">config</span> <span class="p">=</span> <span class="o">&amp;</span><span class="nx">Configuration</span><span class="p">{}</span>
        <span class="nx">err</span> <span class="p">=</span> <span class="nx">decoder</span><span class="p">.</span><span class="nf">Decode</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span>
        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="nx">log</span><span class="p">.</span><span class="nf">Fatalln</span><span class="p">(</span><span class="s">&#34;Cannot get configuration from file&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">})</span>
    <span class="k">return</span> <span class="nx">config</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>定义 <code>Configuration</code> 结构体以便和全局配置文件 <code>config.json</code> 字段进行映射，注意这里的首字母都需要大写</p>
<p>定义一个 <code>LoadConfig</code> 方法以<strong>单例模式</strong>返回全局配置实例的指针，这里使用单例的原因是因为应用代码中可能多处都要获取配置值，重复加载配置文件进行 JSON 解码存在性能损耗（当然，定义 <code>init</code> 方法本身就可以支持全局运行一次，这里主要演示下单例模式如何实现）。在 Go 语言中，我们可以借助并发编程中的 <code>sync.Once</code> 类型来实现单例模式，保证并发安全，在 <code>once.Do</code> 中定义的匿名函数全局只会执行一次</p>
<h2 id="3-项目代码重构">3. 项目代码重构</h2>
<p>最后，我们将项目代码中相应位置的硬编码调整为通过上面方法返回的全局配置实例获取配置值</p>
<h3 id="31-web-服务器启动参数">3.1 Web 服务器启动参数</h3>
<p>首先需要在 <code>main.go</code> 的入口位置初始化全局配置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
    <span class="p">.</span> <span class="s">&#34;github.com/xueyuanjun/chitchat/config&#34;</span>
    <span class="p">.</span> <span class="s">&#34;github.com/xueyuanjun/chitchat/routes&#34;</span>
    <span class="s">&#34;log&#34;</span>
    <span class="s">&#34;net/http&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span>  <span class="p">{</span>
    <span class="nf">startWebServer</span><span class="p">()</span>
<span class="p">}</span>

<span class="c1">// 通过指定端口启动 Web 服务器
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">startWebServer</span><span class="p">()</span>  <span class="p">{</span>
    <span class="c1">// 在入口位置初始化全局配置
</span><span class="c1"></span>    <span class="nx">config</span> <span class="o">:=</span> <span class="nf">LoadConfig</span><span class="p">()</span>
    <span class="nx">r</span> <span class="o">:=</span> <span class="nf">NewRouter</span><span class="p">()</span> <span class="c1">// 通过 router.go 中定义的路由器来分发请求
</span><span class="c1"></span>
    <span class="c1">// 处理静态资源文件
</span><span class="c1"></span>    <span class="nx">assets</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">FileServer</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nf">Dir</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">Static</span><span class="p">))</span>
    <span class="nx">r</span><span class="p">.</span><span class="nf">PathPrefix</span><span class="p">(</span><span class="s">&#34;/static/&#34;</span><span class="p">).</span><span class="nf">Handler</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nf">StripPrefix</span><span class="p">(</span><span class="s">&#34;/static/&#34;</span><span class="p">,</span> <span class="nx">assets</span><span class="p">))</span>

    <span class="nx">http</span><span class="p">.</span><span class="nf">Handle</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>

    <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Starting HTTP service at &#34;</span> <span class="o">+</span> <span class="nx">config</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">Address</span><span class="p">)</span>
    <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="nx">config</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">Address</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>

    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;An error occured starting HTTP listener at &#34;</span> <span class="o">+</span> <span class="nx">config</span><span class="p">.</span><span class="nx">App</span><span class="p">.</span><span class="nx">Address</span><span class="p">)</span>
        <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Error: &#34;</span> <span class="o">+</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>我们在 <code>startWebServer</code> 方法的入口位置初始化全局配置，并且全局配置实例只在这里进行一次初始化，后续不会再执行加载配置文件和 JSON 解码操作，而是直接返回对应的 <code>config</code> 实例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">config</span> <span class="o">:=</span> <span class="nf">LoadConfig</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>然后将 Web 服务器的启动参数和静态资源目录都调整为通过配置值获取，这样我们后续只需要更改配置文件即可对其进行调整，而不需要修改任何代码，降低了代码维护成本。</p>
<h3 id="32-数据库连接配置">3.2 数据库连接配置</h3>
<p>接下来，打开 <code>models/db.go</code>，将数据库连接信息调整为通过配置文件读取：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">models</span>

<span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;crypto/rand&#34;</span>
    <span class="s">&#34;crypto/sha1&#34;</span>
    <span class="s">&#34;database/sql&#34;</span>
    <span class="s">&#34;fmt&#34;</span>
    <span class="nx">_</span> <span class="s">&#34;github.com/go-sql-driver/mysql&#34;</span>
    <span class="p">.</span> <span class="s">&#34;github.com/xueyuanjun/chitchat/config&#34;</span>
    <span class="s">&#34;log&#34;</span>
<span class="p">)</span>

<span class="kd">var</span> <span class="nx">Db</span> <span class="o">*</span><span class="nx">sql</span><span class="p">.</span><span class="nx">DB</span>

<span class="kd">func</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
    <span class="nx">config</span> <span class="o">:=</span> <span class="nf">LoadConfig</span><span class="p">()</span> <span class="c1">// 加载全局配置实例
</span><span class="c1"></span>    <span class="nx">driver</span> <span class="o">:=</span> <span class="nx">config</span><span class="p">.</span><span class="nx">Db</span><span class="p">.</span><span class="nx">Driver</span>
    <span class="nx">source</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%s:%s@(%s)/%s?charset=utf8&amp;parseTime=true&#34;</span><span class="p">,</span> <span class="nx">config</span><span class="p">.</span><span class="nx">Db</span><span class="p">.</span><span class="nx">User</span><span class="p">,</span> <span class="nx">config</span><span class="p">.</span><span class="nx">Db</span><span class="p">.</span><span class="nx">Password</span><span class="p">,</span>
        <span class="nx">config</span><span class="p">.</span><span class="nx">Db</span><span class="p">.</span><span class="nx">Address</span><span class="p">,</span> <span class="nx">config</span><span class="p">.</span><span class="nx">Db</span><span class="p">.</span><span class="nx">Database</span><span class="p">)</span>
    <span class="nx">Db</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">sql</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="nx">driver</span><span class="p">,</span> <span class="nx">source</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">return</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>虽然，在这里页调用了 <code>LoadConfig()</code>，但是由于是单例模式，所以会直接返回 <code>config</code> 实例，不会再进行初始化操作，然后我们获取配置值填充对应的 <code>sql.Open</code> 连接配置。</p>
<h2 id="4-整体测试">4. 整体测试</h2>
<p>至此，我们已经完成了通过配置文件读取应用配置的代码重构，我们可以为项目编写<a href="https://xueyuanjun.com/post/21494" target="_blank" rel="noopener noreffer">单元测试</a>，也可以直接通过在浏览器访问这个在线论坛项目验证重构后应用是否可以正常运行，重新启动 Web 服务器，输出如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ go run main.go
2020/06/07 16:54:55 Starting HTTP server at 0.0.0.0:8080
</code></pre></td></tr></table>
</div>
</div><p>表示启动服务器时读取配置信息正常，然后访问应用首页：</p>
<p></p>
<p>成功，对用户来说，没有任何感知后台的变动。</p>]]></description></item><item><title>基于Go语言开发在线论坛6-日志与错误处理</title><link>https://shuzang.github.io/development-of-online-forum-based-on-golang-6-log-and-error/</link><pubDate>Sun, 07 Jun 2020 11:03:00 +0800</pubDate><author>作者</author><guid>https://shuzang.github.io/development-of-online-forum-based-on-golang-6-log-and-error/</guid><description><![CDATA[<p>到现在为止，我们已经完成了在线论坛项目基本功能的开发，对 Go 语言 Web 编程中如何实现 MVC 架构模式以及 CRUD（数据库增删改查）基本操作有了初步的认识。不过现在所有的日志和错误处理都是杂糅在业务代码中，本篇介绍如何对它们统一进行处理，使得业务代码和日志及错误处理逻辑分离。</p>
<h2 id="1-日志处理">1. 日志处理</h2>
<h3 id="11-初始化日志处理器">1.1 初始化日志处理器</h3>
<p>首先来看日志处理，在 <code>handlers/helper.go</code> 中，新增如下日志处理器初始化代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;log&#34;</span>
    <span class="s">&#34;os&#34;</span>
<span class="p">)</span>

<span class="kd">var</span> <span class="nx">logger</span> <span class="o">*</span><span class="nx">log</span><span class="p">.</span><span class="nx">Logger</span>

<span class="kd">func</span> <span class="nf">init</span><span class="p">()</span>  <span class="p">{</span>
    <span class="nx">file</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">os</span><span class="p">.</span><span class="nf">OpenFile</span><span class="p">(</span><span class="s">&#34;logs/chitchat.log&#34;</span><span class="p">,</span> <span class="nx">os</span><span class="p">.</span><span class="nx">O_CREATE</span><span class="p">|</span><span class="nx">os</span><span class="p">.</span><span class="nx">O_WRONLY</span><span class="p">|</span><span class="nx">os</span><span class="p">.</span><span class="nx">O_APPEND</span><span class="p">,</span> <span class="mo">0666</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">log</span><span class="p">.</span><span class="nf">Fatalln</span><span class="p">(</span><span class="s">&#34;Failed to open log file&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">logger</span> <span class="p">=</span> <span class="nx">log</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="nx">file</span><span class="p">,</span> <span class="s">&#34;INFO &#34;</span><span class="p">,</span> <span class="nx">log</span><span class="p">.</span><span class="nx">Ldate</span><span class="p">|</span><span class="nx">log</span><span class="p">.</span><span class="nx">Ltime</span><span class="p">|</span><span class="nx">log</span><span class="p">.</span><span class="nx">Lshortfile</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这里我们借助 Go 官方提供的 <code>log</code> 包进行日志处理，首先声明一个 <code>*log.Logger</code> 类型的 <code>logger</code> 变量作为日志处理器，以便可以全局使用。默认的日志文件位于 <code>logs/chitchat.log</code>，我们通过 <code>os.OpenFile</code> 打开这个日志文件句柄，如果文件不存在，则自动创建。然后我们通过 <code>log.New</code> 初始化日志处理器并赋值给 <code>logger</code>，该方法需要传入日志文件、默认日志级别、以及日志格式，关于该方法的细节，我们后面在日志章节会详细介绍。</p>
<h3 id="12-定义日志函数">1.2 定义日志函数</h3>
<p>然后我们就可以通过 <code>logger</code> 这个日志处理器来记录日志了，在 <code>helper.go</code> 中新增如下几个日志函数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">info</span><span class="p">(</span><span class="nx">args</span> <span class="o">...</span><span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
    <span class="nx">logger</span><span class="p">.</span><span class="nf">SetPrefix</span><span class="p">(</span><span class="s">&#34;INFO &#34;</span><span class="p">)</span>
    <span class="nx">logger</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">args</span><span class="o">...</span><span class="p">)</span>
<span class="p">}</span>
    
<span class="c1">// 为什么不命名为 error？避免和 error 类型重名
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">danger</span><span class="p">(</span><span class="nx">args</span> <span class="o">...</span><span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
    <span class="nx">logger</span><span class="p">.</span><span class="nf">SetPrefix</span><span class="p">(</span><span class="s">&#34;ERROR &#34;</span><span class="p">)</span>
    <span class="nx">logger</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">args</span><span class="o">...</span><span class="p">)</span>
<span class="p">}</span>
    
<span class="kd">func</span> <span class="nf">warning</span><span class="p">(</span><span class="nx">args</span> <span class="o">...</span><span class="kd">interface</span><span class="p">{})</span> <span class="p">{</span>
    <span class="nx">logger</span><span class="p">.</span><span class="nf">SetPrefix</span><span class="p">(</span><span class="s">&#34;WARNING &#34;</span><span class="p">)</span>
    <span class="nx">logger</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">args</span><span class="o">...</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>非常简单，我们定义了三个日志函数来记录三个日志级别，分别是 INFO（普通）、ERROR（错误）、WARNING（警告），然后通过调用 <code>logger.Println</code> 传入参数记录日志信息到日志文件即可，这里的参数类型是 <code>...interface{}</code>，表示可以传入参数支持任意类型、任意个数。</p>
<h3 id="13-重构业务代码">1.3 重构业务代码</h3>
<p>接下来，我们到业务处理器中，将原来的日志打印代码都重构为调用对应的日志函数，以 <code>handlers/auth.go</code> 为例，修改日志处理代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// src/github.com/xueyuanjun/chitchat/handlers/auth.go
</span><span class="c1">// 注册新用户
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">SignupAccount</span><span class="p">(</span><span class="nx">writer</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">request</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">err</span> <span class="o">:=</span> <span class="nx">request</span><span class="p">.</span><span class="nf">ParseForm</span><span class="p">()</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nf">danger</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;Cannot parse form&#34;</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">user</span> <span class="o">:=</span> <span class="nx">models</span><span class="p">.</span><span class="nx">User</span><span class="p">{</span>
        <span class="nx">Name</span><span class="p">:</span>     <span class="nx">request</span><span class="p">.</span><span class="nf">PostFormValue</span><span class="p">(</span><span class="s">&#34;name&#34;</span><span class="p">),</span>
        <span class="nx">Email</span><span class="p">:</span>    <span class="nx">request</span><span class="p">.</span><span class="nf">PostFormValue</span><span class="p">(</span><span class="s">&#34;email&#34;</span><span class="p">),</span>
        <span class="nx">Password</span><span class="p">:</span> <span class="nx">request</span><span class="p">.</span><span class="nf">PostFormValue</span><span class="p">(</span><span class="s">&#34;password&#34;</span><span class="p">),</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">user</span><span class="p">.</span><span class="nf">Create</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nf">danger</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;Cannot create user&#34;</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">http</span><span class="p">.</span><span class="nf">Redirect</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">request</span><span class="p">,</span> <span class="s">&#34;/login&#34;</span><span class="p">,</span> <span class="mi">302</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 用户认证
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Authenticate</span><span class="p">(</span><span class="nx">writer</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">request</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">err</span> <span class="o">:=</span> <span class="nx">request</span><span class="p">.</span><span class="nf">ParseForm</span><span class="p">()</span>
    <span class="nx">user</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">models</span><span class="p">.</span><span class="nf">UserByEmail</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nf">PostFormValue</span><span class="p">(</span><span class="s">&#34;email&#34;</span><span class="p">))</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nf">danger</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;Cannot find user&#34;</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="nx">user</span><span class="p">.</span><span class="nx">Password</span> <span class="o">==</span> <span class="nx">models</span><span class="p">.</span><span class="nf">Encrypt</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nf">PostFormValue</span><span class="p">(</span><span class="s">&#34;password&#34;</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">session</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">user</span><span class="p">.</span><span class="nf">CreateSession</span><span class="p">()</span>
        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="nf">danger</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;Cannot create session&#34;</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="nx">cookie</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Cookie</span><span class="p">{</span>
            <span class="nx">Name</span><span class="p">:</span>     <span class="s">&#34;_cookie&#34;</span><span class="p">,</span>
            <span class="nx">Value</span><span class="p">:</span>    <span class="nx">session</span><span class="p">.</span><span class="nx">Uuid</span><span class="p">,</span>
            <span class="nx">HttpOnly</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="p">}</span>
        <span class="nx">http</span><span class="p">.</span><span class="nf">SetCookie</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">cookie</span><span class="p">)</span>
        <span class="nx">http</span><span class="p">.</span><span class="nf">Redirect</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">request</span><span class="p">,</span> <span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="mi">302</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">http</span><span class="p">.</span><span class="nf">Redirect</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">request</span><span class="p">,</span> <span class="s">&#34;/login&#34;</span><span class="p">,</span> <span class="mi">302</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// 用户退出
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Logout</span><span class="p">(</span><span class="nx">writer</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">request</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">cookie</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">request</span><span class="p">.</span><span class="nf">Cookie</span><span class="p">(</span><span class="s">&#34;_cookie&#34;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ErrNoCookie</span> <span class="p">{</span>
        <span class="nf">warning</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="s">&#34;Failed to get cookie&#34;</span><span class="p">)</span>
        <span class="nx">session</span> <span class="o">:=</span> <span class="nx">models</span><span class="p">.</span><span class="nx">Session</span><span class="p">{</span><span class="nx">Uuid</span><span class="p">:</span> <span class="nx">cookie</span><span class="p">.</span><span class="nx">Value</span><span class="p">}</span>
        <span class="nx">session</span><span class="p">.</span><span class="nf">DeleteByUUID</span><span class="p">()</span>
    <span class="p">}</span>
    <span class="nx">http</span><span class="p">.</span><span class="nf">Redirect</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">request</span><span class="p">,</span> <span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="mi">302</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>其他处理器方法参照这个示例进行调整即可</p>
<h2 id="2-错误处理">2. 错误处理</h2>
<p>Go 语言并没有像 PHP、Java 那样提供异常这种类型，只有 <code>error</code> 和 <code>panic</code>，对于 Go Web 应用中的错误处理，不影响程序继续往后执行的，可以通过日志方式记录下来，如果某些错误导致程序无法往后执行，比如浏览群组详情页，对应群组不存在，这个时候，我们就应该直接返回 404 响应或者将用户重定向到 404 页面，而不能继续往后执行，对于这种错误，只能通过单独的处理逻辑进行处理，这种错误类似于 Laravel 中的中断异常处理。</p>
<h3 id="21-重定向到错误页面">2.1 重定向到错误页面</h3>
<p>在这个项目中，我们通过重定向到错误页面的方式处理这种类型的错误，在 <code>handlers/helper.go</code> 中新增 <code>error_message</code> 函数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// 异常处理统一重定向到错误页面
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">error_message</span><span class="p">(</span><span class="nx">writer</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">request</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">,</span> <span class="nx">msg</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">url</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;/err?msg=&#34;</span><span class="p">,</span> <span class="nx">msg</span><span class="p">}</span>
    <span class="nx">http</span><span class="p">.</span><span class="nf">Redirect</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">request</span><span class="p">,</span> <span class="nx">strings</span><span class="p">.</span><span class="nf">Join</span><span class="p">(</span><span class="nx">url</span><span class="p">,</span> <span class="s">&#34;&#34;</span><span class="p">),</span> <span class="mi">302</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>调用该方法会将用户重定向到错误处理页面（由 <code>err</code> 路由对应处理器方法渲染），响应状态码为 302，并且带上错误消息 <code>msg</code>，以便客户端感知错误原因。</p>
<h3 id="22-编写错误页面相关代码">2.2 编写错误页面相关代码</h3>
<p>为此，我们还要编写用于处理应用出错的路由、处理器和视图实现。</p>
<p><strong>处理器方法</strong></p>
<p>首先在 <code>handlers/index.go</code> 中编写全局的、渲染错误页面的处理器方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">Err</span><span class="p">(</span><span class="nx">writer</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">request</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span>  <span class="p">{</span>
    <span class="nx">vals</span> <span class="o">:=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nf">Query</span><span class="p">()</span>
    <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">session</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">request</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nf">generateHTML</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">vals</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;msg&#34;</span><span class="p">),</span> <span class="s">&#34;layout&#34;</span><span class="p">,</span> <span class="s">&#34;navbar&#34;</span><span class="p">,</span> <span class="s">&#34;error&#34;</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nf">generateHTML</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">vals</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;msg&#34;</span><span class="p">),</span> <span class="s">&#34;layout&#34;</span><span class="p">,</span> <span class="s">&#34;auth.navbar&#34;</span><span class="p">,</span> <span class="s">&#34;error&#34;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>我们可以通过 <code>vals.Get</code> 方法从查询字符串获取 <code>msg</code> 参数，并将其渲染到错误视图 <code>error.html</code> 中。</p>
<p><strong>错误视图</strong></p>
<p>然后在 <code>views</code> 目录下新增 <code>error.html</code> 用来定义错误视图：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="p">{{</span> <span class="nx">define</span> <span class="s">&#34;content&#34;</span> <span class="p">}}</span>
    
<span class="p">&lt;</span><span class="nx">p</span> <span class="nx">class</span><span class="p">=</span><span class="s">&#34;lead&#34;</span><span class="p">&gt;{{</span> <span class="p">.</span> <span class="p">}}&lt;</span><span class="o">/</span><span class="nx">p</span><span class="p">&gt;</span>
    
<span class="p">{{</span> <span class="nx">end</span> <span class="p">}}</span>
</code></pre></td></tr></table>
</div>
</div><p>非常简单，只是通过 <code>{{ . }}</code> 获取 <code>msg</code> 变量的值并渲染出来。</p>
<p><strong>注册路由</strong></p>
<p>最后在 <code>routes/routes.go</code> 中注册错误路由：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="p">{</span>
    <span class="s">&#34;error&#34;</span><span class="p">,</span>
    <span class="s">&#34;GET&#34;</span><span class="p">,</span>
    <span class="s">&#34;/err&#34;</span><span class="p">,</span>
    <span class="nx">handlers</span><span class="p">.</span><span class="nx">Err</span><span class="p">,</span>
<span class="p">},</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="23-重构业务代码">2.3 重构业务代码</h3>
<p>在必要的地方调用错误处理函数 <code>error_message</code> 将用户重定向到错误页面，比如在 <code>handlers/thread.go</code> 中，在浏览群组详情页时，如果指定 ID 对应群组不存在，则将用户重定向到错误页面：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// 通过 ID 渲染指定群组页面
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">ReadThread</span><span class="p">(</span><span class="nx">writer</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">request</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">vals</span> <span class="o">:=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nf">Query</span><span class="p">()</span>
    <span class="nx">uuid</span> <span class="o">:=</span> <span class="nx">vals</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;id&#34;</span><span class="p">)</span>
    <span class="nx">thread</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">models</span><span class="p">.</span><span class="nf">ThreadByUUID</span><span class="p">(</span><span class="nx">uuid</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nf">error_message</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">request</span><span class="p">,</span> <span class="s">&#34;Cannot read thread&#34;</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="o">...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>又比如 <code>handlers/post.go</code> 中，在创建新主题时，如果获取不到主题归属的群组，则将用户重定向到错误页面：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// 在指定群组下创建新主题
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">PostThread</span><span class="p">(</span><span class="nx">writer</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">request</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">sess</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">session</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">request</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">http</span><span class="p">.</span><span class="nf">Redirect</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">request</span><span class="p">,</span> <span class="s">&#34;/login&#34;</span><span class="p">,</span> <span class="mi">302</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="o">...</span> 
        <span class="nx">thread</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">models</span><span class="p">.</span><span class="nf">ThreadByUUID</span><span class="p">(</span><span class="nx">uuid</span><span class="p">)</span>
        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="nf">error_message</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">request</span><span class="p">,</span> <span class="s">&#34;Cannot read thread&#34;</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="o">...</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="3-整体测试">3. 整体测试</h2>
<p>至此，我们已经完成了日志和错误统一处理的代码重构，接下来，可以进行简单的测试，重启 HTTP 服务器，访问应用首页，此时会引入 <code>helper.go</code>，执行 <code>init</code> 方法，创建日志文件，我们试图使用错误的用户名密码登录：</p>
<p></p>
<p>测试就可以在 <code>logs/chitchat.log</code> 中看到错误日志了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">ERROR</span> <span class="mi">2020</span><span class="o">/</span><span class="mo">04</span><span class="o">/</span><span class="mo">07</span> <span class="mi">14</span><span class="p">:</span><span class="mi">55</span><span class="p">:</span><span class="mi">39</span> <span class="nx">helper</span><span class="p">.</span><span class="k">go</span><span class="p">:</span><span class="mi">71</span><span class="p">:</span> <span class="nx">sql</span><span class="p">:</span> <span class="nx">no</span> <span class="nx">rows</span> <span class="nx">in</span> <span class="nx">result</span> <span class="nx">set</span> <span class="nx">Cannot</span> <span class="nx">find</span> <span class="nx">user</span>
</code></pre></td></tr></table>
</div>
</div><p>接下来，我们访问一个不存在的群组 <code>http://localhost:8080/thread/read?id=100</code>，页面就会重定向到错误页面：</p>
<p></p>]]></description></item><item><title>基于Go语言开发在线论坛5-创建群组和主题功能实现</title><link>https://shuzang.github.io/development-of-online-forum-based-on-golang-5-create-thread-and-post/</link><pubDate>Fri, 05 Jun 2020 11:41:00 +0800</pubDate><author>作者</author><guid>https://shuzang.github.io/development-of-online-forum-based-on-golang-5-create-thread-and-post/</guid><description><![CDATA[<p>上篇文章基于 Cookie + Session 实现了简单的用户认证功能，用户认证之后，就可以创建群组和主题了，本篇介绍如何创建群组和主题，并将其渲染到前端页面。</p>
<h2 id="1-群组的创建和浏览">1. 群组的创建和浏览</h2>
<h3 id="11-处理器方法">1.1 处理器方法</h3>
<p>在 <code>handlers</code> 目录下新增 <code>thread.go</code> 编写群组创建与获取方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">handlers</span>

<span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;fmt&#34;</span>
    <span class="s">&#34;github.com/xueyuanjun/chitchat/models&#34;</span>
    <span class="s">&#34;net/http&#34;</span>
<span class="p">)</span>

<span class="c1">// GET /threads/new
</span><span class="c1">// 创建群组页面
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">NewThread</span><span class="p">(</span><span class="nx">writer</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">request</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">session</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">request</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">http</span><span class="p">.</span><span class="nf">Redirect</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">request</span><span class="p">,</span> <span class="s">&#34;/login&#34;</span><span class="p">,</span> <span class="mi">302</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nf">generateHTML</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="s">&#34;layout&#34;</span><span class="p">,</span> <span class="s">&#34;auth.navbar&#34;</span><span class="p">,</span> <span class="s">&#34;new.thread&#34;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// POST /thread/create
</span><span class="c1">// 执行群组创建逻辑
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">CreateThread</span><span class="p">(</span><span class="nx">writer</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">request</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">sess</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">session</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">request</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">http</span><span class="p">.</span><span class="nf">Redirect</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">request</span><span class="p">,</span> <span class="s">&#34;/login&#34;</span><span class="p">,</span> <span class="mi">302</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">err</span> <span class="p">=</span> <span class="nx">request</span><span class="p">.</span><span class="nf">ParseForm</span><span class="p">()</span>
        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Cannot parse form&#34;</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="nx">user</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sess</span><span class="p">.</span><span class="nf">User</span><span class="p">()</span>
        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Cannot get user from session&#34;</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="nx">topic</span> <span class="o">:=</span> <span class="nx">request</span><span class="p">.</span><span class="nf">PostFormValue</span><span class="p">(</span><span class="s">&#34;topic&#34;</span><span class="p">)</span>
        <span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">user</span><span class="p">.</span><span class="nf">CreateThread</span><span class="p">(</span><span class="nx">topic</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Cannot create thread&#34;</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="nx">http</span><span class="p">.</span><span class="nf">Redirect</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">request</span><span class="p">,</span> <span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="mi">302</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// GET /thread/read
</span><span class="c1">// 通过 ID 渲染指定群组页面
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">ReadThread</span><span class="p">(</span><span class="nx">writer</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">request</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">vals</span> <span class="o">:=</span> <span class="nx">request</span><span class="p">.</span><span class="nx">URL</span><span class="p">.</span><span class="nf">Query</span><span class="p">()</span>
    <span class="nx">uuid</span> <span class="o">:=</span> <span class="nx">vals</span><span class="p">.</span><span class="nf">Get</span><span class="p">(</span><span class="s">&#34;id&#34;</span><span class="p">)</span>
    <span class="nx">thread</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">models</span><span class="p">.</span><span class="nf">ThreadByUUID</span><span class="p">(</span><span class="nx">uuid</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Cannot read thread&#34;</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">session</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">request</span><span class="p">)</span>
        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="nf">generateHTML</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">thread</span><span class="p">,</span> <span class="s">&#34;layout&#34;</span><span class="p">,</span> <span class="s">&#34;navbar&#34;</span><span class="p">,</span> <span class="s">&#34;thread&#34;</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nf">generateHTML</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">thread</span><span class="p">,</span> <span class="s">&#34;layout&#34;</span><span class="p">,</span> <span class="s">&#34;auth.navbar&#34;</span><span class="p">,</span> <span class="s">&#34;auth.thread&#34;</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>其中定义了三个方法，分别用于渲染群组创建表单页面、处理提交表单执行群组创建逻辑、以及根据指定 ID 渲染对应群组页面。前两个方法需要认证后才能访问，否则将用户重定向到登录页，群组详情页不需要认证即可访问，不过会根据是否认证返回不同的视图模板。</p>
<p>在这里，仍然通过辅助函数 <code>session</code> 判断用户是否认证，其他的业务逻辑也都非常简单，无非是获取表单输入、查询数据库、写入数据库、返回响应视图等操作，后面我们会在介绍处理 HTTP 请求时详细解释其中的细节，这里，我们先了解下全貌即可。</p>
<h3 id="12-视图模板">1.2 视图模板</h3>
<p>然后我们需要创建几个新的视图模板，在 <code>views</code> 目录下 <code>new.thread.html</code> 来编写创建群组表单：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html">{{ define &#34;content&#34; }}

	<span class="p">&lt;</span><span class="nt">form</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;form&#34;</span> <span class="na">action</span><span class="o">=</span><span class="s">&#34;/thread/create&#34;</span> <span class="na">method</span><span class="o">=</span><span class="s">&#34;post&#34;</span><span class="p">&gt;</span>
		<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;lead&#34;</span><span class="p">&gt;</span>Start a new thread with the following topic<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
		<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-group&#34;</span><span class="p">&gt;</span>
			<span class="p">&lt;</span><span class="nt">textarea</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-control&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;topic&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;topic&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Thread topic here&#34;</span> <span class="na">rows</span><span class="o">=</span><span class="s">&#34;4&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">textarea</span><span class="p">&gt;</span>
			<span class="p">&lt;</span><span class="nt">br</span><span class="p">/&gt;</span>
			<span class="p">&lt;</span><span class="nt">br</span><span class="p">/&gt;</span>
			<span class="p">&lt;</span><span class="nt">button</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;btn btn-lg btn-primary pull-right&#34;</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span><span class="p">&gt;</span>Start this thread<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
		<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
	<span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>

{{ end }}
</code></pre></td></tr></table>
</div>
</div><p>然后创建 <code>thread.html</code> 编写未认证情况下渲染的群组详情页视图（其中还包含了对群组主题的遍历和渲染）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-HTML" data-lang="HTML">{{ define &#34;content&#34; }}

<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;panel panel-default&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;panel-heading&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;lead&#34;</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">i</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;fa fa-comment-o&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">i</span><span class="p">&gt;</span> {{ .Topic }}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;pull-right&#34;</span><span class="p">&gt;</span>
      Started by {{ .User.Name }} - {{ .CreatedAtDate }}
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  
  {{ range .Posts }}
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;panel-body&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;lead&#34;</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">i</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;fa fa-comment&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">i</span><span class="p">&gt;</span> {{ .Body }}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;pull-right&#34;</span><span class="p">&gt;</span>
      {{ .User.Name }} - {{ .CreatedAtDate }}
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>    
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  {{ end }}    

<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

{{ end }}
</code></pre></td></tr></table>
</div>
</div><p>以及 <code>auth.thread.html</code> 编写认证后的群组详情页视图（在未认证视图模板的基础上新增了提交主题的表单区块）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html">{{ define &#34;content&#34; }}

	<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;panel panel-default&#34;</span><span class="p">&gt;</span>
		<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;panel-heading&#34;</span><span class="p">&gt;</span>
			<span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;lead&#34;</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">i</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;fa fa-comment-o&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">i</span><span class="p">&gt;</span> {{ .Topic }}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
			<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;pull-right&#34;</span><span class="p">&gt;</span>
				Started by {{ .User.Name }} - {{ .CreatedAtDate }}
			<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

		<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

        {{ range .Posts }}
			<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;panel-body&#34;</span><span class="p">&gt;</span>
				<span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;lead&#34;</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">i</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;fa fa-comment&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">i</span><span class="p">&gt;</span> {{ .Body }}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
				<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;pull-right&#34;</span><span class="p">&gt;</span>
                    {{ .User.Name }} - {{ .CreatedAtDate }}
				<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
			<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        {{ end }}

	<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

	<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;panel panel-info&#34;</span><span class="p">&gt;</span>
		<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;panel-body&#34;</span><span class="p">&gt;</span>
			<span class="p">&lt;</span><span class="nt">form</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;form&#34;</span> <span class="na">action</span><span class="o">=</span><span class="s">&#34;/thread/post&#34;</span> <span class="na">method</span><span class="o">=</span><span class="s">&#34;post&#34;</span><span class="p">&gt;</span>
				<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-group&#34;</span><span class="p">&gt;</span>
					<span class="p">&lt;</span><span class="nt">textarea</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-control&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;body&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;body&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Write your reply here&#34;</span> <span class="na">rows</span><span class="o">=</span><span class="s">&#34;3&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">textarea</span><span class="p">&gt;</span>
					<span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;hidden&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;uuid&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;{{ .Uuid }}&#34;</span><span class="p">&gt;</span>
					<span class="p">&lt;</span><span class="nt">br</span><span class="p">/&gt;</span>
					<span class="p">&lt;</span><span class="nt">button</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;btn btn-primary pull-right&#34;</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span><span class="p">&gt;</span>Reply<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
				<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
			<span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>
		<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
	<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

{{ end }}
</code></pre></td></tr></table>
</div>
</div><h3 id="13-注册路由">1.3 注册路由</h3>
<p>最后在 <code>routes/routes.go</code> 中注册群组相关路由：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">var</span> <span class="nx">webRoutes</span> <span class="p">=</span> <span class="nx">WebRoutes</span><span class="p">{</span>
    <span class="o">...</span> <span class="c1">// 其他路由
</span><span class="c1"></span>    <span class="p">{</span>
            <span class="s">&#34;newThread&#34;</span><span class="p">,</span>
            <span class="s">&#34;GET&#34;</span><span class="p">,</span>
            <span class="s">&#34;/thread/new&#34;</span><span class="p">,</span>
            <span class="nx">handlers</span><span class="p">.</span><span class="nx">NewThread</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="s">&#34;createThread&#34;</span><span class="p">,</span>
        <span class="s">&#34;POST&#34;</span><span class="p">,</span>
        <span class="s">&#34;/thread/create&#34;</span><span class="p">,</span>
        <span class="nx">handlers</span><span class="p">.</span><span class="nx">CreateThread</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="s">&#34;readThread&#34;</span><span class="p">,</span>
        <span class="s">&#34;GET&#34;</span><span class="p">,</span>
        <span class="s">&#34;/thread/read&#34;</span><span class="p">,</span>
        <span class="nx">handlers</span><span class="p">.</span><span class="nx">ReadThread</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="14-测试群组创建和浏览">1.4 测试群组创建和浏览</h3>
<p>这样，我们就完成了在线论坛项目群组创建和浏览的所有相关路由、处理器、视图编码，重新启动 HTTP 服务器，就可以在首页点击「Start a thread」链接创建新的群组了：</p>
<p></p>
<p>如果没有登录，会先跳转到登录页面，登录之后再次点击该链接就可以进入群组创建页面：</p>
<p></p>
<p>我们在输入框中输入群组主题「Golang」并点击右下角提交按钮，就可以成功创建一个新的群组并在首页看到了：</p>
<p>！</p>
<p>然后，我们可以点击该群组的「Read more」链接进入群组详情页：</p>
<p></p>
<p>目前还没有任何主题，接下来，我们来编写创建主题的后端处理器方法和路由实现。</p>
<h2 id="2-创建新主题">2. 创建新主题</h2>
<h3 id="21-处理器方法">2.1 处理器方法</h3>
<p>我们在 <code>handlers</code> 目录下新增 <code>post.go</code> 来存放主题相关处理器方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">handlers</span>

<span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;fmt&#34;</span>
    <span class="s">&#34;github.com/xueyuanjun/chitchat/models&#34;</span>
    <span class="s">&#34;net/http&#34;</span>
<span class="p">)</span>

<span class="c1">// POST /thread/post
</span><span class="c1">// 在指定群组下创建新主题
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">PostThread</span><span class="p">(</span><span class="nx">writer</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">request</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">sess</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">session</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">request</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">http</span><span class="p">.</span><span class="nf">Redirect</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">request</span><span class="p">,</span> <span class="s">&#34;/login&#34;</span><span class="p">,</span> <span class="mi">302</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">err</span> <span class="p">=</span> <span class="nx">request</span><span class="p">.</span><span class="nf">ParseForm</span><span class="p">()</span>
        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Cannot parse form&#34;</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="nx">user</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">sess</span><span class="p">.</span><span class="nf">User</span><span class="p">()</span>
        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Cannot get user from session&#34;</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="nx">body</span> <span class="o">:=</span> <span class="nx">request</span><span class="p">.</span><span class="nf">PostFormValue</span><span class="p">(</span><span class="s">&#34;body&#34;</span><span class="p">)</span>
        <span class="nx">uuid</span> <span class="o">:=</span> <span class="nx">request</span><span class="p">.</span><span class="nf">PostFormValue</span><span class="p">(</span><span class="s">&#34;uuid&#34;</span><span class="p">)</span>
        <span class="nx">thread</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">models</span><span class="p">.</span><span class="nf">ThreadByUUID</span><span class="p">(</span><span class="nx">uuid</span><span class="p">)</span>
        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Cannot read thread&#34;</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">user</span><span class="p">.</span><span class="nf">CreatePost</span><span class="p">(</span><span class="nx">thread</span><span class="p">,</span> <span class="nx">body</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Cannot create post&#34;</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="nx">url</span> <span class="o">:=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprint</span><span class="p">(</span><span class="s">&#34;/thread/read?id=&#34;</span><span class="p">,</span> <span class="nx">uuid</span><span class="p">)</span>
        <span class="nx">http</span><span class="p">.</span><span class="nf">Redirect</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">request</span><span class="p">,</span> <span class="nx">url</span><span class="p">,</span> <span class="mi">302</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>我们只定义了一个创建主题的处理器方法，在该处理器方法中，仍然会验证用户是否已认证，只有认证用户才能创建主题，我们最后会调用 <code>user.CreatePost</code> 方法根据群组 ID、用户 ID 和主题内容创建新的主题记录，保存成功后，会返回创建该主题的群组详情页，并将与该群组关联的所有主题渲染出来。关于数据库和视图模板引擎的语法细节，后面我们会在对应的独立教程中详细介绍。</p>
<h3 id="22-注册路由">2.2 注册路由</h3>
<p>由于主题没有独立的视图模板，所以我们只需要在路由文件中注册创建主题对应的路由就可以了：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="p">{</span>
    <span class="s">&#34;postThread&#34;</span><span class="p">,</span>
    <span class="s">&#34;POST&#34;</span><span class="p">,</span>
    <span class="s">&#34;/thread/post&#34;</span><span class="p">,</span>
    <span class="nx">handlers</span><span class="p">.</span><span class="nx">PostThread</span><span class="p">,</span>
<span class="p">},</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="23-测试主题创建">2.3 测试主题创建</h3>
<p>再次重启 HTTP 服务器，就可以在之前的群组详情页创建新主题了：</p>
<p></p>
<p>点击「REPLY」按钮提交，页面会刷新并渲染主题内容：</p>
<p></p>
<p>回到论坛首页，你可以看到每个群组下的主题数目：</p>
<p></p>]]></description></item><item><title>基于Go语言开发在线论坛4-通过Cookie和Session实现用户认证</title><link>https://shuzang.github.io/development-of-online-forum-based-on-golang-4-user-authentication/</link><pubDate>Thu, 04 Jun 2020 11:01:00 +0800</pubDate><author>作者</author><guid>https://shuzang.github.io/development-of-online-forum-based-on-golang-4-user-authentication/</guid><description><![CDATA[<p>上篇演示了首页路由、处理器、视图模板的实现，接着就要实现群组、主题的增删查改，不过，需要在认证后才能执行这些操作，所以本篇介绍如何实现用户认证相关功能。</p>
<h2 id="1-全局辅助函数">1. 全局辅助函数</h2>
<p>我们先在 <code>handlers</code> 目录下创建一个 <code>helper.go</code> 文件，用于定义一些全局辅助函数（主要用在处理器中）：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">handlers</span>

<span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;errors&#34;</span>
    <span class="s">&#34;fmt&#34;</span>
    <span class="s">&#34;github.com/xueyuanjun/chitchat/models&#34;</span>
    <span class="s">&#34;html/template&#34;</span>
    <span class="s">&#34;net/http&#34;</span>
<span class="p">)</span>

<span class="c1">// 通过 Cookie 判断用户是否已登录
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">session</span><span class="p">(</span><span class="nx">writer</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">request</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">(</span><span class="nx">sess</span> <span class="nx">models</span><span class="p">.</span><span class="nx">Session</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">cookie</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">request</span><span class="p">.</span><span class="nf">Cookie</span><span class="p">(</span><span class="s">&#34;_cookie&#34;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">sess</span> <span class="p">=</span> <span class="nx">models</span><span class="p">.</span><span class="nx">Session</span><span class="p">{</span><span class="nx">Uuid</span><span class="p">:</span> <span class="nx">cookie</span><span class="p">.</span><span class="nx">Value</span><span class="p">}</span>
        <span class="k">if</span> <span class="nx">ok</span><span class="p">,</span> <span class="nx">_</span> <span class="o">:=</span> <span class="nx">sess</span><span class="p">.</span><span class="nf">Check</span><span class="p">();</span> <span class="p">!</span><span class="nx">ok</span> <span class="p">{</span>
            <span class="nx">err</span> <span class="p">=</span> <span class="nx">errors</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;Invalid session&#34;</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span>
<span class="p">}</span>

<span class="c1">// 解析 HTML 模板（应对需要传入多个模板文件的情况，避免重复编写模板代码）
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">parseTemplateFiles</span><span class="p">(</span><span class="nx">filenames</span> <span class="o">...</span><span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">template</span><span class="p">.</span><span class="nx">Template</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">files</span> <span class="p">[]</span><span class="kt">string</span>
    <span class="nx">t</span> <span class="p">=</span> <span class="nx">template</span><span class="p">.</span><span class="nf">New</span><span class="p">(</span><span class="s">&#34;layout&#34;</span><span class="p">)</span>
    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">file</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">filenames</span> <span class="p">{</span>
        <span class="nx">files</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">files</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;views/%s.html&#34;</span><span class="p">,</span> <span class="nx">file</span><span class="p">))</span>
    <span class="p">}</span>
    <span class="nx">t</span> <span class="p">=</span> <span class="nx">template</span><span class="p">.</span><span class="nf">Must</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nf">ParseFiles</span><span class="p">(</span><span class="nx">files</span><span class="o">...</span><span class="p">))</span>
    <span class="k">return</span>
<span class="p">}</span>

<span class="c1">// 生成响应 HTML
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">generateHTML</span><span class="p">(</span><span class="nx">writer</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">data</span> <span class="kd">interface</span><span class="p">{},</span> <span class="nx">filenames</span> <span class="o">...</span><span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">files</span> <span class="p">[]</span><span class="kt">string</span>
    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">file</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">filenames</span> <span class="p">{</span>
        <span class="nx">files</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">files</span><span class="p">,</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;views/%s.html&#34;</span><span class="p">,</span> <span class="nx">file</span><span class="p">))</span>
    <span class="p">}</span>

    <span class="nx">templates</span> <span class="o">:=</span> <span class="nx">template</span><span class="p">.</span><span class="nf">Must</span><span class="p">(</span><span class="nx">template</span><span class="p">.</span><span class="nf">ParseFiles</span><span class="p">(</span><span class="nx">files</span><span class="o">...</span><span class="p">))</span>
    <span class="nx">templates</span><span class="p">.</span><span class="nf">ExecuteTemplate</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="s">&#34;layout&#34;</span><span class="p">,</span> <span class="nx">data</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 返回版本号
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Version</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
    <span class="k">return</span> <span class="s">&#34;0.1&#34;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>目前提供了版本信息，判断用户是否登录，HTML 模板的解析与生成等逻辑，我们将 HTML 模板解析与生成逻辑提取出来，主要是为了避免重复编写类似的模板代码，比如现在，我们可以将 <code>handlers/index.go</code> 中的 <code>Index</code> 方法改写如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">Index</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">threads</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">models</span><span class="p">.</span><span class="nf">Threads</span><span class="p">();</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nf">generateHTML</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="nx">threads</span><span class="p">,</span> <span class="s">&#34;layout&#34;</span><span class="p">,</span> <span class="s">&#34;navbar&#34;</span><span class="p">,</span> <span class="s">&#34;index&#34;</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>是不是看起来简单多了，更重要的是提高了代码的复用性。</p>
<p>在 <code>session</code> 函数中，通过从请求中获取指定 Cookie 字段里面存放的 Session ID，然后从 Session 存储器（这里存储驱动是数据库）查询对应 Session 是否存在来判断用户是否已认证，如果已认证则返回的 <code>sess</code> 不为空。</p>
<h2 id="2-用户认证相关处理器">2. 用户认证相关处理器</h2>
<h3 id="21-编写处理器代码">2.1 编写处理器代码</h3>
<p>接下来，在 <code>handlers</code> 目录下创建一个 <code>auth.go</code> 来存放用户认证相关处理器：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">handlers</span>

<span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;fmt&#34;</span>
    <span class="s">&#34;github.com/xueyuanjun/chitchat/models&#34;</span>
    <span class="s">&#34;net/http&#34;</span>
<span class="p">)</span>

<span class="c1">// GET /login
</span><span class="c1">// 登录页面
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Login</span><span class="p">(</span><span class="nx">writer</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">request</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">t</span> <span class="o">:=</span> <span class="nf">parseTemplateFiles</span><span class="p">(</span><span class="s">&#34;auth.layout&#34;</span><span class="p">,</span> <span class="s">&#34;navbar&#34;</span><span class="p">,</span> <span class="s">&#34;login&#34;</span><span class="p">)</span>
    <span class="nx">t</span><span class="p">.</span><span class="nf">Execute</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// GET /signup
</span><span class="c1">// 注册页面
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Signup</span><span class="p">(</span><span class="nx">writer</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">request</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
    <span class="nf">generateHTML</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="kc">nil</span><span class="p">,</span> <span class="s">&#34;auth.layout&#34;</span><span class="p">,</span> <span class="s">&#34;navbar&#34;</span><span class="p">,</span> <span class="s">&#34;signup&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// POST /signup
</span><span class="c1">// 注册新用户
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">SignupAccount</span><span class="p">(</span><span class="nx">writer</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">request</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">err</span> <span class="o">:=</span> <span class="nx">request</span><span class="p">.</span><span class="nf">ParseForm</span><span class="p">()</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Cannot parse form&#34;</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">user</span> <span class="o">:=</span> <span class="nx">models</span><span class="p">.</span><span class="nx">User</span><span class="p">{</span>
        <span class="nx">Name</span><span class="p">:</span>     <span class="nx">request</span><span class="p">.</span><span class="nf">PostFormValue</span><span class="p">(</span><span class="s">&#34;name&#34;</span><span class="p">),</span>
        <span class="nx">Email</span><span class="p">:</span>    <span class="nx">request</span><span class="p">.</span><span class="nf">PostFormValue</span><span class="p">(</span><span class="s">&#34;email&#34;</span><span class="p">),</span>
        <span class="nx">Password</span><span class="p">:</span> <span class="nx">request</span><span class="p">.</span><span class="nf">PostFormValue</span><span class="p">(</span><span class="s">&#34;password&#34;</span><span class="p">),</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">user</span><span class="p">.</span><span class="nf">Create</span><span class="p">();</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Cannot create user&#34;</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">http</span><span class="p">.</span><span class="nf">Redirect</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">request</span><span class="p">,</span> <span class="s">&#34;/login&#34;</span><span class="p">,</span> <span class="mi">302</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// POST /authenticate
</span><span class="c1">// 通过邮箱和密码字段对用户进行认证
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Authenticate</span><span class="p">(</span><span class="nx">writer</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">request</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">err</span> <span class="o">:=</span> <span class="nx">request</span><span class="p">.</span><span class="nf">ParseForm</span><span class="p">()</span>
    <span class="nx">user</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">models</span><span class="p">.</span><span class="nf">UserByEmail</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nf">PostFormValue</span><span class="p">(</span><span class="s">&#34;email&#34;</span><span class="p">))</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Cannot find user&#34;</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="nx">user</span><span class="p">.</span><span class="nx">Password</span> <span class="o">==</span> <span class="nx">models</span><span class="p">.</span><span class="nf">Encrypt</span><span class="p">(</span><span class="nx">request</span><span class="p">.</span><span class="nf">PostFormValue</span><span class="p">(</span><span class="s">&#34;password&#34;</span><span class="p">))</span> <span class="p">{</span>
        <span class="nx">session</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">user</span><span class="p">.</span><span class="nf">CreateSession</span><span class="p">()</span>
        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Cannot create session&#34;</span><span class="p">)</span>
        <span class="p">}</span>
        <span class="nx">cookie</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Cookie</span><span class="p">{</span>
            <span class="nx">Name</span><span class="p">:</span>     <span class="s">&#34;_cookie&#34;</span><span class="p">,</span>
            <span class="nx">Value</span><span class="p">:</span>    <span class="nx">session</span><span class="p">.</span><span class="nx">Uuid</span><span class="p">,</span>
            <span class="nx">HttpOnly</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="p">}</span>
        <span class="nx">http</span><span class="p">.</span><span class="nf">SetCookie</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">cookie</span><span class="p">)</span>
        <span class="nx">http</span><span class="p">.</span><span class="nf">Redirect</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">request</span><span class="p">,</span> <span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="mi">302</span><span class="p">)</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="nx">http</span><span class="p">.</span><span class="nf">Redirect</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">request</span><span class="p">,</span> <span class="s">&#34;/login&#34;</span><span class="p">,</span> <span class="mi">302</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// GET /logout
</span><span class="c1">// 用户退出
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Logout</span><span class="p">(</span><span class="nx">writer</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">request</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">cookie</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">request</span><span class="p">.</span><span class="nf">Cookie</span><span class="p">(</span><span class="s">&#34;_cookie&#34;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ErrNoCookie</span> <span class="p">{</span>
        <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Failed to get cookie&#34;</span><span class="p">)</span>
        <span class="nx">session</span> <span class="o">:=</span> <span class="nx">models</span><span class="p">.</span><span class="nx">Session</span><span class="p">{</span><span class="nx">Uuid</span><span class="p">:</span> <span class="nx">cookie</span><span class="p">.</span><span class="nx">Value</span><span class="p">}</span>
        <span class="nx">session</span><span class="p">.</span><span class="nf">DeleteByUUID</span><span class="p">()</span>
    <span class="p">}</span>
    <span class="nx">http</span><span class="p">.</span><span class="nf">Redirect</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">request</span><span class="p">,</span> <span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="mi">302</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>上述代码中定义了用户注册、登录、退出相关业务逻辑，非常简单，和 Laravel 认证脚手架生成的默认认证相关控制器非常相似。</p>
<h3 id="22-用户注册">2.2 用户注册</h3>
<p>用户注册逻辑比较简单，无非是填写注册表单（<code>Signup</code> 处理器方法），提交注册按钮将用户信息保存到数据库（<code>SignupAccount</code> 处理器方法）。</p>
<h3 id="23-用户登录">2.3 用户登录</h3>
<p>接下来，服务端会将用户重定向到登录页面（<code>Login</code> 处理器方法），用户填写登录表单后，就可以通过 <code>Authenticate</code> 处理器方法执行认证操作。</p>
<p>用户认证是基于 Cookie + Session 实现的，Session 的数据结构如下所示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">Session</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">Id</span>        <span class="kt">int</span>
    <span class="nx">Uuid</span>      <span class="kt">string</span>
    <span class="nx">Email</span>     <span class="kt">string</span>
    <span class="nx">UserId</span>    <span class="kt">int</span>
    <span class="nx">CreatedAt</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>通过 <code>Uuid</code> 字段可以唯一标识这个 Session，因此可以看作是对外可见的全局 Session ID，在客户端 Cookie 存储的 Session ID 也是这个 <code>Uuid</code>。当用户认证成功之后，就会创建 Session，有了 Session 之后，就可以创建 Cookie 并写到响应中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">cookie</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Cookie</span><span class="p">{</span>
    <span class="nx">Name</span><span class="p">:</span>     <span class="s">&#34;_cookie&#34;</span><span class="p">,</span>
    <span class="nx">Value</span><span class="p">:</span>    <span class="nx">session</span><span class="p">.</span><span class="nx">Uuid</span><span class="p">,</span>
    <span class="nx">HttpOnly</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
<span class="p">}</span>
<span class="nx">http</span><span class="p">.</span><span class="nf">SetCookie</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">cookie</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>这样，下次用户访问在线论坛页面就会在请求头中带上包含 Session ID 的 Cookie，服务端通过解析这个 Uuid 并查询 Session 存储器（这里存储驱动是数据库）判断该用户 Session 是否存在，如果存在则用户认证通过，也就是前面辅助函数 <code>session</code> 所做的事情。</p>
<h3 id="23-用户退出">2.3 用户退出</h3>
<p>上述 Cookie 未设置过期时间，所以生命周期和 Session 一致，当浏览器关闭时，Cookie 就自动删除，下次打开浏览器需要重新认证。</p>
<p>最后用户退出处理器方法 <code>Logout</code> 方法则是方便用户主动退出，当用户点击退出按钮，可以执行该处理器方法销毁当前用户 Session 和认证 Cookie，并将用户重定向到首页。</p>
<h2 id="3-用户认证相关视图模板">3. 用户认证相关视图模板</h2>
<p>定义好认证处理器后，我们来编写与认证相关的视图模板，主要是登录页面和注册页面，在 <code>views</code> 目录下新增 <code>login.html</code> 编写登录页面：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html">{{ define &#34;content&#34; }}

<span class="p">&lt;</span><span class="nt">form</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-signin center&#34;</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;form&#34;</span> <span class="na">action</span><span class="o">=</span><span class="s">&#34;/authenticate&#34;</span> <span class="na">method</span><span class="o">=</span><span class="s">&#34;post&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">h2</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-signin-heading&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">i</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;fa fa-comments-o&#34;</span><span class="p">&gt;</span>
      ChitChat
    <span class="p">&lt;/</span><span class="nt">i</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;email&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;email&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-control&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Email address&#34;</span> <span class="na">required</span> <span class="na">autofocus</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;password&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;password&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-control&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Password&#34;</span> <span class="na">required</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">br</span><span class="p">/&gt;</span>
  <span class="p">&lt;</span><span class="nt">button</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;btn btn-lg btn-primary btn-block&#34;</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span><span class="p">&gt;</span>Sign in<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">br</span><span class="p">/&gt;</span>
  <span class="p">&lt;</span><span class="nt">a</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;lead pull-right&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;/signup&#34;</span><span class="p">&gt;</span>Sign up<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>

{{ end }}
</code></pre></td></tr></table>
</div>
</div><p>然后创建 <code>signup.html</code> 编写注册页面：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html">{{ define &#34;content&#34; }}

<span class="p">&lt;</span><span class="nt">form</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-signin&#34;</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;form&#34;</span> <span class="na">action</span><span class="o">=</span><span class="s">&#34;/signup_account&#34;</span> <span class="na">method</span><span class="o">=</span><span class="s">&#34;post&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">h2</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-signin-heading&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">i</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;fa fa-comments-o&#34;</span><span class="p">&gt;</span>
      ChitChat
    <span class="p">&lt;/</span><span class="nt">i</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;lead&#34;</span><span class="p">&gt;</span>Sign up for an account below<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;name&#34;</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;name&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-control&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Name&#34;</span> <span class="na">required</span> <span class="na">autofocus</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;email&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;email&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-control&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Email address&#34;</span> <span class="na">required</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;password&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;password&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;form-control&#34;</span> <span class="na">placeholder</span><span class="o">=</span><span class="s">&#34;Password&#34;</span> <span class="na">required</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">button</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;btn btn-lg btn-primary btn-block&#34;</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;submit&#34;</span><span class="p">&gt;</span>Sign up<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">form</span><span class="p">&gt;</span>

{{ end }}
</code></pre></td></tr></table>
</div>
</div><p>此外，我们还为登录和注册页面定义了单独的布局模板 <code>auth.layout.html</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html">{{ define &#34;layout&#34; }}

<span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;X-UA-Compatible&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;IE=9&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>ChitChat<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">link</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;/static/css/bootstrap.min.css&#34;</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">link</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;/static/css/font-awesome.min.css&#34;</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">link</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;/static/css/login.css&#34;</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;container&#34;</span><span class="p">&gt;</span>
      
      {{ template &#34;content&#34; . }}
      
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span> <span class="c">&lt;!-- /container --&gt;</span>
    
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;/static/js/jquery-2.1.1.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;/static/js/bootstrap.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>

{{ end }}
</code></pre></td></tr></table>
</div>
</div><p>以上视图模板已经在认证处理器方法中引用。</p>
<h2 id="4-注册用户认证路由">4. 注册用户认证路由</h2>
<p>最后，我们需要在 <code>routes/routes.go</code> 中注册用户认证相关路由：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// 定义所有 Web 路由
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">webRoutes</span> <span class="p">=</span> <span class="nx">WebRoutes</span><span class="p">{</span>
    <span class="o">...</span> <span class="c1">// 其他路由
</span><span class="c1"></span>    <span class="p">{</span>
        <span class="s">&#34;signup&#34;</span><span class="p">,</span>
        <span class="s">&#34;GET&#34;</span><span class="p">,</span>
        <span class="s">&#34;/signup&#34;</span><span class="p">,</span>
        <span class="nx">handlers</span><span class="p">.</span><span class="nx">Signup</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="s">&#34;signupAccount&#34;</span><span class="p">,</span>
        <span class="s">&#34;POST&#34;</span><span class="p">,</span>
        <span class="s">&#34;/signup_account&#34;</span><span class="p">,</span>
        <span class="nx">handlers</span><span class="p">.</span><span class="nx">SignupAccount</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="s">&#34;login&#34;</span><span class="p">,</span>
        <span class="s">&#34;GET&#34;</span><span class="p">,</span>
        <span class="s">&#34;/login&#34;</span><span class="p">,</span>
        <span class="nx">handlers</span><span class="p">.</span><span class="nx">Login</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="s">&#34;auth&#34;</span><span class="p">,</span>
        <span class="s">&#34;POST&#34;</span><span class="p">,</span>
        <span class="s">&#34;/authenticate&#34;</span><span class="p">,</span>
        <span class="nx">handlers</span><span class="p">.</span><span class="nx">Authenticate</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="p">{</span>
        <span class="s">&#34;logout&#34;</span><span class="p">,</span>
        <span class="s">&#34;GET&#34;</span><span class="p">,</span>
        <span class="s">&#34;/logout&#34;</span><span class="p">,</span>
        <span class="nx">handlers</span><span class="p">.</span><span class="nx">Logout</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="5-测试用户认证功能">5. 测试用户认证功能</h2>
<p>这样一来，我们就可以重启应用并访问用户注册页面 <code>http://localhost:8080/signup</code> 进行注册了：</p>
<p></p>
<p>注册成功后，页面会跳转到登录页面 <code>http://localhost:8080/login</code>：</p>
<p></p>
<p>输入刚才填写的注册邮箱和密码，点击「SIGN IN」按钮登录成功后，页面跳转到首页。</p>
<p>我们还没有对首页做额外的认证判断和处理，所以此时显示的页面效果和之前一样，为了区别用户认证与未认证状态，我们可以基于认证状态渲染不同的导航模板，对于认证用户，渲染 <code>auth.navbar</code> 模板，对于未认证用户，还是保持和之前一样，为此，我们需要在 views 目录下新增 <code>auth.navbar.html</code> 视图：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html">{{ define &#34;navbar&#34; }}
<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;navbar navbar-default navbar-static-top&#34;</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;navigation&#34;</span><span class="p">&gt;</span>
  <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;container&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;navbar-header&#34;</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">button</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;button&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;navbar-toggle collapsed&#34;</span> <span class="na">data-toggle</span><span class="o">=</span><span class="s">&#34;collapse&#34;</span> <span class="na">data-target</span><span class="o">=</span><span class="s">&#34;.navbar-collapse&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;sr-only&#34;</span><span class="p">&gt;</span>Toggle navigation<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;icon-bar&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;icon-bar&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;icon-bar&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">a</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;navbar-brand&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;/&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">i</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;fa fa-comments-o&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">i</span><span class="p">&gt;</span>
        ChitChat
      <span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;navbar-collapse collapse&#34;</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">ul</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav navbar-nav&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;/&#34;</span><span class="p">&gt;</span>Home<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
      <span class="p">&lt;</span><span class="nt">ul</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav navbar-nav navbar-right&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;/logout&#34;</span><span class="p">&gt;</span>Logout<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
      <span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
  <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
{{ end }}
</code></pre></td></tr></table>
</div>
</div><p>同时还要修改 <code>handlers.Index</code> 处理器方法实现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="nf">Index</span><span class="p">(</span><span class="nx">writer</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">request</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">threads</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">models</span><span class="p">.</span><span class="nf">Threads</span><span class="p">();</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nf">session</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">request</span><span class="p">)</span>
        <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="nf">generateHTML</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">threads</span><span class="p">,</span> <span class="s">&#34;layout&#34;</span><span class="p">,</span> <span class="s">&#34;navbar&#34;</span><span class="p">,</span> <span class="s">&#34;index&#34;</span><span class="p">)</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="nf">generateHTML</span><span class="p">(</span><span class="nx">writer</span><span class="p">,</span> <span class="nx">threads</span><span class="p">,</span> <span class="s">&#34;layout&#34;</span><span class="p">,</span> <span class="s">&#34;auth.navbar&#34;</span><span class="p">,</span> <span class="s">&#34;index&#34;</span><span class="p">)</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>再次重启应用，刷新首页，导航条的展示效果就不一样了：</p>
<p></p>
<p>此时显示的是「Logout」链接，点击即可退出应用：</p>
<p></p>]]></description></item><item><title>基于Go语言开发在线论坛3-访问论坛首页</title><link>https://shuzang.github.io/development-of-online-forum-based-on-golang-3-visit-forum-homepage/</link><pubDate>Fri, 29 May 2020 09:08:00 +0800</pubDate><author>作者</author><guid>https://shuzang.github.io/development-of-online-forum-based-on-golang-3-visit-forum-homepage/</guid><description><![CDATA[<p>前两篇分别介绍了整体设计及数据表的创建、模型类的编写，本篇了解如何在服务端处理用户请求，并启动论坛首页。文章转自学院君的教程，略有改动。</p>
<p></p>
<p>用户请求的处理流程如下：</p>
<ol>
<li>客户端发送请求；</li>
<li>服务端路由器（multiplexer）将请求分发给指定处理器（handler）；</li>
<li>处理器处理请求，完成对应的业务逻辑；</li>
<li>处理器调用模板引擎生成 HTML 并将响应返回给客户端。</li>
</ol>
<p>接下来我们按照这个流程来编写服务端代码。</p>
<h2 id="1-路由器定义">1. 路由器定义</h2>
<p>这里我们基于 <a href="https://github.com/gorilla/mux" target="_blank" rel="noopener noreffer">gorilla/mux</a> 来实现路由器，所以需要安装对应依赖：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ go get -u github.com/gorilla/mux
</code></pre></td></tr></table>
</div>
</div><p>将路由器定义在 <code>routes</code> 目录下的 <code>router.go</code> 中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">routes</span>

<span class="kn">import</span> <span class="s">&#34;github.com/gorilla/mux&#34;</span>

<span class="c1">// 返回一个 mux.Router 类型指针，从而可以当作处理器使用
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">NewRouter</span><span class="p">()</span> <span class="o">*</span><span class="nx">mux</span><span class="p">.</span><span class="nx">Router</span> <span class="p">{</span>

    <span class="c1">// 创建 mux.Router 路由器示例
</span><span class="c1"></span>    <span class="nx">router</span> <span class="o">:=</span> <span class="nx">mux</span><span class="p">.</span><span class="nf">NewRouter</span><span class="p">().</span><span class="nf">StrictSlash</span><span class="p">(</span><span class="kc">true</span><span class="p">)</span>

    <span class="c1">// 遍历 web.go 中定义的所有 webRoutes
</span><span class="c1"></span>    <span class="k">for</span> <span class="nx">_</span><span class="p">,</span> <span class="nx">route</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">webRoutes</span> <span class="p">{</span>
        <span class="c1">// 将每个 web 路由应用到路由器
</span><span class="c1"></span>        <span class="nx">router</span><span class="p">.</span><span class="nf">Methods</span><span class="p">(</span><span class="nx">route</span><span class="p">.</span><span class="nx">Method</span><span class="p">).</span>
            <span class="nf">Path</span><span class="p">(</span><span class="nx">route</span><span class="p">.</span><span class="nx">Pattern</span><span class="p">).</span>
            <span class="nf">Name</span><span class="p">(</span><span class="nx">route</span><span class="p">.</span><span class="nx">Name</span><span class="p">).</span>
            <span class="nf">Handler</span><span class="p">(</span><span class="nx">route</span><span class="p">.</span><span class="nx">HandlerFunc</span><span class="p">)</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">router</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>将所有路由定义在同一目录的 <code>routes.go</code> 中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">routes</span>

<span class="kn">import</span> <span class="s">&#34;net/http&#34;</span>

<span class="c1">// 定义一个 WebRoute 结构体用于存放单个路由
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">WebRoute</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">Name</span>        <span class="kt">string</span>
    <span class="nx">Method</span>      <span class="kt">string</span>
    <span class="nx">Pattern</span>     <span class="kt">string</span>
    <span class="nx">HandlerFunc</span> <span class="nx">http</span><span class="p">.</span><span class="nx">HandlerFunc</span>
<span class="p">}</span>

<span class="c1">// 声明 WebRoutes 切片存放所有 Web 路由
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">WebRoutes</span> <span class="p">[]</span><span class="nx">WebRoute</span>

<span class="c1">// 定义所有 Web 路由
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">webRoutes</span> <span class="p">=</span> <span class="nx">WebRoutes</span><span class="p">{</span>

<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="2-启动http服务器">2. 启动HTTP服务器</h2>
<p>最后在项目根目录下的 <code>main.go</code> 中引入上述路由器来启动 HTTP 服务器：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
    <span class="p">.</span> <span class="s">&#34;github.com/xueyuanjun/chitchat/routes&#34;</span>
    <span class="s">&#34;log&#34;</span>
    <span class="s">&#34;net/http&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span>  <span class="p">{</span>
    <span class="nf">startWebServer</span><span class="p">(</span><span class="s">&#34;8080&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 通过指定端口启动 Web 服务器
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">startWebServer</span><span class="p">(</span><span class="nx">port</span> <span class="kt">string</span><span class="p">)</span>  <span class="p">{</span>
    <span class="nx">r</span> <span class="o">:=</span> <span class="nf">NewRouter</span><span class="p">()</span>
    <span class="nx">http</span><span class="p">.</span><span class="nf">Handle</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>  <span class="c1">// 通过 router.go 中定义的路由器来分发请求
</span><span class="c1"></span>
    <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Starting HTTP service at &#34;</span> <span class="o">+</span> <span class="nx">port</span><span class="p">)</span>
    <span class="nx">err</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">ListenAndServe</span><span class="p">(</span><span class="s">&#34;:&#34;</span> <span class="o">+</span> <span class="nx">port</span><span class="p">,</span> <span class="kc">nil</span><span class="p">)</span> <span class="c1">// 启动协程监听请求
</span><span class="c1"></span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;An error occured starting HTTP listener at port &#34;</span> <span class="o">+</span> <span class="nx">port</span><span class="p">)</span>
        <span class="nx">log</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Error: &#34;</span> <span class="o">+</span> <span class="nx">err</span><span class="p">.</span><span class="nf">Error</span><span class="p">())</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这里我们指定 HTTP 服务器监听 <code>8080</code> 端口，使用的路由器正是上述 <code>router.go</code> 中 <code>NewRouter</code> 方法返回的 <code>mux.Router</code> 指针类型实例，这里可以看到引用的时候并没有带上包名前缀，之所以可以这么做是因为通过特殊符号 <code>.</code> 引入了 <code>routes</code>包，通过这种方式引入的包可以直接调用包中对外可见的变量、方法和结构体，而不需要加上包名前缀。</p>
<h2 id="3-处理静态资源">3. 处理静态资源</h2>
<p>在线论坛涉及到前端静态资源文件的处理，我们可以在 <code>startWebServer</code> 方法中新增如下这两行代码：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">r</span> <span class="o">:=</span> <span class="nf">NewRouter</span><span class="p">()</span> <span class="c1">// 通过 router.go 中定义的路由器来分发请求
</span><span class="c1"></span>
<span class="c1">// 处理静态资源文件
</span><span class="c1"></span><span class="nx">assets</span> <span class="o">:=</span> <span class="nx">http</span><span class="p">.</span><span class="nf">FileServer</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nf">Dir</span><span class="p">(</span><span class="s">&#34;public&#34;</span><span class="p">))</span>
<span class="nx">r</span><span class="p">.</span><span class="nf">PathPrefix</span><span class="p">(</span><span class="s">&#34;/static/&#34;</span><span class="p">).</span><span class="nf">Handler</span><span class="p">(</span><span class="nx">http</span><span class="p">.</span><span class="nf">StripPrefix</span><span class="p">(</span><span class="s">&#34;/static/&#34;</span><span class="p">,</span> <span class="nx">assets</span><span class="p">))</span>

<span class="nx">http</span><span class="p">.</span><span class="nf">Handle</span><span class="p">(</span><span class="s">&#34;/&#34;</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span> <span class="c1">// 应用路由器到 HTTP 服务器
</span><span class="c1"></span>
<span class="o">...</span>
</code></pre></td></tr></table>
</div>
</div><p>其中 <code>http.FileServer</code> 用于初始化文件服务器和目录为当前目录下的 <code>public</code> 目录。</p>
<p>然后在第二段代码中指定静态资源路由及处理逻辑：将 <code>/static/</code> 前缀的 URL 请求去除 <code>static</code> 前缀，然后在文件服务器查找指定文件路径是否存在（<code>public</code> 目录下的相对地址）。</p>
<p>比如 URL 请求路径为 <code>http://localhost:8080/static/css/bootstrap.min.css</code>，对应的查找路径是：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="p">&lt;</span><span class="nx">application</span> <span class="nx">root</span><span class="p">&gt;</span><span class="o">/</span><span class="nx">public</span><span class="o">/</span><span class="nx">css</span><span class="o">/</span><span class="nx">bootstrap</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">css</span>
</code></pre></td></tr></table>
</div>
</div><p>对于静态资源文件直接返回文件内容，不会进行额外处理。</p>
<h2 id="4-编写处理器实现">4. 编写处理器实现</h2>
<h3 id="41-首页处理器方法">4.1 首页处理器方法</h3>
<p>做好上述准备工作后，接下来，我们来创建论坛首页的路由处理器，在 <code>handlers</code> 目录下新增一个 <code>index.go</code> 来定义首页的处理器方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">handlers</span>

<span class="kn">import</span> <span class="p">(</span>
    <span class="s">&#34;github.com/xueyuanjun/chitchat/models&#34;</span>
    <span class="s">&#34;html/template&#34;</span>
    <span class="s">&#34;net/http&#34;</span>
<span class="p">)</span>

<span class="c1">// 论坛首页路由处理器方法
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Index</span><span class="p">(</span><span class="nx">w</span> <span class="nx">http</span><span class="p">.</span><span class="nx">ResponseWriter</span><span class="p">,</span> <span class="nx">r</span> <span class="o">*</span><span class="nx">http</span><span class="p">.</span><span class="nx">Request</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">files</span> <span class="o">:=</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;views/layout.html&#34;</span><span class="p">,</span> <span class="s">&#34;views/navbar.html&#34;</span><span class="p">,</span> <span class="s">&#34;views/index.html&#34;</span><span class="p">,}</span>
    <span class="nx">templates</span> <span class="o">:=</span> <span class="nx">template</span><span class="p">.</span><span class="nf">Must</span><span class="p">(</span><span class="nx">template</span><span class="p">.</span><span class="nf">ParseFiles</span><span class="p">(</span><span class="nx">files</span><span class="o">...</span><span class="p">))</span>
    <span class="nx">threads</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">models</span><span class="p">.</span><span class="nf">Threads</span><span class="p">();</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">templates</span><span class="p">.</span><span class="nf">ExecuteTemplate</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&#34;layout&#34;</span><span class="p">,</span> <span class="nx">threads</span><span class="p">)</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="42-创建视图模板">4.2 创建视图模板</h3>
<p>这里我们使用 Go 自带的 <code>html/template</code> 作为模板引擎，需要传入位于 <code>views</code> 目录下的视图模板文件，这里传入了多个模板文件，包括主布局文件 <code>layout.html</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html">{{ define &#34;layout&#34; }}

	<span class="cp">&lt;!DOCTYPE html&gt;</span>
	<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
	<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
		<span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span><span class="p">&gt;</span>
		<span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;X-UA-Compatible&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;IE=9&#34;</span><span class="p">&gt;</span>
		<span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1&#34;</span><span class="p">&gt;</span>
		<span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>ChitChat<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
		<span class="p">&lt;</span><span class="nt">link</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;/static/css/bootstrap.min.css&#34;</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span><span class="p">&gt;</span>
		<span class="p">&lt;</span><span class="nt">link</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;/static/css/font-awesome.min.css&#34;</span> <span class="na">rel</span><span class="o">=</span><span class="s">&#34;stylesheet&#34;</span><span class="p">&gt;</span>
	<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
	<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    {{ template &#34;navbar&#34; . }}

	<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;container&#34;</span><span class="p">&gt;</span>

        {{ template &#34;content&#34; . }}

	<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span> <span class="c">&lt;!-- /container --&gt;</span>

	<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;/static/js/jquery-2.1.1.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
	<span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;/static/js/bootstrap.min.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
	<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
	<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>

{{ end }}
</code></pre></td></tr></table>
</div>
</div><p>顶部导航模板 <code>navbar.html</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html">{{ define &#34;navbar&#34; }}
	<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;navbar navbar-default navbar-static-top&#34;</span> <span class="na">role</span><span class="o">=</span><span class="s">&#34;navigation&#34;</span><span class="p">&gt;</span>
		<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;container&#34;</span><span class="p">&gt;</span>
			<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;navbar-header&#34;</span><span class="p">&gt;</span>
				<span class="p">&lt;</span><span class="nt">button</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;button&#34;</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;navbar-toggle collapsed&#34;</span> <span class="na">data-toggle</span><span class="o">=</span><span class="s">&#34;collapse&#34;</span> <span class="na">data-target</span><span class="o">=</span><span class="s">&#34;.navbar-collapse&#34;</span><span class="p">&gt;</span>
					<span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;sr-only&#34;</span><span class="p">&gt;</span>Toggle navigation<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
					<span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;icon-bar&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
					<span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;icon-bar&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
					<span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;icon-bar&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
				<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
				<span class="p">&lt;</span><span class="nt">a</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;navbar-brand&#34;</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;/&#34;</span><span class="p">&gt;</span>
					<span class="p">&lt;</span><span class="nt">i</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;fa fa-comments-o&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">i</span><span class="p">&gt;</span>
					ChitChat
				<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
			<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
			<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;navbar-collapse collapse&#34;</span><span class="p">&gt;</span>
				<span class="p">&lt;</span><span class="nt">ul</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav navbar-nav&#34;</span><span class="p">&gt;</span>
					<span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;/&#34;</span><span class="p">&gt;</span>Home<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
				<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
				<span class="p">&lt;</span><span class="nt">ul</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;nav navbar-nav navbar-right&#34;</span><span class="p">&gt;</span>
					<span class="p">&lt;</span><span class="nt">li</span><span class="p">&gt;&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;/login&#34;</span><span class="p">&gt;</span>Login<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;&lt;/</span><span class="nt">li</span><span class="p">&gt;</span>
				<span class="p">&lt;/</span><span class="nt">ul</span><span class="p">&gt;</span>
			<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
		<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
	<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
{{ end }}
</code></pre></td></tr></table>
</div>
</div><p>以及首页视图模板 <code>index.html</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html">{{ define &#34;content&#34; }}
	<span class="p">&lt;</span><span class="nt">p</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;lead&#34;</span><span class="p">&gt;</span>
		<span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;/thread/new&#34;</span><span class="p">&gt;</span>Start a thread<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span> or join one below!
	<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>

    {{ range . }}
		<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;panel panel-default&#34;</span><span class="p">&gt;</span>
			<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;panel-heading&#34;</span><span class="p">&gt;</span>
				<span class="p">&lt;</span><span class="nt">span</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;lead&#34;</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nt">i</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;fa fa-comment-o&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">i</span><span class="p">&gt;</span> {{ .Topic }}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
			<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
			<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;panel-body&#34;</span><span class="p">&gt;</span>
				Started by {{ .User.Name }} - {{ .CreatedAtDate }} - {{ .NumReplies }} posts.
				<span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;pull-right&#34;</span><span class="p">&gt;</span>
					<span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;/thread/read?id={{.Uuid }}&#34;</span><span class="p">&gt;</span>Read more<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
				<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
			<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
		<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    {{ end }}

{{ end }}
</code></pre></td></tr></table>
</div>
</div><p>引入多个视图模板是为了提高模板代码的复用性，因为对于同一个应用的不同页面来说，可能基本布局、页面顶部导航和页面底部组件都是一样的，关于视图模板的细节，我们在后面视图模板部分会详细介绍，这里简单了解下即可。</p>
<h3 id="43-渲染视图模板">4.3 渲染视图模板</h3>
<p>我们可以从数据库查询群组数据并将该数据传递到模板文件，最后将模板视图渲染出来，对应代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="nx">threads</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">models</span><span class="p">.</span><span class="nf">Threads</span><span class="p">();</span>
<span class="k">if</span> <span class="nx">err</span> <span class="o">==</span> <span class="kc">nil</span> <span class="p">{</span>
    <span class="nx">templates</span><span class="p">.</span><span class="nf">ExecuteTemplate</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span> <span class="s">&#34;layout&#34;</span><span class="p">,</span> <span class="nx">threads</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>编译多个视图模板时，默认以第一个模板名作为最终视图模板名，所以这里第二个参数传入的是 <code>layout</code>，第三个参数传入要渲染的数据 <code>threads</code>，对应的渲染逻辑位于 <code>views/index.html</code> 中：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="p">{{</span> <span class="k">range</span> <span class="p">.</span> <span class="p">}}</span>
	<span class="p">&lt;</span><span class="nx">div</span> <span class="nx">class</span><span class="p">=</span><span class="s">&#34;panel panel-default&#34;</span><span class="p">&gt;</span>
		<span class="p">&lt;</span><span class="nx">div</span> <span class="nx">class</span><span class="p">=</span><span class="s">&#34;panel-heading&#34;</span><span class="p">&gt;</span>
			<span class="p">&lt;</span><span class="nx">span</span> <span class="nx">class</span><span class="p">=</span><span class="s">&#34;lead&#34;</span><span class="p">&gt;</span> <span class="p">&lt;</span><span class="nx">i</span> <span class="nx">class</span><span class="p">=</span><span class="s">&#34;fa fa-comment-o&#34;</span><span class="p">&gt;&lt;</span><span class="o">/</span><span class="nx">i</span><span class="p">&gt;</span> <span class="p">{{</span> <span class="p">.</span><span class="nx">Topic</span> <span class="p">}}&lt;</span><span class="o">/</span><span class="nx">span</span><span class="p">&gt;</span>
		<span class="p">&lt;</span><span class="o">/</span><span class="nx">div</span><span class="p">&gt;</span>
		<span class="p">&lt;</span><span class="nx">div</span> <span class="nx">class</span><span class="p">=</span><span class="s">&#34;panel-body&#34;</span><span class="p">&gt;</span>
			<span class="nx">Started</span> <span class="nx">by</span> <span class="p">{{</span> <span class="p">.</span><span class="nx">User</span><span class="p">.</span><span class="nx">Name</span> <span class="p">}}</span> <span class="o">-</span> <span class="p">{{</span> <span class="p">.</span><span class="nx">CreatedAtDate</span> <span class="p">}}</span> <span class="o">-</span> <span class="p">{{</span> <span class="p">.</span><span class="nx">NumReplies</span> <span class="p">}}</span> <span class="nx">posts</span><span class="p">.</span>
			<span class="p">&lt;</span><span class="nx">div</span> <span class="nx">class</span><span class="p">=</span><span class="s">&#34;pull-right&#34;</span><span class="p">&gt;</span>
				<span class="p">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="p">=</span><span class="s">&#34;/thread/read?id={{.Uuid }}&#34;</span><span class="p">&gt;</span><span class="nx">Read</span> <span class="nx">more</span><span class="p">&lt;</span><span class="o">/</span><span class="nx">a</span><span class="p">&gt;</span>
			<span class="p">&lt;</span><span class="o">/</span><span class="nx">div</span><span class="p">&gt;</span>
		<span class="p">&lt;</span><span class="o">/</span><span class="nx">div</span><span class="p">&gt;</span>
	<span class="p">&lt;</span><span class="o">/</span><span class="nx">div</span><span class="p">&gt;</span>
<span class="p">{{</span> <span class="nx">end</span> <span class="p">}}</span>
</code></pre></td></tr></table>
</div>
</div><p>其中 <code>{{ range . }}</code> 表示将处理器方法传入的变量，这里是 <code>threads</code> 进行循环。</p>
<h3 id="44-注册首页路由">4.4 注册首页路由</h3>
<p>最好，我们在 <code>routes/routes.go</code> 中注册首页路由及对应的处理器方法 <code>Index</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">import</span> <span class="s">&#34;github.com/xueyuanjun/chitchat/handlers&#34;</span>

<span class="c1">// 定义所有 Web 路由
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">webRoutes</span> <span class="p">=</span> <span class="nx">WebRoutes</span><span class="p">{</span>
    <span class="p">{</span>
        <span class="s">&#34;home&#34;</span><span class="p">,</span>
        <span class="s">&#34;GET&#34;</span><span class="p">,</span>
        <span class="s">&#34;/&#34;</span><span class="p">,</span>
        <span class="nx">handlers</span><span class="p">.</span><span class="nx">Index</span><span class="p">,</span>
    <span class="p">},</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="5-访问论坛首页">5. 访问论坛首页</h2>
<p>访问论坛首页之前，我们将相应的前端资源文件拷贝到 <code>public</code> 目录下，此时项目整体目录结构如下：</p>
<p></p>
<p>然后我们在项目根目录下运行如下代码启动 HTTP 服务器</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ go run main.go
</code></pre></td></tr></table>
</div>
</div><p>然后我们在浏览器访问论坛首页 <code>http://localhost:8080</code>：</p>
<p></p>]]></description></item><item><title>基于Go语言开发在线论坛2-通过模型类与MySQL数据库交互</title><link>https://shuzang.github.io/development-of-online-forum-based-on-golang-2-interact-with-mysql/</link><pubDate>Wed, 27 May 2020 18:25:20 +0800</pubDate><author>作者</author><guid>https://shuzang.github.io/development-of-online-forum-based-on-golang-2-interact-with-mysql/</guid><description><![CDATA[<p>在本篇教程中，我们将在 MySQL 中创建一个 <code>chitchat</code> 数据库作为论坛项目的数据库。我选择了在本地安装 MySQL Server，但也可以基于 Docker 容器运行。转自学院君的教程，略有改动。</p>
<h2 id="1-项目初始化">1. 项目初始化</h2>
<p>首先创建项目目录，命名为 <code>chitchat</code>，然后初始化目录结构如下</p>
<p></p>
<p>各个子目录/文件的作用介绍如下：</p>
<ul>
<li><code>main.go</code>：应用入口文件</li>
<li><code>config.json</code>：全局配置文件</li>
<li><code>handlers</code>：用于存放处理器代码（可类比为 MVC 模式中的控制器目录）</li>
<li><code>logs</code>：用于存放日志文件</li>
<li><code>models</code>：用于存放与数据库交互的模型类</li>
<li><code>public</code>：用于存放前端资源文件，比如图片、CSS、JavaScript 等</li>
<li><code>routes</code>：用于存放路由文件和路由器实现代码</li>
<li><code>views</code>：用于存放视图模板文件</li>
</ul>
<p>在 Github 网页端创建同名仓库，然后在本地执行如下命令初始化仓库（我们使用 Github 存储代码）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">echo</span> <span class="s2">&#34;# chitchat&#34;</span> &gt;&gt; README.md
git init
git add README.md
git commit -m <span class="s2">&#34;Initialize project directory&#34;</span>
git remote add origin https://github.com/shuzang/chitchat.git
git push -u origin master
</code></pre></td></tr></table>
</div>
</div><p>然后在 <code>chitchat</code> 目录下初始化 Go 项目， 后续通过 Go Module 来管理依赖</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ go mod init github.com/shuzang/chitchat
</code></pre></td></tr></table>
</div>
</div><h2 id="2-创建数据表">2. 创建数据表</h2>
<p>在 MySQL Server 中创建 <code>chitchat</code> 数据库，然后创建数据表，数据表对应的 SQL 语句如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-mysql" data-lang="mysql"><span class="k">create</span> <span class="k">table</span> <span class="nf">users</span> <span class="p">(</span>
  <span class="n">id</span>         <span class="n">serial</span> <span class="k">primary</span> <span class="k">key</span><span class="p">,</span>
  <span class="n">uuid</span>       <span class="kt">varchar</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span> <span class="k">not</span> <span class="no">null</span> <span class="k">unique</span><span class="p">,</span>
  <span class="n">name</span>       <span class="kt">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
  <span class="n">email</span>      <span class="kt">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">not</span> <span class="no">null</span> <span class="k">unique</span><span class="p">,</span>
  <span class="n">password</span>   <span class="kt">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">)</span> <span class="k">not</span> <span class="no">null</span><span class="p">,</span>
  <span class="n">created_at</span> <span class="kt">timestamp</span> <span class="k">not</span> <span class="no">null</span>
<span class="p">);</span>
    
<span class="k">create</span> <span class="k">table</span> <span class="nf">sessions</span> <span class="p">(</span>
  <span class="n">id</span>         <span class="n">serial</span> <span class="k">primary</span> <span class="k">key</span><span class="p">,</span>
  <span class="n">uuid</span>       <span class="kt">varchar</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span> <span class="k">not</span> <span class="no">null</span> <span class="k">unique</span><span class="p">,</span>
  <span class="n">email</span>      <span class="kt">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
  <span class="n">user_id</span>    <span class="kt">integer</span> <span class="k">references</span> <span class="nf">users</span><span class="p">(</span><span class="n">id</span><span class="p">),</span>
  <span class="n">created_at</span> <span class="kt">timestamp</span> <span class="k">not</span> <span class="no">null</span>
<span class="p">);</span>
    
<span class="k">create</span> <span class="k">table</span> <span class="nf">threads</span> <span class="p">(</span>
  <span class="n">id</span>         <span class="n">serial</span> <span class="k">primary</span> <span class="k">key</span><span class="p">,</span>
  <span class="n">uuid</span>       <span class="kt">varchar</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span> <span class="k">not</span> <span class="no">null</span> <span class="k">unique</span><span class="p">,</span>
  <span class="n">topic</span>      <span class="kt">text</span><span class="p">,</span>
  <span class="n">user_id</span>    <span class="kt">integer</span> <span class="k">references</span> <span class="nf">users</span><span class="p">(</span><span class="n">id</span><span class="p">),</span>
  <span class="n">created_at</span> <span class="kt">timestamp</span> <span class="k">not</span> <span class="no">null</span>
<span class="p">);</span>
    
<span class="k">create</span> <span class="k">table</span> <span class="nf">posts</span> <span class="p">(</span>
  <span class="n">id</span>         <span class="n">serial</span> <span class="k">primary</span> <span class="k">key</span><span class="p">,</span>
  <span class="n">uuid</span>       <span class="kt">varchar</span><span class="p">(</span><span class="mi">64</span><span class="p">)</span> <span class="k">not</span> <span class="no">null</span> <span class="k">unique</span><span class="p">,</span>
  <span class="n">body</span>       <span class="kt">text</span><span class="p">,</span>
  <span class="n">user_id</span>    <span class="kt">integer</span> <span class="k">references</span> <span class="nf">users</span><span class="p">(</span><span class="n">id</span><span class="p">),</span>
  <span class="n">thread_id</span>  <span class="kt">integer</span> <span class="k">references</span> <span class="nf">threads</span><span class="p">(</span><span class="n">id</span><span class="p">),</span>
  <span class="n">created_at</span> <span class="kt">timestamp</span> <span class="k">not</span> <span class="no">null</span>
<span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>使用 Navicat for MySQL 进行连接测试</p>
<p></p>
<p>大量的语句逐条执行很容易出错，可以通过脚本形式批量执行<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>。</p>
<h2 id="3-与数据库交互">3. 与数据库交互</h2>
<h3 id="31-数据库驱动">3.1 数据库驱动</h3>
<p>数据表创建完成后，接下来，需要在 Go 应用代码中与数据库交互，Go 语言开发组并没有为此提供官方的数据库驱动实现，只是提供了数据库交互接口，我们可以通过实现这些接口的第三方扩展包完成与 MySQL 数据库的交互，本项目选择的扩展包是 <a href="https://github.com/go-sql-driver/mysql" target="_blank" rel="noopener noreffer">go-mysql-driver</a> 。</p>
<p>我们可以在 Go 应用中编写模型类基于这个扩展包提供的方法与 MySQL 交互完成增删改查操作，开始之前，可以运行如下命令安装这个依赖：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ go get -u github.com/go-sql-driver/mysql
</code></pre></td></tr></table>
</div>
</div><h3 id="32-数据库连接">3.2 数据库连接</h3>
<p>然后在 <code>chitchat/models</code> 目录下创建 <code>db.go</code>，并编写数据库连接初始化方法以及生成 UUID、哈希加密方法：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">models</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;crypto/rand&#34;</span>
	<span class="s">&#34;crypto/sha256&#34;</span>
	<span class="s">&#34;database/sql&#34;</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;log&#34;</span>

	<span class="nx">_</span> <span class="s">&#34;github.com/go-sql-driver/mysql&#34;</span>
<span class="p">)</span>

<span class="kd">var</span> <span class="nx">Db</span> <span class="o">*</span><span class="nx">sql</span><span class="p">.</span><span class="nx">DB</span>

<span class="kd">func</span> <span class="nf">init</span><span class="p">()</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">err</span> <span class="kt">error</span>
	<span class="nx">Db</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">sql</span><span class="p">.</span><span class="nf">Open</span><span class="p">(</span><span class="s">&#34;mysql&#34;</span><span class="p">,</span> <span class="s">&#34;root:root@/chitchat?charset=utf8&amp;parseTime=true&#34;</span><span class="p">)</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatal</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>
<span class="p">}</span>

<span class="c1">// create a random UUID with from RFC 4122
</span><span class="c1">// adapted from http://github.com/nu7hatch/gouuid
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">createUUID</span><span class="p">()</span> <span class="p">(</span><span class="nx">uuid</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">u</span> <span class="o">:=</span> <span class="nb">new</span><span class="p">([</span><span class="mi">16</span><span class="p">]</span><span class="kt">byte</span><span class="p">)</span>
	<span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">rand</span><span class="p">.</span><span class="nf">Read</span><span class="p">(</span><span class="nx">u</span><span class="p">[:])</span>
	<span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
		<span class="nx">log</span><span class="p">.</span><span class="nf">Fatalln</span><span class="p">(</span><span class="s">&#34;Cannot generate UUID&#34;</span><span class="p">,</span> <span class="nx">err</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="c1">// 0x40 is reserved variant from RFC 4122
</span><span class="c1"></span>	<span class="nx">u</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="p">=</span> <span class="p">(</span><span class="nx">u</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="p">|</span> <span class="mh">0x40</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0x7F</span>
	<span class="c1">// Set the four most significant bits (bits 12 through 15) of the
</span><span class="c1"></span>	<span class="c1">// time_hi_and_version field to the 4-bit version number.
</span><span class="c1"></span>	<span class="nx">u</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="p">=</span> <span class="p">(</span><span class="nx">u</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">&amp;</span> <span class="mh">0xF</span><span class="p">)</span> <span class="p">|</span> <span class="p">(</span><span class="mh">0x4</span> <span class="o">&lt;&lt;</span> <span class="mi">4</span><span class="p">)</span>
	<span class="nx">uuid</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%x-%x-%x-%x-%x&#34;</span><span class="p">,</span> <span class="nx">u</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="mi">4</span><span class="p">],</span> <span class="nx">u</span><span class="p">[</span><span class="mi">4</span><span class="p">:</span><span class="mi">6</span><span class="p">],</span> <span class="nx">u</span><span class="p">[</span><span class="mi">6</span><span class="p">:</span><span class="mi">8</span><span class="p">],</span> <span class="nx">u</span><span class="p">[</span><span class="mi">8</span><span class="p">:</span><span class="mi">10</span><span class="p">],</span> <span class="nx">u</span><span class="p">[</span><span class="mi">10</span><span class="p">:])</span>
	<span class="k">return</span>
<span class="p">}</span>

<span class="c1">// hash plaintext with sha-256
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Encrypt</span><span class="p">(</span><span class="nx">plaintext</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">cryptext</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">cryptext</span> <span class="p">=</span> <span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprintf</span><span class="p">(</span><span class="s">&#34;%x&#34;</span><span class="p">,</span> <span class="nx">sha256</span><span class="p">.</span><span class="nf">Sum256</span><span class="p">([]</span><span class="nb">byte</span><span class="p">(</span><span class="nx">plaintext</span><span class="p">)))</span>
	<span class="k">return</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>其中，<code>Db</code> 变量代表数据库连接池，通过 <code>init</code> 方法在 Web 应用启动时自动初始化数据库连接，这样，我们就可以在应用中通过 <code>Db</code> 变量对数据库进行增删改查操作了，这也是该变量首字母大写的原因，方便在 <code>models</code> 包之外被引用，具体的操作实现我们放到独立的模型文件中处理。</p>
<p>注：这里通过 <code>sql.Open</code> 初始化数据库连接，我们写死了数据库连接配置，在实际生产环境，这块配置值应该从配置文件或系统环境变量获取。</p>
<h3 id="33-用户模型相关类">3.3 用户模型相关类</h3>
<p>有了代表数据库连接池的 <code>Db</code> 变量之后，就可以为每个数据表编写对应的模型类实现增删改查操作了，首先在 <code>models</code> 目录下创建 <code>user.go</code> 用于定义用户模型类 <code>User</code> 与 <code>users</code> 表进行交互，以及与 <code>sessions</code> 表进行关联：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">models</span>

<span class="kn">import</span> <span class="s">&#34;time&#34;</span>

<span class="kd">type</span> <span class="nx">User</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">Id</span>        <span class="kt">int</span>
    <span class="nx">Uuid</span>      <span class="kt">string</span>
    <span class="nx">Name</span>      <span class="kt">string</span>
    <span class="nx">Email</span>     <span class="kt">string</span>
    <span class="nx">Password</span>  <span class="kt">string</span>
    <span class="nx">CreatedAt</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span>
<span class="p">}</span>

<span class="c1">// Create a new session for an existing user
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">user</span> <span class="o">*</span><span class="nx">User</span><span class="p">)</span> <span class="nf">CreateSession</span><span class="p">()</span> <span class="p">(</span><span class="nx">session</span> <span class="nx">Session</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">statement</span> <span class="o">:=</span> <span class="s">&#34;insert into sessions (uuid, email, user_id, created_at) values (?, ?, ?, ?)&#34;</span>
    <span class="nx">stmtin</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">Db</span><span class="p">.</span><span class="nf">Prepare</span><span class="p">(</span><span class="nx">statement</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="k">return</span>
    <span class="p">}</span>
    <span class="k">defer</span> <span class="nx">stmtin</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>

    <span class="nx">uuid</span> <span class="o">:=</span> <span class="nf">createUUID</span><span class="p">()</span>
    <span class="nx">stmtin</span><span class="p">.</span><span class="nf">Exec</span><span class="p">(</span><span class="nx">uuid</span><span class="p">,</span> <span class="nx">user</span><span class="p">.</span><span class="nx">Email</span><span class="p">,</span> <span class="nx">user</span><span class="p">.</span><span class="nx">Id</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">())</span>

    <span class="nx">stmtout</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">Db</span><span class="p">.</span><span class="nf">Prepare</span><span class="p">(</span><span class="s">&#34;select id, uuid, email, user_id, created_at from sessions where uuid = ?&#34;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="k">return</span>
    <span class="p">}</span>
    <span class="k">defer</span> <span class="nx">stmtout</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
    <span class="c1">// use QueryRow to return a row and scan the returned id into the Session struct
</span><span class="c1"></span>    <span class="nx">err</span> <span class="p">=</span> <span class="nx">stmtout</span><span class="p">.</span><span class="nf">QueryRow</span><span class="p">(</span><span class="nx">uuid</span><span class="p">).</span><span class="nf">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">session</span><span class="p">.</span><span class="nx">Id</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">session</span><span class="p">.</span><span class="nx">Uuid</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">session</span><span class="p">.</span><span class="nx">Email</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">session</span><span class="p">.</span><span class="nx">UserId</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">session</span><span class="p">.</span><span class="nx">CreatedAt</span><span class="p">)</span>
    <span class="k">return</span>
<span class="p">}</span>

<span class="c1">// Get the session for an existing user
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">user</span> <span class="o">*</span><span class="nx">User</span><span class="p">)</span> <span class="nf">Session</span><span class="p">()</span> <span class="p">(</span><span class="nx">session</span> <span class="nx">Session</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">session</span> <span class="p">=</span> <span class="nx">Session</span><span class="p">{}</span>
    <span class="nx">err</span> <span class="p">=</span> <span class="nx">Db</span><span class="p">.</span><span class="nf">QueryRow</span><span class="p">(</span><span class="s">&#34;SELECT id, uuid, email, user_id, created_at FROM sessions WHERE user_id = ?&#34;</span><span class="p">,</span> <span class="nx">user</span><span class="p">.</span><span class="nx">Id</span><span class="p">).</span>
        <span class="nf">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">session</span><span class="p">.</span><span class="nx">Id</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">session</span><span class="p">.</span><span class="nx">Uuid</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">session</span><span class="p">.</span><span class="nx">Email</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">session</span><span class="p">.</span><span class="nx">UserId</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">session</span><span class="p">.</span><span class="nx">CreatedAt</span><span class="p">)</span>
    <span class="k">return</span>
<span class="p">}</span>

<span class="c1">// Create a new user, save user info into the database
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">user</span> <span class="o">*</span><span class="nx">User</span><span class="p">)</span> <span class="nf">Create</span><span class="p">()</span> <span class="p">(</span><span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Postgres does not automatically return the last insert id, because it would be wrong to assume
</span><span class="c1"></span>    <span class="c1">// you&#39;re always using a sequence.You need to use the RETURNING keyword in your insert to get this
</span><span class="c1"></span>    <span class="c1">// information from postgres.
</span><span class="c1"></span>    <span class="nx">statement</span> <span class="o">:=</span> <span class="s">&#34;insert into users (uuid, name, email, password, created_at) values (?, ?, ?, ?, ?)&#34;</span>
    <span class="nx">stmtin</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">Db</span><span class="p">.</span><span class="nf">Prepare</span><span class="p">(</span><span class="nx">statement</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="k">return</span>
    <span class="p">}</span>
    <span class="k">defer</span> <span class="nx">stmtin</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>

    <span class="nx">uuid</span> <span class="o">:=</span> <span class="nf">createUUID</span><span class="p">()</span>
    <span class="nx">stmtin</span><span class="p">.</span><span class="nf">Exec</span><span class="p">(</span><span class="nx">uuid</span><span class="p">,</span> <span class="nx">user</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">user</span><span class="p">.</span><span class="nx">Email</span><span class="p">,</span> <span class="nf">Encrypt</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">Password</span><span class="p">),</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">())</span>

    <span class="nx">stmtout</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">Db</span><span class="p">.</span><span class="nf">Prepare</span><span class="p">(</span><span class="s">&#34;select id, uuid, created_at from users where uuid = ?&#34;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="k">return</span>
    <span class="p">}</span>
    <span class="k">defer</span> <span class="nx">stmtout</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
    <span class="c1">// use QueryRow to return a row and scan the returned id into the User struct
</span><span class="c1"></span>    <span class="nx">err</span> <span class="p">=</span> <span class="nx">stmtout</span><span class="p">.</span><span class="nf">QueryRow</span><span class="p">(</span><span class="nx">uuid</span><span class="p">).</span><span class="nf">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Id</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Uuid</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">CreatedAt</span><span class="p">)</span>
    <span class="k">return</span>
<span class="p">}</span>

<span class="c1">// Delete user from database
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">user</span> <span class="o">*</span><span class="nx">User</span><span class="p">)</span> <span class="nf">Delete</span><span class="p">()</span> <span class="p">(</span><span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">statement</span> <span class="o">:=</span> <span class="s">&#34;delete from users where id = ?&#34;</span>
    <span class="nx">stmt</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">Db</span><span class="p">.</span><span class="nf">Prepare</span><span class="p">(</span><span class="nx">statement</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="k">return</span>
    <span class="p">}</span>
    <span class="k">defer</span> <span class="nx">stmt</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>

    <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">stmt</span><span class="p">.</span><span class="nf">Exec</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">Id</span><span class="p">)</span>
    <span class="k">return</span>
<span class="p">}</span>

<span class="c1">// Update user information in the database
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">user</span> <span class="o">*</span><span class="nx">User</span><span class="p">)</span> <span class="nf">Update</span><span class="p">()</span> <span class="p">(</span><span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">statement</span> <span class="o">:=</span> <span class="s">&#34;update users set name = ?, email = ? where id = ?&#34;</span>
    <span class="nx">stmt</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">Db</span><span class="p">.</span><span class="nf">Prepare</span><span class="p">(</span><span class="nx">statement</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="k">return</span>
    <span class="p">}</span>
    <span class="k">defer</span> <span class="nx">stmt</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>

    <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">stmt</span><span class="p">.</span><span class="nf">Exec</span><span class="p">(</span><span class="nx">user</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="nx">user</span><span class="p">.</span><span class="nx">Email</span><span class="p">,</span> <span class="nx">user</span><span class="p">.</span><span class="nx">Id</span><span class="p">)</span>
    <span class="k">return</span>
<span class="p">}</span>

<span class="c1">// Delete all users from database
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">UserDeleteAll</span><span class="p">()</span> <span class="p">(</span><span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">statement</span> <span class="o">:=</span> <span class="s">&#34;delete from users&#34;</span>
    <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">Db</span><span class="p">.</span><span class="nf">Exec</span><span class="p">(</span><span class="nx">statement</span><span class="p">)</span>
    <span class="k">return</span>
<span class="p">}</span>

<span class="c1">// Get all users in the database and returns it
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Users</span><span class="p">()</span> <span class="p">(</span><span class="nx">users</span> <span class="p">[]</span><span class="nx">User</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">rows</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">Db</span><span class="p">.</span><span class="nf">Query</span><span class="p">(</span><span class="s">&#34;SELECT id, uuid, name, email, password, created_at FROM users&#34;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="k">return</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="nx">rows</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">user</span> <span class="o">:=</span> <span class="nx">User</span><span class="p">{}</span>
        <span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">rows</span><span class="p">.</span><span class="nf">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Id</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Uuid</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Email</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Password</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">CreatedAt</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="k">return</span>
        <span class="p">}</span>
        <span class="nx">users</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">users</span><span class="p">,</span> <span class="nx">user</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">rows</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
    <span class="k">return</span>
<span class="p">}</span>

<span class="c1">// Get a single user given the email
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">UserByEmail</span><span class="p">(</span><span class="nx">email</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">user</span> <span class="nx">User</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">user</span> <span class="p">=</span> <span class="nx">User</span><span class="p">{}</span>
    <span class="nx">err</span> <span class="p">=</span> <span class="nx">Db</span><span class="p">.</span><span class="nf">QueryRow</span><span class="p">(</span><span class="s">&#34;SELECT id, uuid, name, email, password, created_at FROM users WHERE email = ?&#34;</span><span class="p">,</span> <span class="nx">email</span><span class="p">).</span>
        <span class="nf">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Id</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Uuid</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Email</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Password</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">CreatedAt</span><span class="p">)</span>
    <span class="k">return</span>
<span class="p">}</span>

<span class="c1">// Get a single user given the UUID
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">UserByUUID</span><span class="p">(</span><span class="nx">uuid</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">user</span> <span class="nx">User</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">user</span> <span class="p">=</span> <span class="nx">User</span><span class="p">{}</span>
    <span class="nx">err</span> <span class="p">=</span> <span class="nx">Db</span><span class="p">.</span><span class="nf">QueryRow</span><span class="p">(</span><span class="s">&#34;SELECT id, uuid, name, email, password, created_at FROM users WHERE uuid = ?&#34;</span><span class="p">,</span> <span class="nx">uuid</span><span class="p">).</span>
        <span class="nf">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Id</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Uuid</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Email</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Password</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">CreatedAt</span><span class="p">)</span>
    <span class="k">return</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>创建 <code>session.go</code> 用于定义会话模型类 <code>Session</code>：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">models</span>

<span class="kn">import</span> <span class="s">&#34;time&#34;</span>

<span class="kd">type</span> <span class="nx">Session</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">Id</span>        <span class="kt">int</span>
    <span class="nx">Uuid</span>      <span class="kt">string</span>
    <span class="nx">Email</span>     <span class="kt">string</span>
    <span class="nx">UserId</span>    <span class="kt">int</span>
    <span class="nx">CreatedAt</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span>
<span class="p">}</span>

<span class="c1">// Check if session is valid in the database
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">session</span> <span class="o">*</span><span class="nx">Session</span><span class="p">)</span> <span class="nf">Check</span><span class="p">()</span> <span class="p">(</span><span class="nx">valid</span> <span class="kt">bool</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">err</span> <span class="p">=</span> <span class="nx">Db</span><span class="p">.</span><span class="nf">QueryRow</span><span class="p">(</span><span class="s">&#34;SELECT id, uuid, email, user_id, created_at FROM sessions WHERE uuid = ?&#34;</span><span class="p">,</span> <span class="nx">session</span><span class="p">.</span><span class="nx">Uuid</span><span class="p">).</span>
        <span class="nf">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">session</span><span class="p">.</span><span class="nx">Id</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">session</span><span class="p">.</span><span class="nx">Uuid</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">session</span><span class="p">.</span><span class="nx">Email</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">session</span><span class="p">.</span><span class="nx">UserId</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">session</span><span class="p">.</span><span class="nx">CreatedAt</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="nx">valid</span> <span class="p">=</span> <span class="kc">false</span>
        <span class="k">return</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="nx">session</span><span class="p">.</span><span class="nx">Id</span> <span class="o">!=</span> <span class="mi">0</span> <span class="p">{</span>
        <span class="nx">valid</span> <span class="p">=</span> <span class="kc">true</span>
    <span class="p">}</span>
    <span class="k">return</span>
<span class="p">}</span>

<span class="c1">// Delete session from database
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">session</span> <span class="o">*</span><span class="nx">Session</span><span class="p">)</span> <span class="nf">DeleteByUUID</span><span class="p">()</span> <span class="p">(</span><span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">statement</span> <span class="o">:=</span> <span class="s">&#34;delete from sessions where uuid = ?&#34;</span>
    <span class="nx">stmt</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">Db</span><span class="p">.</span><span class="nf">Prepare</span><span class="p">(</span><span class="nx">statement</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="k">return</span>
    <span class="p">}</span>
    <span class="k">defer</span> <span class="nx">stmt</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>

    <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">stmt</span><span class="p">.</span><span class="nf">Exec</span><span class="p">(</span><span class="nx">session</span><span class="p">.</span><span class="nx">Uuid</span><span class="p">)</span>
    <span class="k">return</span>
<span class="p">}</span>

<span class="c1">// Get the user from the session
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">session</span> <span class="o">*</span><span class="nx">Session</span><span class="p">)</span> <span class="nf">User</span><span class="p">()</span> <span class="p">(</span><span class="nx">user</span> <span class="nx">User</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">user</span> <span class="p">=</span> <span class="nx">User</span><span class="p">{}</span>
    <span class="nx">err</span> <span class="p">=</span> <span class="nx">Db</span><span class="p">.</span><span class="nf">QueryRow</span><span class="p">(</span><span class="s">&#34;SELECT id, uuid, name, email, created_at FROM users WHERE id = ?&#34;</span><span class="p">,</span> <span class="nx">session</span><span class="p">.</span><span class="nx">UserId</span><span class="p">).</span>
        <span class="nf">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Id</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Uuid</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Email</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">CreatedAt</span><span class="p">)</span>
    <span class="k">return</span>
<span class="p">}</span>

<span class="c1">// Delete all sessions from database
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">SessionDeleteAll</span><span class="p">()</span> <span class="p">(</span><span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">statement</span> <span class="o">:=</span> <span class="s">&#34;delete from sessions&#34;</span>
    <span class="nx">_</span><span class="p">,</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">Db</span><span class="p">.</span><span class="nf">Exec</span><span class="p">(</span><span class="nx">statement</span><span class="p">)</span>
    <span class="k">return</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这里面定义了基于 <code>Db</code> 数据库连接实例实现用户模型和会话模型相关的增删改查操作，具体的语法可以参考 <code>go-mysql-driver</code> 的 <a href="https://github.com/go-sql-driver/mysql" target="_blank" rel="noopener noreffer">官方文档</a>。</p>
<h3 id="34-主题模型相关类">3.4 主题模型相关类</h3>
<p>编写好用户相关模型类后，接下来在同级目录下创建 <code>thread.go</code>，定义群组模型类 <code>Thread</code> 与 <code>threads</code> 表进行交互：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">models</span>

<span class="kn">import</span> <span class="s">&#34;time&#34;</span>

<span class="kd">type</span> <span class="nx">Thread</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">Id</span>        <span class="kt">int</span>
    <span class="nx">Uuid</span>      <span class="kt">string</span>
    <span class="nx">Topic</span>     <span class="kt">string</span>
    <span class="nx">UserId</span>    <span class="kt">int</span>
    <span class="nx">CreatedAt</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span>
<span class="p">}</span>

<span class="c1">// format the CreatedAt date to display nicely on the screen
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">thread</span> <span class="o">*</span><span class="nx">Thread</span><span class="p">)</span> <span class="nf">CreatedAtDate</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">thread</span><span class="p">.</span><span class="nx">CreatedAt</span><span class="p">.</span><span class="nf">Format</span><span class="p">(</span><span class="s">&#34;Jan 2, 2006 at 3:04pm&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// get the number of posts in a thread
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">thread</span> <span class="o">*</span><span class="nx">Thread</span><span class="p">)</span> <span class="nf">NumReplies</span><span class="p">()</span> <span class="p">(</span><span class="nx">count</span> <span class="kt">int</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">rows</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">Db</span><span class="p">.</span><span class="nf">Query</span><span class="p">(</span><span class="s">&#34;SELECT count(*) FROM posts where thread_id = ?&#34;</span><span class="p">,</span> <span class="nx">thread</span><span class="p">.</span><span class="nx">Id</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="k">return</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="nx">rows</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">rows</span><span class="p">.</span><span class="nf">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">count</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="k">return</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="nx">rows</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
    <span class="k">return</span>
<span class="p">}</span>

<span class="c1">// get posts to a thread
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">thread</span> <span class="o">*</span><span class="nx">Thread</span><span class="p">)</span> <span class="nf">Posts</span><span class="p">()</span> <span class="p">(</span><span class="nx">posts</span> <span class="p">[]</span><span class="nx">Post</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">rows</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">Db</span><span class="p">.</span><span class="nf">Query</span><span class="p">(</span><span class="s">&#34;SELECT id, uuid, body, user_id, thread_id, created_at FROM posts where thread_id = ?&#34;</span><span class="p">,</span> <span class="nx">thread</span><span class="p">.</span><span class="nx">Id</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="k">return</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="nx">rows</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">post</span> <span class="o">:=</span> <span class="nx">Post</span><span class="p">{}</span>
        <span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">rows</span><span class="p">.</span><span class="nf">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">post</span><span class="p">.</span><span class="nx">Id</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">post</span><span class="p">.</span><span class="nx">Uuid</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">post</span><span class="p">.</span><span class="nx">Body</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">post</span><span class="p">.</span><span class="nx">UserId</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">post</span><span class="p">.</span><span class="nx">ThreadId</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">post</span><span class="p">.</span><span class="nx">CreatedAt</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="k">return</span>
        <span class="p">}</span>
        <span class="nx">posts</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">posts</span><span class="p">,</span> <span class="nx">post</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">rows</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
    <span class="k">return</span>
<span class="p">}</span>

<span class="c1">// Get all threads in the database and returns it
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">Threads</span><span class="p">()</span> <span class="p">(</span><span class="nx">threads</span> <span class="p">[]</span><span class="nx">Thread</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">rows</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">Db</span><span class="p">.</span><span class="nf">Query</span><span class="p">(</span><span class="s">&#34;SELECT id, uuid, topic, user_id, created_at FROM threads ORDER BY created_at DESC&#34;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="k">return</span>
    <span class="p">}</span>
    <span class="k">for</span> <span class="nx">rows</span><span class="p">.</span><span class="nf">Next</span><span class="p">()</span> <span class="p">{</span>
        <span class="nx">conv</span> <span class="o">:=</span> <span class="nx">Thread</span><span class="p">{}</span>
        <span class="k">if</span> <span class="nx">err</span> <span class="p">=</span> <span class="nx">rows</span><span class="p">.</span><span class="nf">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">conv</span><span class="p">.</span><span class="nx">Id</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">conv</span><span class="p">.</span><span class="nx">Uuid</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">conv</span><span class="p">.</span><span class="nx">Topic</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">conv</span><span class="p">.</span><span class="nx">UserId</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">conv</span><span class="p">.</span><span class="nx">CreatedAt</span><span class="p">);</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
            <span class="k">return</span>
        <span class="p">}</span>
        <span class="nx">threads</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">threads</span><span class="p">,</span> <span class="nx">conv</span><span class="p">)</span>
    <span class="p">}</span>
    <span class="nx">rows</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>
    <span class="k">return</span>
<span class="p">}</span>

<span class="c1">// Get a thread by the UUID
</span><span class="c1"></span><span class="kd">func</span> <span class="nf">ThreadByUUID</span><span class="p">(</span><span class="nx">uuid</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">conv</span> <span class="nx">Thread</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">conv</span> <span class="p">=</span> <span class="nx">Thread</span><span class="p">{}</span>
    <span class="nx">err</span> <span class="p">=</span> <span class="nx">Db</span><span class="p">.</span><span class="nf">QueryRow</span><span class="p">(</span><span class="s">&#34;SELECT id, uuid, topic, user_id, created_at FROM threads WHERE uuid = ?&#34;</span><span class="p">,</span> <span class="nx">uuid</span><span class="p">).</span>
        <span class="nf">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">conv</span><span class="p">.</span><span class="nx">Id</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">conv</span><span class="p">.</span><span class="nx">Uuid</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">conv</span><span class="p">.</span><span class="nx">Topic</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">conv</span><span class="p">.</span><span class="nx">UserId</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">conv</span><span class="p">.</span><span class="nx">CreatedAt</span><span class="p">)</span>
    <span class="k">return</span>
<span class="p">}</span>

<span class="c1">// Get the user who started this thread
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">thread</span> <span class="o">*</span><span class="nx">Thread</span><span class="p">)</span> <span class="nf">User</span><span class="p">()</span> <span class="p">(</span><span class="nx">user</span> <span class="nx">User</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">user</span> <span class="p">=</span> <span class="nx">User</span><span class="p">{}</span>
    <span class="nx">Db</span><span class="p">.</span><span class="nf">QueryRow</span><span class="p">(</span><span class="s">&#34;SELECT id, uuid, name, email, created_at FROM users WHERE id = ?&#34;</span><span class="p">,</span> <span class="nx">thread</span><span class="p">.</span><span class="nx">UserId</span><span class="p">).</span>
        <span class="nf">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Id</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Uuid</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Email</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">CreatedAt</span><span class="p">)</span>
    <span class="k">return</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>以及 <code>post.go</code> 编写主题模型类与 <code>posts</code> 表进行交互：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">models</span>

<span class="kn">import</span> <span class="s">&#34;time&#34;</span>

<span class="kd">type</span> <span class="nx">Post</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">Id</span>        <span class="kt">int</span>
    <span class="nx">Uuid</span>      <span class="kt">string</span>
    <span class="nx">Body</span>      <span class="kt">string</span>
    <span class="nx">UserId</span>    <span class="kt">int</span>
    <span class="nx">ThreadId</span>  <span class="kt">int</span>
    <span class="nx">CreatedAt</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">post</span> <span class="o">*</span><span class="nx">Post</span><span class="p">)</span> <span class="nf">CreatedAtDate</span><span class="p">()</span> <span class="kt">string</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">post</span><span class="p">.</span><span class="nx">CreatedAt</span><span class="p">.</span><span class="nf">Format</span><span class="p">(</span><span class="s">&#34;Jan 2, 2006 at 3:04pm&#34;</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// Get the user who wrote the post
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">post</span> <span class="o">*</span><span class="nx">Post</span><span class="p">)</span> <span class="nf">User</span><span class="p">()</span> <span class="p">(</span><span class="nx">user</span> <span class="nx">User</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">user</span> <span class="p">=</span> <span class="nx">User</span><span class="p">{}</span>
    <span class="nx">Db</span><span class="p">.</span><span class="nf">QueryRow</span><span class="p">(</span><span class="s">&#34;SELECT id, uuid, name, email, created_at FROM users WHERE id = ?&#34;</span><span class="p">,</span> <span class="nx">post</span><span class="p">.</span><span class="nx">UserId</span><span class="p">).</span>
        <span class="nf">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Id</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Uuid</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Name</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">Email</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">user</span><span class="p">.</span><span class="nx">CreatedAt</span><span class="p">)</span>
    <span class="k">return</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>此外，我们到 <code>user.go</code> 中为 <code>User</code> 模型新增如下两个方法与 <code>Thread</code>、<code>Post</code> 模型进行关联，用于创建新的群组和主题：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// Create a new thread
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">user</span> <span class="o">*</span><span class="nx">User</span><span class="p">)</span> <span class="nf">CreateThread</span><span class="p">(</span><span class="nx">topic</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">conv</span> <span class="nx">Thread</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">statement</span> <span class="o">:=</span> <span class="s">&#34;insert into threads (uuid, topic, user_id, created_at) values (?, ?, ?, ?)&#34;</span>
    <span class="nx">stmtin</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">Db</span><span class="p">.</span><span class="nf">Prepare</span><span class="p">(</span><span class="nx">statement</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="k">return</span>
    <span class="p">}</span>
    <span class="k">defer</span> <span class="nx">stmtin</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>

    <span class="nx">uuid</span> <span class="o">:=</span> <span class="nf">createUUID</span><span class="p">()</span>
    <span class="nx">stmtin</span><span class="p">.</span><span class="nf">Exec</span><span class="p">(</span><span class="nx">uuid</span><span class="p">,</span> <span class="nx">topic</span><span class="p">,</span> <span class="nx">user</span><span class="p">.</span><span class="nx">Id</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">())</span>

    <span class="nx">stmtout</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">Db</span><span class="p">.</span><span class="nf">Prepare</span><span class="p">(</span><span class="s">&#34;select id, uuid, topic, user_id, created_at from threads where uuid = ?&#34;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="k">return</span>
    <span class="p">}</span>
    <span class="k">defer</span> <span class="nx">stmtout</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>

    <span class="c1">// use QueryRow to return a row and scan the returned id into the Session struct
</span><span class="c1"></span>    <span class="nx">err</span> <span class="p">=</span> <span class="nx">stmtout</span><span class="p">.</span><span class="nf">QueryRow</span><span class="p">(</span><span class="nx">uuid</span><span class="p">).</span><span class="nf">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">conv</span><span class="p">.</span><span class="nx">Id</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">conv</span><span class="p">.</span><span class="nx">Uuid</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">conv</span><span class="p">.</span><span class="nx">Topic</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">conv</span><span class="p">.</span><span class="nx">UserId</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">conv</span><span class="p">.</span><span class="nx">CreatedAt</span><span class="p">)</span>
    <span class="k">return</span>
<span class="p">}</span>

<span class="c1">// Create a new post to a thread
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">user</span> <span class="o">*</span><span class="nx">User</span><span class="p">)</span> <span class="nf">CreatePost</span><span class="p">(</span><span class="nx">conv</span> <span class="nx">Thread</span><span class="p">,</span> <span class="nx">body</span> <span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="nx">post</span> <span class="nx">Post</span><span class="p">,</span> <span class="nx">err</span> <span class="kt">error</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">statement</span> <span class="o">:=</span> <span class="s">&#34;insert into posts (uuid, body, user_id, thread_id, created_at) values (?, ?, ?, ?, ?)&#34;</span>
    <span class="nx">stmtin</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">Db</span><span class="p">.</span><span class="nf">Prepare</span><span class="p">(</span><span class="nx">statement</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="k">return</span>
    <span class="p">}</span>
    <span class="k">defer</span> <span class="nx">stmtin</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>

    <span class="nx">uuid</span> <span class="o">:=</span> <span class="nf">createUUID</span><span class="p">()</span>
    <span class="nx">stmtin</span><span class="p">.</span><span class="nf">Exec</span><span class="p">(</span><span class="nx">uuid</span><span class="p">,</span> <span class="nx">body</span><span class="p">,</span> <span class="nx">user</span><span class="p">.</span><span class="nx">Id</span><span class="p">,</span> <span class="nx">conv</span><span class="p">.</span><span class="nx">Id</span><span class="p">,</span> <span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">())</span>

    <span class="nx">stmtout</span><span class="p">,</span> <span class="nx">err</span> <span class="o">:=</span> <span class="nx">Db</span><span class="p">.</span><span class="nf">Prepare</span><span class="p">(</span><span class="s">&#34;select id, uuid, body, user_id, thread_id, created_at from posts where uuid = ?&#34;</span><span class="p">)</span>
    <span class="k">if</span> <span class="nx">err</span> <span class="o">!=</span> <span class="kc">nil</span> <span class="p">{</span>
        <span class="k">return</span>
    <span class="p">}</span>
    <span class="k">defer</span> <span class="nx">stmtout</span><span class="p">.</span><span class="nf">Close</span><span class="p">()</span>

    <span class="c1">// use QueryRow to return a row and scan the returned id into the Session struct
</span><span class="c1"></span>    <span class="nx">err</span> <span class="p">=</span> <span class="nx">stmtout</span><span class="p">.</span><span class="nf">QueryRow</span><span class="p">(</span><span class="nx">uuid</span><span class="p">).</span><span class="nf">Scan</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">post</span><span class="p">.</span><span class="nx">Id</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">post</span><span class="p">.</span><span class="nx">Uuid</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">post</span><span class="p">.</span><span class="nx">Body</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">post</span><span class="p">.</span><span class="nx">UserId</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">post</span><span class="p">.</span><span class="nx">ThreadId</span><span class="p">,</span> <span class="o">&amp;</span><span class="nx">post</span><span class="p">.</span><span class="nx">CreatedAt</span><span class="p">)</span>
    <span class="k">return</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="4-小结">4. 小结</h2>
<p>在上述编写的模型类中，模型类与数据表的映射由 <code>go-mysql-driver</code> 底层实现，每次从数据库查询到结果之后，可以通过 <code>Scan</code> 方法将数据表字段值映射到对应的结构体模型类，而将模型类保存到数据库时，又可以基于字段映射关系将结构体属性值转化为对应的数据表字段值。</p>
<p>底层数据库交互逻辑定义好了之后，接下来，我们就可以编写上层实现代码了，下一篇介绍在线论坛项目上层路由和处理器方法的实现。</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="https://www.cnblogs.com/kenkofox/archive/2011/01/14/1935422.html" target="_blank" rel="noopener noreffer">mysql下如何执行sql脚本</a> <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>]]></description></item><item><title>基于Go语言开发在线论坛1-整体设计与数据模型</title><link>https://shuzang.github.io/development-of-online-forum-based-on-golang-1-overall-design-and-data-model/</link><pubDate>Wed, 27 May 2020 18:12:20 +0800</pubDate><author>作者</author><guid>https://shuzang.github.io/development-of-online-forum-based-on-golang-1-overall-design-and-data-model/</guid><description><![CDATA[<p>转自学院君的教程<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> ，这里进行复现并深入理解，文章内容可能略有调整。</p>
<!-- more -->
<h2 id="1-项目介绍">1. 项目介绍</h2>
<p>要完成的是一个简单的在线论坛项目，主要仿照 <a href="https://groups.google.com/" target="_blank" rel="noopener noreffer">Google 网上论坛</a> 进行开发，但功能和界面要简化很多，包括</p>
<ol>
<li>用户认证功能（注册、登录、退出等）</li>
<li>认证后的用户可以创建新的群组（帖子）、以及在群组中发表主题（跟帖）</li>
<li>访客用户访问论坛首页可以查看群组列表，进入指定群组页面可以查看对应的主题信息</li>
</ol>
<p></p>
<h2 id="2-技术方案">2. 技术方案</h2>
<p>采用典型的 MVC 架构<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>，以群组详情页为例，假设对应的 URL 是 <code>http://chitchat.test/thread/read?id=123</code>，其中 <code>chitchat.test</code> 是请求域名，<code>thread/read</code> 是请求路由（查看群组），<code>?id=123</code> 是请求参数（群组ID），通过域名确定应用所在的服务器 IP，通过端口号（此处没有显式展示，一般默认是 80 端口）确定应用进程，应用接收到请求后，通过路由将请求分发到指定处理器方法（路由器，或者叫做多路复用器做的就是这个工作，是整个应用请求分发的入口），通过请求参数对数据库进行查询，再将视图响应发送给请求用户，如果数据库查询没有结果，则返回 404 响应。这里，数据库承担的是 M 的角色（Model），视图响应承担的是 V 的角色（View），处理器方法承担的是 C 的角色（Controller）：</p>
<p></p>
<p>上图中 Client 代表发起请求的用户，虚框内是部署在服务器已启动的在线论坛应用，Multiplexer 代表路由器（比如 <code>gorilla/mux</code> ），Handler 代表处理器/处理器方法，数据库操作位于处理器方法中，Templates 代表最终展示给用户的经过模板引擎编译过的视图模板。</p>
<p>我们需要在本地按照这个 MVC 架构基于业务流程编写代码，最后将测试过的应用代码编译打包，部署到远程服务器（这样才能被普通用户访问），并启动该应用，等待客户端请求，这样就完成了整个应用开发流程。</p>
<h2 id="3-数据模型">3. 数据模型</h2>
<p>根据我们之前拟定的需求，至少需要三个模型：</p>
<ul>
<li>用户（User）</li>
<li>群组（Thread）</li>
<li>主题（Post）</li>
</ul>
<p>另外，我们在本项目开发时，会把用户会话（Session）也存储到数据库（用于认证），所以需要一个额外的会话模型，此外，为了简化应用，我们不会真的像 Google 网上论坛那样对用户做权限管理，整个应用只包含一种用户类型，并且具备所有操作权限：</p>
<p></p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>学院君，<a href="https://xueyuanjun.com/post/21519" target="_blank" rel="noopener noreffer">基于 Go 语言开发在线论坛</a> <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>知乎，<a href="https://zhuanlan.zhihu.com/p/73791797" target="_blank" rel="noopener noreffer">MVC架构模式详细说明以及与三层架构的区别</a> <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></description></item></channel></rss>