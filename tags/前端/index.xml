<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>前端 - 标签 - Shuzang's Blog</title><link>https://shuzang.github.io/tags/%E5%89%8D%E7%AB%AF/</link><description>前端 - 标签 - Shuzang's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>lylw1996@qq.com (shuzang)</managingEditor><webMaster>lylw1996@qq.com (shuzang)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 23 Jul 2020 16:54:00 +0800</lastBuildDate><atom:link href="https://shuzang.github.io/tags/%E5%89%8D%E7%AB%AF/" rel="self" type="application/rss+xml"/><item><title>HTML5基础结构</title><link>https://shuzang.github.io/html5-learning-basic-structure/</link><pubDate>Thu, 23 Jul 2020 16:54:00 +0800</pubDate><author>作者</author><guid>https://shuzang.github.io/html5-learning-basic-structure/</guid><description><![CDATA[<p>HTML（HyperText Markup Language，超文本标记语言） 是前端三组件（HTML/CSS/JavaScript）的第一个，负责组织一个网页的结构。HTML5 是 HTML 的最新版本，这篇文章学习其基本结构。</p>
<p>HTML 组织网页结构的意思是，它告诉浏览器当前显示的内容是一段文字、一个图片还是一个链接等，同时控制各部分之间的位置关系。</p>
<p>HTML 不是一个具备图灵完毕特性的编程语言，它最重要的概念有四个：<strong>元素、标签、内容、属性</strong>。下面是一个示例 HTML 语句，定义了一个段落</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">p</span><span class="p">&gt;</span>我的猫咪脾气爆:)<span class="p">&lt;/</span><span class="nt">p</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>这个最简单的 HTML 语句反映了元素、标签、内容之间的关系，如下图</p>
<p></p>
<p>标签的相关特性如下：</p>
<ol>
<li>标签由英文尖括号包围，一般成对出现，分别为开始标签和结束标签，结束标签多一个 <code>/</code> ；</li>
<li>标签之间可以嵌套；</li>
<li>标签不区分大小写，但一般以小写为准。</li>
</ol>
<p>属性则是定义在标签中的语句，用于说明元素的额外信息。</p>
<p></p>
<p>属性的特性如下：</p>
<ol>
<li>包括属性名和属性值，两者以等号连接；</li>
<li>属性名与标签名之间，连续的多个属性间，以空格分隔；</li>
<li>属性值以引号包围，可以是单引号也可以是双引号，以个人习惯为准。</li>
</ol>
<p>一个完整的 HTML 文档就是大量元素的一个组合，下面是一个最简单的 HTML 文档</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>制作我的第一个网页<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">h1</span><span class="p">&gt;</span>Hello World<span class="p">&lt;/</span><span class="nt">h1</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>里面包含了一个文档的基本组成</p>
<ol>
<li><code>!DOCKTYPE html</code>：声明文档类型，用来告诉浏览器这是一个 html 文档，很久以前这条语句很长，HTML5 标准中只需要这么短，该声明必须是 HTML 文档的第一行；</li>
<li><code>&lt;html&gt;&lt;/html&gt;</code> ：整个页面需要用 <code>&lt;html&gt;</code> 标签对来包裹；</li>
<li><code>&lt;head&gt;&lt;/head&gt;</code>：文档头部，包含所有你想包含在HTML页面中但不想在HTML页面中显示的内容。这些内容包括你想在搜索结果中出现的关键字和页面描述，CSS样式，字符集声明等等</li>
<li><code>&lt;body&gt;&lt;/body&gt;</code>：包含了你访问页面时所有显示在页面上的内容，文本，图片，音频，游戏等等。</li>
</ol>
<p>基本的页面结构就是这样，其它所有的内容都直接或嵌套的包含在 <code>&lt;head&gt;</code> 标签或 <code>&lt;body&gt;</code> 标签内。</p>]]></description></item><item><title>JavaScript学习2-基础语法</title><link>https://shuzang.github.io/javascript-learning-2-basic-syntax/</link><pubDate>Fri, 22 May 2020 17:07:00 +0800</pubDate><author>作者</author><guid>https://shuzang.github.io/javascript-learning-2-basic-syntax/</guid><description><![CDATA[<p>各种语言的基础语法部分都很相似，因此这里简单总结一下</p>
<h2 id="1-变量与常量">1. 变量与常量</h2>
<p>尽管以前使用 <code>var</code> 关键字，但现在更多使用 <code>let</code> 关键字声明变量</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">myName</span><span class="p">;</span> 			<span class="c1">// 声明
</span><span class="c1"></span><span class="nx">myName</span> <span class="o">=</span> <span class="s1">&#39;shuzang&#39;</span><span class="p">;</span> 	<span class="c1">// 初始化
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">nyName</span> <span class="o">=</span> <span class="s1">&#39;shuzang&#39;</span><span class="p">;</span> <span class="c1">// 声明 + 初始化，这是最常使用的方式
</span><span class="c1"></span><span class="nx">myName</span> <span class="o">=</span> <span class="s1">&#39;newName&#39;</span><span class="p">;</span>     <span class="c1">// 声明后更新变量值
</span></code></pre></td></tr></table>
</div>
</div><p>注：关键字更换的原因参考 <a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Variables#var_%e4%b8%8e_let_%e7%9a%84%e5%8c%ba%e5%88%ab" target="_blank" rel="noopener noreffer">var 与 let 的区别</a>，更换只有好处没有坏处</p>
<p>常量则使用 <code>const</code> 关键字</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">button</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>变量与常量的命名规则与其它语言相同，额外的一条规则是不能以下划线开头，因为可能有特殊含义</p>
<h2 id="2-数据类型">2. 数据类型</h2>
<p>JS 的数据类型有</p>
<ul>
<li><strong>值类型(基本类型)</strong>：字符串（String）、数字(Number)、布尔(Boolean)、对空（Null）、未定义（Undefined）、Symbol。</li>
<li><strong>引用数据类型</strong>：对象(Object)、数组(Array)、函数(Function)。</li>
</ul>
<p>注：Symbol 是 ES6 引入了一种新的原始数据类型，表示独一无二的值。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">hello</span> <span class="o">=</span> <span class="s1">&#39;hello js!&#39;</span><span class="p">;</span> 		<span class="c1">// 字符串，单引号和双引号都可以，但应保持使用一种方式
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">myAge</span> <span class="o">=</span> <span class="mi">17</span><span class="p">;</span>			 		<span class="c1">// 数字,整数和浮点数都是数字类型
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">iAmAlive</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>     		<span class="c1">// 布尔
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">myNumberArray</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">40</span><span class="p">];</span> <span class="c1">// 数组
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">dog</span> <span class="o">=</span> <span class="p">{</span> <span class="nx">name</span> <span class="o">:</span> <span class="s1">&#39;Spot&#39;</span><span class="p">,</span> <span class="nx">breed</span> <span class="o">:</span> <span class="s1">&#39;Dalmatian&#39;</span> <span class="p">};</span> <span class="c1">//对象
</span></code></pre></td></tr></table>
</div>
</div><p>JavaScript是一种「动态类型语言」，这意味着不需要指定变量将包含什么数据类型（例如number或string）</p>
<h3 id="21-字符串">2.1 字符串</h3>
<p>格式转换</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">myString</span> <span class="o">=</span> <span class="s1">&#39;123&#39;</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">myNum</span> <span class="o">=</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">myString</span><span class="p">);</span> <span class="c1">// 字符串转换为数字
</span><span class="c1"></span><span class="nx">myString</span> <span class="o">=</span> <span class="nx">myNum</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>  <span class="c1">// 数字转换回字符串
</span></code></pre></td></tr></table>
</div>
</div><p>一些方法如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">browserType</span> <span class="o">=</span> <span class="s1">&#39;mozilla&#39;</span><span class="p">;</span>
<span class="nx">browserType</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>  				<span class="c1">// 获取字符串长度
</span><span class="c1"></span><span class="nx">browserType</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>						<span class="c1">// 看作字符数组，获取第一个字符
</span><span class="c1"></span><span class="nx">browserType</span><span class="p">[</span><span class="nx">browserType</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>  <span class="c1">// 获取最后一个字符
</span><span class="c1"></span><span class="nx">browserType</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;zilla&#39;</span><span class="p">);</span>   	<span class="c1">// 搜索子串，返回索引2
</span><span class="c1"></span><span class="nx">browserType</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;vanilla&#39;</span><span class="p">);</span> 	<span class="c1">// 返回-1
</span><span class="c1"></span><span class="nx">browserType</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span> 			<span class="c1">// 提取索引 0-2 的子串，slice方法类似Go的切片
</span><span class="c1"></span><span class="nx">browserType</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>   			<span class="c1">// 提取索引2开始直到字符串结束的子串
</span><span class="c1"></span><span class="nx">browserType</span> <span class="o">=</span> <span class="nx">browserType</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;moz&#39;</span><span class="p">,</span><span class="s1">&#39;van&#39;</span><span class="p">);</span> <span class="c1">// 子串替换
</span></code></pre></td></tr></table>
</div>
</div><p>大小写转换</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">radData</span> <span class="o">=</span> <span class="s1">&#39;My NaMe Is MuD&#39;</span><span class="p">;</span>
<span class="nx">radData</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">();</span>
<span class="nx">radData</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">();</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="22-数组">2.2 数组</h3>
<p>JS 中数组元素可以是同一种类型，也可以混合</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">sequence</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">];</span>
<span class="kd">let</span> <span class="nx">random</span> <span class="o">=</span> <span class="p">[</span><span class="s1">&#39;tree&#39;</span><span class="p">,</span> <span class="mi">795</span><span class="p">,</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">]];</span>
</code></pre></td></tr></table>
</div>
</div><p>可以获取长度</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">sequence</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">13</span><span class="p">];</span>
<span class="nx">sequence</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>   	 <span class="c1">// 返回 7
</span><span class="c1"></span><span class="nx">sequence</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">11</span><span class="p">);</span> 	 <span class="c1">// 在末尾添加元素 11
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">newLenght</span> <span class="o">=</span> <span class="nx">sequence</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">21</span><span class="p">,</span><span class="mi">22</span><span class="p">)</span> <span class="c1">// 一次可添加多个元素，返回值是新数组的长度, 可以不声明返回值
</span><span class="c1"></span><span class="kd">var</span> <span class="nx">removedItem</span> <span class="o">=</span> <span class="nx">sequence</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span>    <span class="c1">// 删除最后一个元素, 返回值是删除的元素
</span><span class="c1"></span><span class="nx">sequence</span><span class="p">.</span><span class="nx">unshift</span><span class="p">(</span><span class="mi">34</span><span class="p">);</span>  <span class="c1">// 在开头添加元素 34
</span><span class="c1"></span><span class="nx">sequence</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>      <span class="c1">// 删除开头的元素
</span><span class="c1"></span>
</code></pre></td></tr></table>
</div>
</div><p>尽管字符串可以看作字符数组，但也可以指定分隔符</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">let</span> <span class="nx">myData</span> <span class="o">=</span> <span class="s1">&#39;Manchester,London,Liverpool&#39;</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">myArray</span> <span class="o">=</span> <span class="nx">myData</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">);</span> <span class="c1">// myArray = [&#39;Manchester&#39;,&#39;London&#39;,&#39;Liverpool&#39;]
</span><span class="c1"></span><span class="nx">myArray</span><span class="p">.</span><span class="nx">lenght</span><span class="p">;</span> <span class="c1">// 返回 3
</span><span class="c1"></span><span class="nx">myArray</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>     <span class="c1">// 返回 &#39;Manchester&#39;
</span><span class="c1"></span><span class="kd">let</span> <span class="nx">myNewString</span> <span class="o">=</span> <span class="nx">myArray</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;,&#39;</span><span class="p">);</span> <span class="c1">// 相反的操作，数组转换成字符串
</span><span class="c1"></span><span class="nx">myArray</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span> <span class="c1">// 另外一种数组转换为字符串的方法，更简单，但无法指定分隔符
</span></code></pre></td></tr></table>
</div>
</div><h2 id="3-运算符">3. 运算符</h2>
<ul>
<li>算术运算符：+，-，*，/，%，**（幂）</li>
<li>递增递减运算符：++，&ndash;</li>
<li>赋值运算符：=，+=，-=，*=，/=</li>
<li>比较运算符：<code>===</code>，<code>!==</code>，&lt;，&gt;，&lt;=，&gt;=</li>
</ul>
<p><code>==</code> 和 <code>!=</code> 同样有效，但它们只测试值是否相等，数据类型可能不同，<code>===</code> 和 <code>!==</code> 严格测试值和数据类型是否相同，严格的版本出现的错误更少，因此推荐使用这种方式。</p>
<h2 id="4-控制结构">4. 控制结构</h2>
<p><strong>条件结构</strong>与其它语言相同</p>
<ul>
<li>
<p><code>if...else</code> 或者 <code>if...else if...else</code></p>
</li>
<li>
<p><code>switch...case...default</code>，需要主动执行 <code>break</code> 跳出</p>
</li>
<li>
<p>支持三元运算符：<code>( condition ) ? run this code : run this code instead</code></p>
</li>
</ul>
<p><strong>循环结构</strong>包含了我们接触过的所有写法</p>
<ul>
<li><code>for</code></li>
<li><code>do...while</code></li>
<li><code>while</code></li>
<li><code>for...in</code>，返回索引</li>
<li><code>for...of</code>，返回值</li>
</ul>
<p>最后，可以使用 <code>label</code> 来随意跳转，但没有想到任何这样做的好处</p>
<h2 id="5-函数">5. 函数</h2>
<p>使用 <code>function</code> 关键字定义，格式如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">func</span> <span class="nx">函数名</span><span class="p">(</span><span class="nx">形参列表</span><span class="p">){</span>
    <span class="p">...</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这里注意到的是 JS 中无需声明返回值列表，直接在函数体中使用 <code>return</code> 返回相应的值即可，参数也无需声明类型</p>
<p>JS 支持匿名函数（也称为函数表达式）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>但匿名函数主要用来相应事件触发</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">myButton</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="s1">&#39;hello&#39;</span><span class="p">);</span>
  <span class="c1">// I can put as much code
</span><span class="c1"></span>  <span class="c1">// inside here as I want
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>具名函数和匿名函数都可以赋值给变量</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">square</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="nx">number</span> <span class="o">*</span> <span class="nx">number</span><span class="p">;</span> <span class="p">};</span>
<span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="nx">square</span><span class="p">(</span><span class="mi">4</span><span class="p">);</span> <span class="c1">// x gets the value 16
</span><span class="c1"></span>
<span class="kd">var</span> <span class="nx">factorial</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">fac</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nx">n</span><span class="o">&lt;</span><span class="mi">2</span> <span class="o">?</span> <span class="mi">1</span> <span class="o">:</span> <span class="nx">n</span><span class="o">*</span><span class="nx">fac</span><span class="p">(</span><span class="nx">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)};</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">factorial</span><span class="p">(</span><span class="mi">3</span><span class="p">));</span>
</code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>JavaScript学习1-概览</title><link>https://shuzang.github.io/javascript-learning-1-overview/</link><pubDate>Fri, 22 May 2020 11:50:00 +0800</pubDate><author>作者</author><guid>https://shuzang.github.io/javascript-learning-1-overview/</guid><description><![CDATA[<p>JavaScript 是标准 Web 技术的第三层，负责实现动态的行为，比如实现交互式的地图、2D/3D动画、滚动播放的视频等。</p>
<p></p>
<p>JS 的标准是 ECMAScript，2015年发布了该标准的第六版，通常被称为 ECMAScript 6 或 ES6。此后，ECMAScript 每年发表一次新标准，至今最新的为 <a href="https://tc39.es/ecma262/" target="_blank" rel="noopener noreffer">ECMASCript2020</a></p>
<h2 id="1-api">1. API</h2>
<p><strong>浏览器 API</strong> 内建于浏览器中，JS 可以通过调用浏览器 API 筛选当前计算机环境的相关数据，从而实现复杂的工作，例如</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document_Object_Model" target="_blank" rel="noopener noreffer">文档对象模型 （DOM） API</a> 能动态地操作 HTML 和 CSS。比如当某个页面出现了一个弹窗，或者显示了一些新内容，这就是 DOM 在运行。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Geolocation" target="_blank" rel="noopener noreffer">地理位置 API（Geolocation API）</a> 获取地理信息。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API" target="_blank" rel="noopener noreffer">画布（Canvas）</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebGL_API" target="_blank" rel="noopener noreffer">WebGL</a> API 可以创建生动的 2D/3D 动画。比如 <a href="http://webglsamples.org/" target="_blank" rel="noopener noreffer">webglsamples</a>。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLMediaElement" target="_blank" rel="noopener noreffer">HTMLMediaElement</a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebRTC_API" target="_blank" rel="noopener noreffer">WebRTC</a> 等影音类 API 可以让我们利用多媒体，比如在网页中直接播放音乐和影片，或用自己的网络摄像头获取录像，然后在其他人的电脑上展示。</li>
</ul>
<p>第三方 API 则没有默认嵌入浏览器，需要从网上获得它们地代码和信息，比如：</p>
<ul>
<li><a href="https://dev.twitter.com/overview/documentation" target="_blank" rel="noopener noreffer">Twitter API</a>、<a href="https://open.weibo.com/" target="_blank" rel="noopener noreffer">新浪微博 API</a> 可以在网站上展示最新推文之类</li>
<li><a href="https://developers.google.com/maps/" target="_blank" rel="noopener noreffer">谷歌地图 API</a>、<a href="https://lbs.amap.com/" target="_blank" rel="noopener noreffer">高德地图 API</a> 可以在网站嵌入定制的地图等等。</li>
</ul>
<p>以合理的方式调用这些 API 是我们在使用 JS 过程中做的最多的事情。</p>
<h2 id="2-js-对页面做了什么">2. JS 对页面做了什么</h2>
<p>首先明确，HTML 和 CSS 都就位后，JS 才开始运行，因为 JS 主要作用是通过调用 DOM API 动态修改 HTML 和 CSS，如果同时执行，可能引发错误。</p>
<p>每个浏览器标签页是一个运行代码的独立容器，不同标签页中的代码一般不能相互影响。</p>
<p>JS 是解释型语言，代码自上而下运行，实时地返回运行结果，因此要注意代码书写的顺序。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kr">const</span> <span class="nx">para</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelector</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">);</span>

<span class="nx">para</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">updateName</span><span class="p">);</span>

<span class="kd">function</span> <span class="nx">updateName</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">prompt</span><span class="p">(</span><span class="s1">&#39;输入一个新的名字：&#39;</span><span class="p">);</span>
  <span class="nx">para</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">&#39;玩家1：&#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>上例中，首先选定一个文本段落，然后给它附上一个事件监听器，使得在它被点击时，<code>updateName()</code> 代码块（code block）便会运行。<code>updateName()</code> 向用户请求一个新名字，然后把这个名字插入到段落中以更新显示。如果互换前两行代码，浏览器开发者控制台将返回一个错误： <code>TypeError: para is undefined</code>。这意味着 <code>para</code> 对象还不存在，所以我们不能为它增添一个事件监听器。</p>
<h2 id="3-向页面添加-js">3. 向页面添加 JS</h2>
<p>CSS 使用 <code>&lt;style&gt;</code> 元素向 HTML 嵌入内部样式表，或者使用 <code>&lt;link&gt;</code> 元素链接外部样式表。JS 则只有一个元素可用：<code>&lt;script&gt;</code>，内部 JavaScript 是直接将代码放在标签中，例如</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="nb">document</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&#34;DOMContentLoaded&#34;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">function</span> <span class="nx">createParagraph</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">para</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">);</span>
    <span class="nx">para</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">&#39;你点击了这个按钮！&#39;</span><span class="p">;</span>
    <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">para</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="kr">const</span> <span class="nx">buttons</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">);</span>

  <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">buttons</span><span class="p">.</span><span class="nx">length</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">buttons</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">createParagraph</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span>
<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>外部 JavaScript 是将 JS 代码保存为文件，然后在 <code>&lt;script&gt; </code>标签中引用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">function</span> <span class="nx">createParagraph</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">para</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">);</span>
  <span class="nx">para</span><span class="p">.</span><span class="nx">textContent</span> <span class="o">=</span> <span class="s1">&#39;你点击了这个按钮！&#39;</span><span class="p">;</span>
  <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">para</span><span class="p">);</span>
<span class="p">}</span>

<span class="kr">const</span> <span class="nx">buttons</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">querySelectorAll</span><span class="p">(</span><span class="s1">&#39;button&#39;</span><span class="p">);</span>

<span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">buttons</span><span class="p">.</span><span class="nx">length</span> <span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">buttons</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s1">&#39;click&#39;</span><span class="p">,</span> <span class="nx">createParagraph</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>将上面的 JS 代码保存到 <code>script.js</code> 文件中，放在与 HTML 文件同目录下，然后在 HTML 文件中添加如下代码即可，效果是相同的。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;script.js&#34;</span> <span class="na">async</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>后者是推荐做法，应保存样式与动作分离。</p>
<h2 id="4-脚本调用时机">4. 脚本调用时机</h2>
<p>HTML 代码同样按次序调用，用 JS 管理页面元素时，若 JS 在欲操作的元素前加载，代码将出错。</p>
<p>第三部分中，内部 JS 代码调用时使用了事件监听器监听浏览器的 <code>DOMContentLoaded</code> 事件，当 HTML 文档体加载、解释完毕后，事件触发时才会调用代码，从而避免了错误发生。而外部 JS 代码则是声明了 <code>async</code> 异步属性来解决该问题，它告知浏览器在遇到 <code>&lt;script&gt;</code> 元素时不要中断后续 HTML 内容的加载。</p>
<p>原始的方法是将所有脚本元素放在 HTML 文档体末尾加载，但对 JS 代码比较多的网站性能损耗明显。</p>
<p>延缓加载 JS 有两种关键词：async 和 defer。前者是在加载 JS 代码的同时接着渲染后面的内容，相当于两件事并行完成，无法保证脚本调用的顺序，适用于页面种的脚本间相互独立的情况。如下，script2.js 可能在 jquery 之前执行。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">async</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;js/vendor/jquery.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">async</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;js/script2.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">async</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;js/script3.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><p>后者使脚本按照页面中出现的顺序加载，如下，执行顺序为严格的 jquery.js，script2.js，script3.js</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-html" data-lang="html"><span class="p">&lt;</span><span class="nt">script</span> <span class="na">defer</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;js/vendor/jquery.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">defer</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;js/script2.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">script</span> <span class="na">defer</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;js/script3.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
</code></pre></td></tr></table>
</div>
</div><h2 id="5-注释">5. 注释</h2>
<p>与大部分语言相同，JS 的单行注释也是 <code>//</code>，多行注释也是 <code>/* …… */</code></p>
]]></description></item></channel></rss>