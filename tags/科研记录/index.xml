<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>科研记录 - 标签 - Shuzang's Blog</title><link>https://shuzang.github.io/tags/%E7%A7%91%E7%A0%94%E8%AE%B0%E5%BD%95/</link><description>科研记录 - 标签 - Shuzang's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>lylw1996@qq.com (shuzang)</managingEditor><webMaster>lylw1996@qq.com (shuzang)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 04 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://shuzang.github.io/tags/%E7%A7%91%E7%A0%94%E8%AE%B0%E5%BD%95/" rel="self" type="application/rss+xml"/><item><title>符合泊松分布的事件模拟到达时间生成</title><link>https://shuzang.github.io/generate-random-timings-for-a-poisson-process/</link><pubDate>Tue, 04 Aug 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://shuzang.github.io/generate-random-timings-for-a-poisson-process/</guid><description><![CDATA[<p>我们要进行的仿真是在随机的时间执行随机的事件，这个时间就叫做事件到达时间。根据已有知识，随机的事件到达时间应该符合泊松分布，事件到达时间的间隔符合指数分布，实现时通常采用生成到达时间间隔的方式。这里的实现翻译了文章 <a href="https://preshing.com/20111007/how-to-generate-random-timings-for-a-poisson-process/" target="_blank" rel="noopener noreffer">How to Generate Random Timings for a Poisson Process</a>，使用的语言是 Go。</p>
<p>事件的发生是随机的，但是从总体上看，事件以平均的速率发生，这就是泊松过程。举个例子，USGS 预计每年全世界大约发生 13000 场 4 级以上的地震，这些地震发生的时间是随机的，但一定在 13000 场左右。</p>
<p>统计学中有大量的函数和方程用于建模泊松过程，这篇文章介绍了一种其中一种函数，并给出了一个实现程序。</p>
<h2 id="1-指数分布">1. 指数分布</h2>
<p>如果每年 13000 场地震，那么平均 40 分钟一场地震，所以定义变量 $\lambda = \frac{1}{40}$，称为速率参数，这是一个频率的衡量：单位时间（地震的例子里是分钟）发生事件（地震）的平均速率。</p>
<p>因此，接下来的问题是，下一分钟发生地震的概率是多少？下一个十分钟呢？这里有一个众所周知的函数，称为 指数分布的累积分布函数（cumulative distribution function for the exponential distribution），该函数看起来如下：
$$
F(x) = 1 - e^{-\lambda x}
$$</p>
<p></p>
<p>其含义是，随之时间的流逝，在世界上某个地方发生地震的可能性不断增大，这里「指数」的含义是指数衰减，随着时间流逝，不发生地震的可能性逐渐趋近于0，相应的，发生至少一场地震的可能性也趋向于1。</p>
<p>插入一些值，我们发现：</p>
<ul>
<li>下一分钟发生地震的可能性为 $F(1) \approx 0.0247$，该值无限接近于 $\frac{1}{40}$，这个我们预设的地震频率，但不相等；</li>
<li>下一个十分钟发生地震的可能性为 $F(10) \approx 0.221$</li>
</ul>
<p>特别的，下一个 40 分钟发生地震的可能性为 $F(40) \approx 0.632$，因此，40分钟的间隔内很可能发生地震，但不绝对。</p>
<h2 id="2-编写仿真">2. 编写仿真</h2>
<p>现在，假设我们要模拟游戏引擎或其他某种程序中地震的发生。首先，我们需要弄清楚每次地震的开始时间。</p>
<p>一种方法是循环，每隔 X 分钟之后，在 0 到 1 之间采样一个随机浮点值。如果该数字小于 $F(X)$，则开始地震。X 可以是一个小数值，因此可以每分钟采样几次，甚至每秒采样几次。只要随机数生成器是统一的并且提供足够的数值精度，这一个方法就会很好用。但是，如果打算以 $λ=\frac{1}{40}$ 每秒进行 60 次采样，随机数生成器需要至少18位精度，标准 C运行时库并不总是提供这一精度。</p>
<p>另一种方法是回避整个采样策略，只需编写一个函数即可确定下一次地震的确切时间。此函数应返回随机数，但不是大多数生成器生成的统一类型的随机数，而是以遵循指数分布的方式生成随机数。</p>
<p>Donald Knuth 在 「The Art of Computer Programming」一书的 3.4.1(D) 一节描述了一种生成这种值的方法，只需在 y 轴上选择介于 0 和 1 之间的均匀分布的随机点，然后在 x 轴上找到相应的时间值即可。例如，如果我们从下图 y 轴选择 0.2 点，那么到下一次地震的时间将是 64.38 分钟。</p>
<p></p>
<p>由于指数函数的反函数是 ln，写这个程序很简单，其中 U 是 0 到 1 之间的随机值：</p>
<h2 id="3-实现">3. 实现</h2>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;math&#34;</span>
	<span class="s">&#34;math/rand&#34;</span>
	<span class="s">&#34;time&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="nx">rand</span><span class="p">.</span><span class="nf">Seed</span><span class="p">(</span><span class="nx">time</span><span class="p">.</span><span class="nf">Now</span><span class="p">().</span><span class="nf">UnixNano</span><span class="p">())</span>
	<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nf">nextTime</span><span class="p">(</span><span class="mi">1</span> <span class="o">/</span> <span class="mf">40.0</span><span class="p">))</span>
	<span class="p">}</span>

<span class="p">}</span>

<span class="kd">func</span> <span class="nf">nextTime</span><span class="p">(</span><span class="nx">rateParameter</span> <span class="kt">float64</span><span class="p">)</span> <span class="kt">float64</span> <span class="p">{</span>
	<span class="k">return</span> <span class="o">-</span><span class="nx">math</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="mf">1.0</span><span class="o">-</span><span class="nx">rand</span><span class="p">.</span><span class="nf">Float64</span><span class="p">())</span> <span class="o">/</span> <span class="nx">rateParameter</span>
<span class="p">}</span>
<span class="c1">// Output:
</span><span class="c1"></span><span class="mf">3.645968256349058</span>
<span class="mf">21.416099701223878</span>
<span class="mf">27.140451644356354</span>
<span class="mf">132.53700107810388</span>
<span class="mf">10.94869965544849</span>
</code></pre></td></tr></table>
</div>
</div><p>经测试，该函数返回的平均时间确实为40</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;fmt&#34;</span>
	<span class="s">&#34;testing&#34;</span>
<span class="p">)</span>

<span class="kd">func</span> <span class="nf">TestNextTime</span><span class="p">(</span><span class="nx">t</span> <span class="o">*</span><span class="nx">testing</span><span class="p">.</span><span class="nx">T</span><span class="p">)</span> <span class="p">{</span>
	<span class="kd">var</span> <span class="nx">sum</span> <span class="kt">float64</span>
	<span class="k">for</span> <span class="nx">k</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">k</span> <span class="p">&lt;</span> <span class="mi">10</span><span class="p">;</span> <span class="nx">k</span><span class="o">++</span> <span class="p">{</span>
		<span class="k">for</span> <span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="p">&lt;</span> <span class="mi">1000000</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span> <span class="p">{</span>
			<span class="nx">sum</span> <span class="o">+=</span> <span class="nf">nextTime</span><span class="p">(</span><span class="mi">1</span> <span class="o">/</span> <span class="mf">40.0</span><span class="p">)</span>
		<span class="p">}</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="nx">sum</span> <span class="o">/</span> <span class="mi">1000000</span><span class="p">)</span>
		<span class="nx">sum</span> <span class="p">=</span> <span class="mi">0</span>
	<span class="p">}</span>
<span class="p">}</span>
<span class="c1">// Output:
</span><span class="c1"></span><span class="o">==</span><span class="p">=</span> <span class="nx">RUN</span>   <span class="nx">TestNextTime</span>
<span class="mf">39.936436485414866</span>
<span class="mf">40.073299195147676</span>
<span class="mf">40.02405410596529</span>
<span class="mf">39.984823394877324</span>
<span class="mf">39.970452381128254</span>
<span class="mf">40.05045384327815</span>
<span class="mf">39.94419161580051</span>
<span class="mf">40.038542654941246</span>
<span class="mf">39.983753932119754</span>
<span class="mf">40.029867240804506</span>
<span class="o">---</span> <span class="nx">PASS</span><span class="p">:</span> <span class="nf">TestNextTime</span> <span class="p">(</span><span class="mf">0.42</span><span class="nx">s</span><span class="p">)</span>
<span class="nx">PASS</span>
<span class="nx">ok</span>  	<span class="nx">github</span><span class="p">.</span><span class="nx">com</span><span class="o">/</span><span class="nx">shuzang</span><span class="o">/</span><span class="nx">test</span>	<span class="mf">0.652</span><span class="nx">s</span>
</code></pre></td></tr></table>
</div>
</div><p>实际上，Go 在 math/rand 库中本身就提供了一个生成符合指数分布的随机数的函数，叫做 <code>rand.ExpFloat64()</code>。实现的算法使用的是 Marsaglia 和 Tsang 在 2000 年发布的论文 <a href="https://www.jstatsoft.org/v05/i08/paper" target="_blank" rel="noopener noreffer">The Ziggurat Method for Generating Random Variables</a></p>
<h2 id="4-其它仿真器">4. 其它仿真器</h2>
<p><a href="http://akeranen.github.io/the-one/" target="_blank" rel="noopener noreffer">The One</a> 是一个 opportunistic Network Environment simulator，可以设置一个仿真的 IoT 网络，参数包括网络中设备数目、带宽、通信到达时间等，使用不同的模型生成随机的运动和通信，并将过程可视化。</p>]]></description></item><item><title>区块链实验8-实验流程优化及性能测试</title><link>https://shuzang.github.io/experimental-process-optimization-and-performance-test/</link><pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://shuzang.github.io/experimental-process-optimization-and-performance-test/</guid><description><![CDATA[<p>我们对之前的实验流程做了进一步的优化，并且对添加恶意行为检测后的系统进行了进一步的性能测试。</p>
<h2 id="1-实验流程优化">1. 实验流程优化</h2>
<p>上一次实验我们搭建 Quorum 私链网络是采用从零开始的方式，从 genesis.json 文件开始，手动编辑配置文件、创建节点、最后组建网络，不仅耗费时间，而且一旦错误就要重新开始，浪费了大量无意义的精力。另外，我们还需要一个区块链浏览器可视化网络、区块、交易和合约的状态，与智能合约的交互也需要优化，虽然 Truffle 集成了合约的部署和测试工作，但依然存在一些不足，国内也无法使用 <code>truffle init</code> 命令。</p>
<p>针对以上问题，结合 Quorum 社区的最新进展，我们本次调整了实验方案所使用的工具和手段：</p>
<ol>
<li>使用 <a href="https://github.com/jpmorganchase/quorum-wizard" target="_blank" rel="noopener noreffer">Quorum Wizard</a> 命令行工具快速建立 Quorum 网络；</li>
<li>使用 <a href="https://github.com/jpmorganchase/cakeshop" target="_blank" rel="noopener noreffer">Cakeshop</a> 可视化区块链和智能合约状态；</li>
<li>使用 <a href="https://remix.ethereum.org/" target="_blank" rel="noopener noreffer">Remix</a>  + <a href="https://github.com/jpmorganchase/quorum-remix" target="_blank" rel="noopener noreffer">Quorum Plugin for Remix</a> 的组合部署合约及与合约交互；</li>
</ol>
<p>最后，我们对一些注意事项进行说明：</p>
<ol>
<li>Quourm Wizard 建立网络有 Bash 、 Docker-compse 和 kubernete 三种可选方式，我们使用第一种，但会尝试一下第二种；</li>
<li>之前在树莓派中建立区块链账户表示物联网网络和设备，但树莓派放在了实验室，由于疫情原因无法拿到手，因此本次建立一个 7 节点的私链网络，挑选一个节点代表物联网网关，然后建立一个新的账户表示设备，从而进行实验。</li>
</ol>
<p>最后，确定本次方案时还有一些备选方案，比如 <a href="https://github.com/blk-io/epirus-free" target="_blank" rel="noopener noreffer">Epirus-free</a> 也是一个可用的 Quorum 区块链浏览器，但结构比较简单，展示的参数也比较少，而且我们测试的时候迟迟无法加载出来数据，因此不选用。</p>
<p><a href="https://github.com/synechron-finlabs/quorum-maker" target="_blank" rel="noopener noreffer">quorum-maker</a> 是一个一体化方案，可以快速建立基于 Docker 的 Quorum 网络，并提供一个区块链浏览器查看区块链和合约状态，各方面的功能都足够晚上，唯一的问题是对 IBFT 共识的支持还处在开发阶段，暂时不可用，因此我们只能选择上述多个工具组合的方法完成本次实验。</p>
<h3 id="11-环境准备">1.1 环境准备</h3>
<p>Win10 Home Edition 不支持 Docker，且实验中涉及的组件比较多，我们决定使用虚拟机来启动一个 Linux 环境。另外，方案中的几个工具对依赖的要求如下：</p>
<ol>
<li>Quorum Wizard：
<ul>
<li>基于 Bash 建立网络：如果需要隐私管理器，需要 Java 环境</li>
<li>基于 Docker Compse：需要 Docker 和 docker-compose</li>
<li>基于 Kubernetes：需要 Docker、kubectl 和 minikube</li>
</ul>
</li>
<li>Cakeshop：需要 Java 8+ 及 Node.js</li>
<li>Geth 提供了接口供 Golang 使用来进行账户管理和合约监听，因为实验测试有可能用到，我们安装 Golang</li>
</ol>
<p>根据说明，我们开始准备实验环境</p>
<ol>
<li>
<p>安装 VMware Workstation 15 Pro，输入批量许可激活，建立 Ubuntu20.04 系统的虚拟机，分配内存 4G（有条件应为8G，这里是因为电脑配置比较低，一共只有8G，再多发生内存交换的概率比较大）、硬盘100GB。</p>
</li>
<li>
<p>进入 Ubuntu 20.04，更新系统，设置语言</p>
</li>
<li>
<p>安装git、golang、Java</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 安装git</span>
$ sudo apt install -y git
$ git version
git version 2.25.1
   
<span class="c1"># 安装golang</span>
$ sudo apt install -y golang
$ go version
go version go1.14.4 linux/amd64
   
<span class="c1"># 安装 JRE</span>
$ sudo apt install default-jre
$ java -version
openjdk version <span class="s2">&#34;11.0.7&#34;</span> 2020-04-14
OpenJDK Runtime Environment <span class="o">(</span>build 11.0.7+10-post-Ubuntu-3ubuntu1<span class="o">)</span>
OpenJDK 64-Bit Server VM <span class="o">(</span>build 11.0.7+10-post-Ubuntu-3ubuntu1, mixed mode, sharing<span class="o">)</span>
   
<span class="c1"># 安装JDK</span>
$ sudo apt install default-jdk
$ javac -version
javac 11.0.7
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>安装 Node 和 npm，由于直接安装后在使用 npm 全局安装包时会出现权限错误，因此使用 Node.js 版本管理工具 <a href="https://github.com/tj/n" target="_blank" rel="noopener noreffer">n</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo apt install curl
$ curl -L https://git.io/n-install <span class="p">|</span> bash
<span class="c1"># 重启终端</span>
$ n lts
   
  installing : node-v12.18.0
       mkdir : /home/shuzang/n/n/versions/node/12.18.0
       fetch : https://nodejs.org/dist/v12.18.0/node-v12.18.0-linux-x64.tar.xz
   installed : v12.18.0 <span class="o">(</span>with npm 6.14.4<span class="o">)</span>
   
<span class="c1"># 更新 npm 到最新，顺便测试全局安装</span>
$ npm install -g npm@latest
/home/shuzang/n/bin/npm -&gt; /home/shuzang/n/lib/node_modules/npm/bin/npm-cli.js
/home/shuzang/n/bin/npx -&gt; /home/shuzang/n/lib/node_modules/npm/bin/npx-cli.js
+ npm@6.14.5
updated <span class="m">5</span> packages in 16.718s
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>（可选）docker 和 docker-compose</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 安装 docker CE</span>
$ curl -fsSL get.docker.com -o get-docker.sh
$ sudo sh get-docker.sh --mirror Aliyun
<span class="c1"># 启动 docker CE</span>
$ sudo systemctl <span class="nb">enable</span> docker
$ sudo systemctl start docker
<span class="c1"># 建立 docker 用户组并将当前用户加入 docker 组，这样就不需要 root 权限了</span>
$ sudo groupadd docker
$ sudo usermod -aG docker <span class="nv">$USER</span>
<span class="c1"># 测试安装</span>
$ docker run hello-world
<span class="c1"># 安装 docker-compose</span>
$ sudo curl -L https://github.com/docker/compose/releases/download/1.25.5/docker-compose-<span class="sb">`</span>uname -s<span class="sb">`</span>-<span class="sb">`</span>uname -m<span class="sb">`</span> &gt; /usr/local/bin/docker-compose
$ sudo chmod +x /usr/local/bin/docker-compose
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h3 id="12-建立测试网络">1.2 建立测试网络</h3>
<p>全局安装 quorum-wizard</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ npm install -g quorum-wizard
</code></pre></td></tr></table>
</div>
</div><p>运行向导，建立测试网络，<code>-v</code> 参数用于输出日志记录。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span><span class="lnt">93
</span><span class="lnt">94
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ quorum-wizard -v
...
Welcome to Quorum Wizard!

This tool allows you to easily create bash, docker, and kubernetes files to star
t up a quorum network.
You can control consensus, privacy, network details and more <span class="k">for</span> a customized se
tup.
Additionally you can choose to deploy our chain explorer, Cakeshop, to easily vi
ew and monitor your network.
? 
Welcome to Quorum Wizard!

This tool allows you to easily create bash, docker, and kubernetes files to star
t up a quorum network.
You can control consensus, privacy, network details and more <span class="k">for</span> a customized se
tup.
Additionally you can choose to deploy our chain explorer, Cakeshop, to easily vi
ew and monitor your network.
? 
Welcome to Quorum Wizard!

This tool allows you to easily create bash, docker, and kubernetes files to star
t up a quorum network.
You can control consensus, privacy, network details and more <span class="k">for</span> a customized se
tup.
Additionally you can choose to deploy our chain explorer, Cakeshop, to easily vi
ew and monitor your network.

We have <span class="m">3</span> options to <span class="nb">help</span> you start exploring Quorum:

  1.  Quickstart - our <span class="m">1</span> click option to create a <span class="m">3</span> node raft network with tesse
ra and cakeshop

  2.  Simple Network - using pregenerated keys from quorum 7nodes example,
      this option allows you to choose the number of nodes <span class="o">(</span><span class="m">7</span> max<span class="o">)</span>, consensus me
chanism, transaction manager, and the option to deploy cakeshop

  3.  Custom Network - In addition to the options available in <span class="c1">#2, this selectio</span>
n allows <span class="k">for</span> further customization of your network.
      Choose to generate keys, customize ports <span class="k">for</span> both bash and docker, or chan
ge the network id

Quorum Wizard will generate your startup files and everything required to bring 
up your network.
All you need to <span class="k">do</span> is go to the specified location and run ./start.sh

 Simple Network
? Would you like to generate bash scripts, a docker-compose file, or a kubernete
s config to bring up your network? bash
? Select your consensus mode - istanbul is a pbft inspired algorithm with transa
ction finality <span class="k">while</span> raft provides faster blocktimes, transaction finality and o
n-demand block creation istanbul
? Input the number of nodes <span class="o">(</span>2-7<span class="o">)</span> you would like in your network - a minimum of 
<span class="m">4</span> is recommended <span class="m">4</span>
? Which version of Quorum would you like to use? Quorum 2.6.0
? Choose a version of tessera <span class="k">if</span> you would like to use private transactions in y
our network, otherwise choose <span class="s2">&#34;none&#34;</span> Tessera 0.10.5
? Do you want to run Cakeshop <span class="o">(</span>our chain explorer<span class="o">)</span> with your network? Yes
? What would you like to call this network? 4-nodes-istanbul-tessera-bash
...
Building network directory...
Generating network resources locally...
Building qdata directory...
Writing start script...
Initializing quorum...
Done
--------------------------------------------------------------------------------

Tessera Node <span class="m">1</span> public key:
BULeR8JyUWhiuuCMU/HLA0Q5pzkYT+cHII3ZKBey3Bo<span class="o">=</span>

Tessera Node <span class="m">2</span> public key:
QfeDAys9MPDs2XHExtc84jKGHxZg/aj52DTh0vtA3Xc<span class="o">=</span>

Tessera Node <span class="m">3</span> public key:
1iTZde/ndBHvzhcl7V68x44Vx7pl8nwx9LqnM/AfJUg<span class="o">=</span>

Tessera Node <span class="m">4</span> public key:
<span class="nv">oNspPPgszVUFw0qmGFfWwh1uxVUXgvBxleXORHj07g8</span><span class="o">=</span>

--------------------------------------------------------------------------------
Quorum network created

Run the following commands to start your network:

<span class="nb">cd</span> network/4-nodes-istanbul-bash
./start.sh

A sample simpleStorage contract is provided to deploy to your network
To use run ./runscript.sh public-contract.js from the network folder

A private simpleStorage contract was created with privateFor <span class="nb">set</span> to use Node 2<span class="err">&#39;</span>s public key: QfeDAys9MPDs2XHExtc84jKGHxZg/aj52DTh0vtA3Xc<span class="o">=</span>
To use run ./runscript private-contract.js from the network folder
</code></pre></td></tr></table>
</div>
</div><p>在向导执行页面选择了运行 Cakeshop 的情况下，不需要自己再去安装 Cakeshop，可以直接启动。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">cd</span> network/4-nodes-istanbul-bash
$ ./start.sh

Starting Quorum network...

Waiting <span class="k">until</span> all Tessera nodes are running...
...
All Tessera nodes started
Starting Quorum nodes
Starting Cakeshop
Waiting <span class="k">until</span> Cakeshop is running...
...
Cakeshop started at http://localhost:8999
Successfully started Quorum network.
</code></pre></td></tr></table>
</div>
</div><p>此时浏览器打开 http://localhost:8999 页面，可以看到网络情况</p>
<p></p>
<h3 id="13-remix-部署和交互说明">1.3 Remix 部署和交互说明</h3>
<p>浏览器打开  <a href="https://remix.ethereum.org/" target="_blank" rel="noopener noreffer">Remix IDE</a> （保证是 http 页面），点击左侧 Plugins（插件）标签页，搜索 <code>Quorum Network</code>，点击 <code>Activate</code> 激活插件。</p>
<p></p>
<p>在左侧标签栏寻找激活的插件，图标为 </p>
<p>我们上面运行的网络各节点的 url 分别为</p>
<table>
<thead>
<tr>
<th>节点</th>
<th>url</th>
</tr>
</thead>
<tbody>
<tr>
<td>Node1</td>
<td>Quorum RPC：http://localhost:22000<br>Tessera：http://localhost:9081</td>
</tr>
<tr>
<td>Node2</td>
<td>Quorum RPC：http://localhost:22001<br>Tessera：http://localhost:9082</td>
</tr>
<tr>
<td>Node3</td>
<td>Quorum RPC：http://localhost:22002<br/>Tessera：http://localhost:9083</td>
</tr>
<tr>
<td>Node4</td>
<td>Quorum RPC：http://localhost:22003<br/>Tessera：http://localhost:9084</td>
</tr>
</tbody>
</table>
<p>输入 Node1 的 Quroum RPC 和 Tessera 的 url，点击确认，得到如下的侧面板</p>
<p></p>
<p>从 Github 导入我们的合约</p>
<p></p>
<p>Quorum-Remix 插件使用 Remix 的 Solidity 编译器的结果，所以在 Remix 编译后的合约可以在Quorum插件的 <code>Compiled Contracts</code> 选项下找到，到时候输入参数点击部署即可，操作与 Remix 原本的 Deploy 选项卡完全一致。</p>
<p>最后，运行 <code>.stop.sh</code> 脚本可以停止所有的 quorum/geth 和 cakeshop 实例。</p>
<p>如果我们编写了交互用的 js 脚本，假设脚本名为 test.js，可以使用如下命令执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ ./runscript.sh test.js
</code></pre></td></tr></table>
</div>
</div><p>有输入参数的情况下，可以使用 Bash 、Python 或 Go 有选择的批量执行脚本。</p>
<p>值得注意到是，我们上述没有使用隐私管理器，但这是 Quorum 的一个最重要的特性。</p>
<h3 id="14-错误排查记录">1.4 错误排查记录</h3>
<p><strong>2020.06.08</strong></p>
<p>Remix 无法显示所有插件，因此无法使用 Quorum Network 插件连接 Quorum 网络，经排查，为网络原因，连接手机开的热点后即可看到所有插件，深层原因未知。</p>
<p><strong>2020.06.09</strong></p>
<p>合约编译返回错误 <code>Uncaught JavaScript exception: RangeError: Maximum call stack size exceeded.</code></p>
<p>调用栈溢出，猜测可能是虚拟机内存分配不足，在宿主机中使用 Remix 通过局域网 IP 地址连接</p>
<p>宿主机浏览器无法访问 http 连接，换用 Firefox 或者使用 Remix-IDE 桌面版本都无法访问</p>
<p>考虑到此时 Remix 与 后台 Quorum 网络拆分，尝试使用 WSL 子系统，并使用 npm 安装 remix-ide</p>
<p>WSL 对 npm 支持不友好，普通用户和 root 用户权限全部被拒绝，所有包都无法安装</p>
<p>尝试在 win10 本地使用 npm 安装 remix，依赖过多，安装无法完成</p>
<p>重新尝试解决 win10 系统下无法访问 http 网页的错误，关闭防火墙不起作用，恢复 hosts 文件起作用，经确认，无法访问 http 网页是因为 hosts 文件被修改</p>
<p>重新尝试虚拟机的 Ubuntu 系统编译智能合约，Chrome 浏览器失败，Firefox 浏览器成功，确认不是因为内存分配不足。</p>
<h2 id="2-性能测试">2. 性能测试</h2>
<p>根据上篇最后一小节的分析，性能测试分为三部分：隐私合约及交易测试，访问控制系统测试和恶意行为检测部分的测试。</p>
<h3 id="21-隐私功能测试">2.1 隐私功能测试</h3>
<p>隐私合约及交易是 Quorum 自带的功能，本身不是我们实现的，因此测试只是验证该功能是否启用。合约的部署与交互使用了 Quorum for Remix 插件，该插件在 Remix 的插件列表中可以找到。测试用的合约如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">pragma</span> <span class="nx">solidity</span> <span class="o">^</span><span class="mf">0.5.4</span><span class="p">;</span>
<span class="nx">contract</span> <span class="nx">SimpleStorage</span> <span class="p">{</span>

    <span class="nx">uint</span> <span class="nx">storedData</span><span class="p">;</span>

    <span class="nx">event</span> <span class="nx">Change</span><span class="p">(</span><span class="nx">string</span> <span class="nx">message</span><span class="p">,</span> <span class="nx">uint</span> <span class="nx">newVal</span><span class="p">);</span>

    <span class="nx">constructor</span><span class="p">(</span><span class="nx">uint</span> <span class="nx">initVal</span><span class="p">)</span> <span class="kr">public</span> <span class="p">{</span>
        <span class="nx">emit</span> <span class="nx">Change</span><span class="p">(</span><span class="s2">&#34;initialized&#34;</span><span class="p">,</span> <span class="nx">initVal</span><span class="p">);</span>
        <span class="nx">storedData</span> <span class="o">=</span> <span class="nx">initVal</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nx">set</span><span class="p">(</span><span class="nx">uint</span> <span class="nx">x</span><span class="p">)</span> <span class="kr">public</span> <span class="p">{</span>
        <span class="nx">emit</span> <span class="nx">Change</span><span class="p">(</span><span class="s2">&#34;set&#34;</span><span class="p">,</span> <span class="nx">x</span><span class="p">);</span>
        <span class="nx">storedData</span> <span class="o">=</span> <span class="nx">x</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nx">get</span><span class="p">()</span> <span class="nx">view</span> <span class="kr">public</span> <span class="nx">returns</span> <span class="p">(</span><span class="nx">uint</span> <span class="nx">retVal</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">storedData</span><span class="p">;</span>
    <span class="p">}</span>

<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>我们令Node2 代表农场，Node3 代表超市，假设农场部署了一个私有存储合约，状态只能被超市查看。农场部署合约传入一个初始值 50，理论上，Node2 和 Node3 可以通过调用 get() 函数获取到该数据，其它的节点无法查看该数据。</p>
<p>因此我们分别进入 Node3（超市） 和 Node4 的 Geth console 进行验证，如下图所示，左侧是 Node3，可以查看合约状态并获取数据，右边是 Node4，无法查看合约状态，也无法获得数据。</p>
<p></p>
<p>从 Cakeshop 区块链浏览器可以更清楚地看到两种情况</p>
<p></p>
<p></p>
<h3 id="22-访问控制时间测试">2.2 访问控制时间测试</h3>
<p>主要测试参数为完成一次访问控制的时间，期间我们要确认信誉系统的加入是否对访问控制时间有影响，以及不同的访问控制方案是否对时间有影响。</p>
<h4 id="221-测试准备">2.2.1 测试准备</h4>
<p>第一部分隐私功能测试时使用了 Quorum for Remix 插件，由于该插件在 Remix 中无法返回执行结果，在非隐私交易时不具备优势，因此访问控制系统时间测量的预准备工作，包括合约部署和交互，使用了 Remix 自己提供的 Deploy and Run 插件，主要利用 Web3 Provider 来连接 Quorum 网络进行操作。连接端口在 geth 启动时已默认打开，我们使用的三个节点对应的 Web3 端口如下</p>
<ul>
<li>Node1：22000</li>
<li>Node2：22001</li>
<li>Node3：22002</li>
</ul>
<p>另外，我们单独安装 Web3.js 并编写 JS 代码来进行访问控制</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 在用户根目录建立web3文件夹</span>
$ mdkir web3
$ <span class="nb">cd</span> web3
<span class="c1"># 在web3文件夹中本地安装 web3 1.2.8 版本，之前的版本有些依赖不再维护，安装会出错</span>
$ npm install web3@1.2.8
</code></pre></td></tr></table>
</div>
</div><p>为了获取足够样本进行分析，我们要进行大量的访问控制测试并获取每次的访问控制时间，先后使用的方案有三种，我们会阐述前两种方案不可行的原因</p>
<ol>
<li>
<p>在 JS 脚本中设立循环，使用 setInterval() 函数延时固定的时间发起访问控制，得到的结果中，初次访问控制的时间为 10ms 左右，其后迅速减少，在 1ms 和 2ms 左右浮动。查询后发现，Javascript 中 setInterval 函数的实质是每隔一段时间向任务队列中添加回调函数，开始执行的时间是不确定的，最后导致了时间统计的不确定性。</p>
</li>
<li>
<p>使用 Shell 脚本编写循环，在循环中调用 JS 代码，然后使用 sleep 函数设置延时，访问时间的获取是通过 Javascript Date 对象的 getTime 方法，在发起访问控制前获取了一次时间，在获得结果后获取了第二次时间，然后求其差值。最后得到的结果发现，访问控制时间受发起访问的时机影响，呈周期性波动，也受 CPU 占用率的影响，占用率越高时间越短，显然这一结果是不合理的。关于这一次尝试的结果，可以查看第 2.5 节。</p>
</li>
<li>
<p>使用 Linux time 命令获取执行时间，我们猜测周期性的出现是系统中其它进程的影响，为了排除它们的影响，我们使用了 Linux 的 time 命令。当测试一个程序或比较不同算法时，执行时间是非常重要的，一个好的算法应该是用时最短的。所有类UNIX系统都包含time命令，使用这个命令可以统计时间消耗。例如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="o">[</span>root@localhost ~<span class="o">]</span><span class="c1"># time ls</span>
anaconda-ks.cfg  install.log  install.log.syslog  satools  text
   
real    0m0.009s
user    0m0.002s
sys     0m0.007s
</code></pre></td></tr></table>
</div>
</div><p>输出的信息分别显示了该命令所花费的real时间、user时间和sys时间。</p>
<ul>
<li>real时间是指挂钟时间，也就是命令开始执行到结束的时间。这个短时间包括其他进程所占用的时间片，和进程被阻塞时所花费的时间。</li>
<li>user时间是指进程花费在用户模式中的CPU时间，这是唯一真正用于执行进程所花费的时间，其他进程和花费阻塞状态中的时间没有计算在内。</li>
<li>sys时间是指花费在内核模式中的CPU时间，代表在内核中执系统调用所花费的时间，这也是真正由进程使用的CPU时间。</li>
</ul>
<p>shell内建也有一个time命令，当运行time时候是调用的系统内建命令，应为系统内建的功能有限，所以需要时间其他功能需要使用time命令可执行二进制文件<code>/usr/bin/time</code>。所以我们使用 <code>/usr/bin/time</code> 获取执行访问控制的时间，然后计算 user 和 sys 的和，得到的结果就是访问控制实际执行所花费的 CPU时间。</p>
</li>
</ol>
<p>参考：<a href="https://man.linuxde.net/time" target="_blank" rel="noopener noreffer">Linux time命令</a></p>
<p>我们首先建立 <code>xtime</code> 文件(无后缀)，将如下内容写入</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="cp">#!/bin/sh
</span><span class="cp"></span>/usr/bin/time -f <span class="s1">&#39;%Uu %Ss %er %P&#39;</span> <span class="s2">&#34;</span><span class="nv">$@</span><span class="s2">&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p><code>-f</code> 参数用于指定输出格式，<code>-f</code> 后面的几个参数说明如下</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">%e</td>
<td style="text-align:left">real时间</td>
</tr>
<tr>
<td style="text-align:left">%U</td>
<td style="text-align:left">user时间</td>
</tr>
<tr>
<td style="text-align:left">%S</td>
<td style="text-align:left">sys时间</td>
</tr>
<tr>
<td style="text-align:left">%P</td>
<td style="text-align:left">进程所获取的CPU时间百分百，这个值等于user+system时间除以总共的运行时间。</td>
</tr>
</tbody>
</table>
<p>然后建立 shell 脚本，命名为 runscript.sh，内容为</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="cp">#!/bin/bash
</span><span class="cp"></span>
<span class="k">for</span> <span class="o">((</span><span class="nv">i</span><span class="o">=</span>1<span class="p">;</span>i&lt;<span class="o">=</span>500<span class="p">;</span>i++<span class="o">))</span><span class="p">;</span>  <span class="k">do</span>   
  ./xtime node requester_legal.js
  sleep <span class="m">5</span>
<span class="k">done</span> 
</code></pre></td></tr></table>
</div>
</div><p>其中，requester_legal.js 是完成访问控制的 JS 文件，接下来授予 xtime 和 runscript.sh 执行权限</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ chmod <span class="m">777</span> xtime
$ chmod <span class="m">777</span> runscript.sh
</code></pre></td></tr></table>
</div>
</div><p>执行 Shell 脚本之前，我们需要先解锁发起访问的账户，由于我们会一次性进行 500 次测试，每次间隔 5 s，因此一次性将账户解锁 2500s 以上，这里我们设置 4000s。解锁相应账户的命令如下，第二个参数为密码，第三个参数为时间。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">&gt;</span> <span class="nx">personal</span><span class="p">.</span><span class="nx">unlockAccount</span><span class="p">(</span><span class="nx">eth</span><span class="p">.</span><span class="nx">accounts</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="mi">4000</span><span class="p">)</span>
<span class="o">&gt;</span> <span class="nx">personal</span><span class="p">.</span><span class="nx">unlockAccount</span><span class="p">(</span><span class="nx">eth</span><span class="p">.</span><span class="nx">accounts</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="mi">4000</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>执行 runscript.sh 脚本即可开始测试</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ ./runscript
0.55 0.08 5.02 12%
0.54 0.07 4.96 12%
0.54 0.11 5.00 13%
0.55 0.09 5.02 12%
...
</code></pre></td></tr></table>
</div>
</div><p>所有的时间会输出到终端，如上面的格式，第一列是用户态运行时间，第二列是内核态运行时间，第三列是实际运行时间，最后一列是进程所获取的CPU时间比例。</p>
<p>注1：设备发起访问控制时，应当首先获取目标设备绑定的访问控制合约地址，该地址可以根据设备账户在管理合约中查询得到，但这里我们为了测试方便，选择预定义，而不是每次去查询。</p>
<p>注2：所有的代码文件都放在 github 仓库中。</p>
<h4 id="222-无信誉系统">2.2.2 无信誉系统</h4>
<p>完整的方案中包含 MC（管理合约）、ACC（访问控制合约）和RC（信誉合约），现在，我们将 RC 从系统中移除，并删除 MC 和 ACC 中所有相关的调用。</p>
<p>JS 文件基本逻辑如下，可以看到，前面都是变量定义的过程，执行主体是访问控制函数，当获取到 receipt 时退出（返回的事件位于 receipt 中，可以输出确认一下，正式测试时为了输出结果的格式可以只用 receipt.status判断即可）。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">Web3</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;web3&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">web3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Web3</span><span class="p">(</span><span class="nx">Web3</span><span class="p">.</span><span class="nx">givenProvider</span> <span class="o">||</span> <span class="s2">&#34;ws://localhost:23000&#34;</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">accAbi</span> <span class="o">=</span> <span class="s2">&#34;这里是合约ABI&#34;</span>
<span class="kd">var</span> <span class="nx">accAddr</span> <span class="o">=</span> <span class="s2">&#34;这里是合约地址&#34;</span>

<span class="kd">var</span> <span class="nx">myACC</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">web3</span><span class="p">.</span><span class="nx">eth</span><span class="p">.</span><span class="nx">Contract</span><span class="p">(</span><span class="nx">accAbi</span><span class="p">,</span> <span class="nx">accAddr</span><span class="p">);</span>

<span class="nx">myACC</span><span class="p">.</span><span class="nx">methods</span><span class="p">.</span><span class="nx">accessControl</span><span class="p">(</span><span class="s2">&#34;这里是传入的参数列表&#34;</span><span class="p">).</span><span class="nx">send</span><span class="p">({</span>
	<span class="nx">from</span><span class="o">:</span> <span class="s2">&#34;这里是发起访问的账户地址&#34;</span><span class="p">,</span>
	<span class="nx">gas</span><span class="o">:</span> <span class="mi">10000000</span><span class="p">,</span>
	<span class="nx">gasPrice</span><span class="o">:</span> <span class="mi">0</span>
<span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">receipt</span><span class="p">){</span>
	<span class="k">if</span> <span class="p">(</span><span class="nx">receipt</span><span class="p">.</span><span class="nx">status</span><span class="p">)</span> <span class="p">{</span>
	    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">receipt</span><span class="p">)</span>
        <span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>        
	<span class="p">}</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>合约部署时得到的结果如下</p>
<table>
<thead>
<tr>
<th>合约</th>
<th>Gas 消耗</th>
</tr>
</thead>
<tbody>
<tr>
<td>MC</td>
<td>1958457</td>
</tr>
<tr>
<td>ACC</td>
<td>4128313</td>
</tr>
</tbody>
</table>
<p>合约部署完毕后定义属性和策略，最后根据具体情况修改 JS 和 Shell 脚本，500 次访问时间的平均值为  0.62682s，最大值为 0.99s，最小值为 0.57s。</p>
<h4 id="223-恶意行为检测加入">2.2.3 恶意行为检测加入</h4>
<p>加入信誉合约 RC 后进行测试，部署合约、注册设备、定义属性和策略。三种合约部署的 Gas 消耗分别为</p>
<table>
<thead>
<tr>
<th>合约</th>
<th>Gas 消耗</th>
</tr>
</thead>
<tbody>
<tr>
<td>MC</td>
<td>2512367</td>
</tr>
<tr>
<td>ACC</td>
<td>4749983</td>
</tr>
<tr>
<td>RC</td>
<td>1170616</td>
</tr>
</tbody>
</table>
<p>注意，我们在访问控制合约初始化时设定了两次访问控制请求间隔应不少于 100s，否则会触发 Too frequent request 错误。这个设定会极大的延长我们测试的总时间，所以我们把这个时间间隔重新设定为 4s，这样 shell 脚本中的 sleep 5 就不会触发错误。</p>
<p>测试前解锁相应的账户</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">&gt;</span> <span class="nx">personal</span><span class="p">.</span><span class="nx">unlockAccount</span><span class="p">(</span><span class="nx">eth</span><span class="p">.</span><span class="nx">accounts</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="mi">3600</span><span class="p">)</span>
<span class="o">&gt;</span> <span class="nx">personal</span><span class="p">.</span><span class="nx">unlockAccount</span><span class="p">(</span><span class="nx">eth</span><span class="p">.</span><span class="nx">accounts</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="s2">&#34;&#34;</span><span class="p">,</span><span class="mi">3600</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>500 次测试结果的平均值为 0.66736s，最大值为 2.71s，最小值为 0.55s。</p>
<h4 id="224-wang的方案">2.2.4 wang的方案</h4>
<p>在下面的论文中，wang 等利用智能合约对传统 ABAC 架构进行了实现，我们认为对比该方案和我们的方案具有较大的意义。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">P. Wang, Y. Yue, W. Sun, and J. Liu, 
“An Attribute-Based Distributed Access Control for Blockchain-enabled IoT,” 
in 2019 WiMob, Barcelona, Spain, Oct. 2019, pp. 1–6, doi: 10.1109/WiMOB.2019.8923232 .
</code></pre></td></tr></table>
</div>
</div><p>鉴于作者没有提供源码，我们按照论文的描述进行了复现，然后在我们当前的实验平台下测试其访问控制时间，500 次测试的平均值为 0.69348s，最大值为 1.96s，最小值为 0.6s。</p>
<p>我们对三种情况的时间总结如下表</p>
<table>
<thead>
<tr>
<th>单位/ms</th>
<th>无信誉系统</th>
<th>加入信誉系统</th>
<th>wang的方案</th>
</tr>
</thead>
<tbody>
<tr>
<td>平均值</td>
<td>626.82</td>
<td>667.36</td>
<td>693.48</td>
</tr>
<tr>
<td>最大</td>
<td>990</td>
<td>2710</td>
<td>1960</td>
</tr>
<tr>
<td>最小</td>
<td>570</td>
<td>550</td>
<td>600</td>
</tr>
</tbody>
</table>
<p>可以看到，信誉系统的加入使得访问控制的平均时间增加了约6%，主要是因为执行访问控制时需要和信誉合约进行交互。而 wang 的方案相比于加入信誉系统的方案平均时间增加了约 4%，相对于没有信誉系统的方案增加了约 11%。</p>
<p>三种方案的主要区别在于合约逻辑的不同，包括循环的执行、合约间的相互调用次数，尤其是 wang 的方案合约间相互调用比较多，所以平均时间要更多。</p>
<h4 id="225-意外">2.2.5 意外</h4>
<p>我们在使用 JavaScript Date对象测试时发现一个意外情况，访问时间会受发起访问的时机的影响，假设 t 为两次访问的间隔，那么区别如下</p>
<table>
<thead>
<tr>
<th></th>
<th>t % 5 == 0</th>
<th>t % 5 == 1</th>
<th>t % 5 == 2</th>
<th>t % 5 == 3</th>
<th>t % 5 == 4</th>
</tr>
</thead>
<tbody>
<tr>
<td>结果趋向</td>
<td>4500ms</td>
<td>3500ms</td>
<td>2500ms</td>
<td>6500ms</td>
<td>5500ms</td>
</tr>
</tbody>
</table>
<p>三种方案都会出现如上结果，事实上，访问时间不仅收发起访问控制的时机影响，为了排除后台进程占用对时机的影响，我们特地利用程序分别使 CPU 占用保持在 50%，80%和100%重新进行了测试，不同的CPU占用率下，访问时间也不同，具体如下</p>
<table>
<thead>
<tr>
<th></th>
<th>t % 5 == 0</th>
<th>t % 5 == 1</th>
<th>t % 5 == 2</th>
<th>t % 5 == 3</th>
<th>t % 5 == 4</th>
</tr>
</thead>
<tbody>
<tr>
<td>CPU占用20%</td>
<td>4500ms</td>
<td>3500ms</td>
<td>2500ms</td>
<td>6500ms</td>
<td>5500ms</td>
</tr>
<tr>
<td>CPU占用50%</td>
<td>4300ms</td>
<td>3300ms</td>
<td>2300ms</td>
<td>6300ms</td>
<td>5300ms</td>
</tr>
<tr>
<td>CPU占用80%</td>
<td>4100ms</td>
<td>3100ms</td>
<td>2100ms</td>
<td>6100ms</td>
<td>5100ms</td>
</tr>
<tr>
<td>CPU占用100%</td>
<td>3950ms</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>最后，我们特定将 CPU 限制在了单核单线程，得到的结果没有区别。</p>
<ol>
<li>对合约的调用操作，分为不改变合约的状态和会改变合约的状态两种情况，这两种情况调用产生的时间消耗不同；</li>
<li>访问时间属于更改合约状态这种情况，此时，访问时间不因程序逻辑的变化而变化，意思是循环数量、合约间相互调用的数量，都不会对访问消耗时间产生影响；</li>
<li>访问通过和被拒绝属于合约逻辑问题，同样不对访问时间产生影响；</li>
<li>访问时间受网络情况影响，包括发起访问的时机和后台CPU的占用率；</li>
</ol>
<h4 id="226-其它">2.2.6 其它</h4>
<p>最后我们看一下更改合约状态的函数和不更改合约状态的函数执行时间是否有差别。我们写了两个关于存储的合约进行测试，合约内容如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">pragma solidity &gt;=0.4.22 &lt;0.7.0;

/**
 * @title Storage
 * @dev Store &amp; retreive value in a variable
 */
contract Storage {
    Helper public h;
    uint256 num;
    
    constructor(address _h) public {
        h = Helper(_h);
    }
    
    function store(uint256 _num) public {
        num = _num;
    }
    
    function get() public view returns (uint256){
        return num;
    }
    
    function retreive() public view returns (uint256){
        uint number;
        for (uint i = 0; i &lt; 500; i++) {
            uint t = h.getNumber();
            number = number + t;
        }
        return number;
    }
}

contract Helper {
    function getNumber() public pure returns (uint256);
}
</code></pre></td></tr></table>
</div>
</div><p>调用的 Helper 合约具体内容如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">pragma solidity &gt;=0.4.22 &lt;0.7.0;

contract Helper {
    function getNumber() public pure returns (uint256){
        return 23;
    }
}
</code></pre></td></tr></table>
</div>
</div><p>我们调用 Storage 合约中的 store 函数查看对合约状态进行更改时的时间消耗，调用 get 函数查看不更改合约状态时的时间消耗，调用 retreive 函数查看多次调用其它合约时对时间的影响。得到的结果如下</p>
<h2 id="3-恶意行为检测测试">3. 恶意行为检测测试</h2>
<p>如上篇所述，信誉系统的测试需要发起持续不断的合约调用，具体来说，就是在随机的时间调用随机的合约函数，从而验证奖励、惩罚、容忍、报警四大功能。</p>
<p>随机的时间间隔使用泊松分布生成，具体方法在 <a href="https://shuzang.github.io/generate-random-timings-for-a-poisson-process/" target="_blank" rel="noopener noreffer">另一篇文章</a> 中介绍。在生成的随机时间点具体执行哪个合约调用，我们进行了如下考虑</p>
<p>首先，会影响信誉值的行为包括</p>
<table>
<thead>
<tr>
<th>事件</th>
<th>所属合约及函数</th>
<th>合法/恶意</th>
<th>事件编号</th>
</tr>
</thead>
<tbody>
<tr>
<td>Attribute add</td>
<td>MC:addAttribute</td>
<td>合法</td>
<td>1</td>
</tr>
<tr>
<td>Device manager update</td>
<td>MC:updateManager</td>
<td>合法</td>
<td>2</td>
</tr>
<tr>
<td>Device customed attribute update</td>
<td>MC:updateAttribute</td>
<td>合法</td>
<td>2</td>
</tr>
<tr>
<td>Device delete</td>
<td>MC:deleteDevice</td>
<td>合法</td>
<td>3</td>
</tr>
<tr>
<td>Attribute delete</td>
<td>MC:deleteAttribute</td>
<td>合法</td>
<td>3</td>
</tr>
<tr>
<td>Resource attribute add</td>
<td>addResourceAttr</td>
<td>合法</td>
<td>1</td>
</tr>
<tr>
<td>Policy add</td>
<td>ACC:addpolicy</td>
<td>合法</td>
<td>1</td>
</tr>
<tr>
<td>Device manager update</td>
<td>ACC:updateManager</td>
<td>合法</td>
<td>2</td>
</tr>
<tr>
<td>Resource attribute update</td>
<td>ACC:updateResourceAttr</td>
<td>合法</td>
<td>2</td>
</tr>
<tr>
<td>Resource attribute delete</td>
<td>ACC:deleteResourceAttr</td>
<td>合法</td>
<td>3</td>
</tr>
<tr>
<td>Policy delete</td>
<td>ACC:deletePolicy</td>
<td>合法</td>
<td>3</td>
</tr>
<tr>
<td>Policy item delete</td>
<td>ACC:deletePolicyItem</td>
<td>合法</td>
<td>3</td>
</tr>
<tr>
<td>Access authorized</td>
<td>ACC:accessControl</td>
<td>合法</td>
<td>4</td>
</tr>
<tr>
<td>Blocked end time not reached</td>
<td>ACC:accessControl</td>
<td>恶意</td>
<td>0</td>
</tr>
<tr>
<td>Policy check failed</td>
<td>ACC:accessControl</td>
<td>恶意</td>
<td>0</td>
</tr>
<tr>
<td>Too frequent access</td>
<td>ACC:accessControl</td>
<td>恶意</td>
<td>1</td>
</tr>
<tr>
<td>Both above two</td>
<td>ACC:accessControl</td>
<td>恶意</td>
<td>1</td>
</tr>
</tbody>
</table>
<ol>
<li>
<p>以上影响信誉值的行为间是有先后关系的，比如，update、delete 都必须在 add 之后完成，access control 发起的条件是相关的属性和策略已定义等。如果我们完全随机的产生事件，很可能某些行为无法执行。</p>
<p>解决办法：忽略行为间的先后关系，因为如果存在显式的先后关系，一定会被我们定义的 require 机制给阻止，不会导致系统出错。</p>
</li>
<li>
<p>当确定了具体的行为，调用时如何传入参数。因为属性和策略的增删改一定会影响访问控制的结果，这样的话，访问成功还是失败完全不受我们控制。</p>
<p>解决办法：去除会影响结果的行为，因为同一类行为对信誉值的影响是相同的，所以每种行为我们只需要保留一个就可以。比如，合法行为中，Attribute add、Resource attribute add、Policy add 三者等价，我们只保留 Attribute add 一个行为，产生的所有 add 类行为都转换为对 addAttribute 一个函数的调用。最后我们保留下来的行为包括</p>
<table>
<thead>
<tr>
<th>事件</th>
<th>所属合约及函数</th>
<th>合法/恶意</th>
<th>事件编号</th>
</tr>
</thead>
<tbody>
<tr>
<td>Attribute add</td>
<td>MC:addAttribute</td>
<td>合法</td>
<td>1</td>
</tr>
<tr>
<td>Device customed attribute update</td>
<td>MC:updateAttribute</td>
<td>合法</td>
<td>2</td>
</tr>
<tr>
<td>Attribute delete</td>
<td>MC:deleteAttribute</td>
<td>合法</td>
<td>3</td>
</tr>
<tr>
<td>Access authorized</td>
<td>ACC:accessControl</td>
<td>合法</td>
<td>4</td>
</tr>
<tr>
<td>Policy check failed</td>
<td>ACC:accessControl</td>
<td>恶意</td>
<td>0</td>
</tr>
<tr>
<td>Too frequent access</td>
<td>ACC:accessControl</td>
<td>恶意</td>
<td>1</td>
</tr>
</tbody>
</table>
<p>为了排除仅剩的这些行为间的相互影响，我们规定，access control 将依赖于已定义好的属性和策略，新添加/更改/删除属性不会对访问结果产生影响。</p>
</li>
<li>
<p>每一种行为出现的概率可能是不一致的。比如，update 出现的次数可能多一点，add 和 delete 会少一点，access control 发起的频率可能是最高的。但是，在这里，6种不同的行为我们都以同样的概率来考虑，我们用 0-5 一共 6 个整数表示 6 种不同的事件，然后随机生成这个范围内的一个整数，从而确定某一时刻要调用的函数。</p>
</li>
</ol>
<p>使用一个文本文件存放输入参数，第一列是随机时间，第二列是随机事件，利用 Bash 读取每一行，然后在具体的时间调用指定的 JS 脚本完成这一过程。记录的结果包括从信誉合约检测到的各种值。</p>]]></description></item><item><title>区块链实验7-恶意行为检测机制设计</title><link>https://shuzang.github.io/credit-based-mechanism/</link><pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://shuzang.github.io/credit-based-mechanism/</guid><description><![CDATA[<p>吸收了一些新论文的想法，对原访问控制系统功能做了补充，添加了恶意行为检测（或者称为动态访问控制），目的是减少恶意行为，增加合法行为在区块链中得到确认的几率。所有调整总结查看 <a href="#jump" rel="">附录II</a>。</p>
<h2 id="1-背景">1. 背景</h2>
<p>Blockchain, IoT, Access Control 是核心的三个关键词。该领域的研究中，大部分论文介绍背景从 IoT+Access Control 起步，介绍区块链能带来的好处，少部分从 Blockchain+IoT 起步，介绍访问控制对场景的必要性，事实上，我们研一开始的研究路径就是这样，先考虑 Blockchain 用于 IoT 有哪些好处，然后才选择了 Acccess Control 子方向。</p>
<p>前者可以参考之前写好的论文，或者该博客的另外一篇文章 <a href="https://shuzang.github.io/blockchain-based-access-control-for-iot/" target="_blank" rel="noopener noreffer">区块链用于物联网访问控制</a>；后者可以参考 <a href="https://www.ibm.com/cn-zh/blockchain/solutions/food-trust" target="_blank" rel="noopener noreffer">IBM Food Trust</a> 项目的介绍，或者查看本系列上一篇文章 <a href="https://shuzang.github.io/analysis-and-selection-of-experimental-scenes" target="_blank" rel="noopener noreffer">实验场景的分析与选择</a> 的第三部分。</p>
<p>无论从哪一个角度，亦或者从更直观的现象看（该方向论文超过 200 篇），都能得出一个结论：这三者的结合是必要的，至少是益处更多的。</p>
<h3 id="11-结合方式">1.1 结合方式</h3>
<p>我们之前遵循的分类是史锦山等在一篇综述<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>中提出的，该论文将这三种的结合分为两类：</p>
<ol>
<li>区块链与已有的物联网访问控制模型结合，区块链充当可信实体；</li>
<li>新的完全基于区块链的物联网访问控制模型，该分类又包括两种
<ul>
<li>基于区块链交易或脚本机制实现的访问控制</li>
<li>基于智能合约实现的访问控制</li>
</ul>
</li>
</ol>
<p>然而我们在研究中逐渐意识到，第二种并不能作为一个单独的分类。基于区块链交易或脚本实现的访问控制本质是基于 token 在区块链中的实现，基于智能合约实现的访问控制，多数依然采用了传统 ACL、RBAC、ABAC、UCON、CapBAC 等的思想，仅仅是利用智能合约重新做了实现，是实现手段的变更，实现的手段从传统的 XACML、UMA 等变到了智能合约，只不过这种实现手段附带了区块链的优点。因此研究者们所做的工作，是探索传统访问控制思想与现有实现手段（区块链、智能合约）之间的高效结合方式，探索如何充分利用区块链的优点，以及尽可能消除区块链所引入的困难。</p>
<p>明白这一点对我们主要有如下帮助</p>
<ol>
<li>区块链和传统访问控制模型的简单结合并不能看作一个创新型的工作，即不能在用智能合约实现了 UCON 模型就声称自己提出了一种新的方案，重点在于你的结合和其它结合的区别，如何更高效的利用了区块链的优点，或者如何更有力的消除了区块链的缺点；</li>
<li>如果之前没有人在区块链中实现传统访问控制模型，而你做了，可以算创新，因为要真正实现这一点需要做很多的工作（尤其是没有前人的经验借鉴是比较难的），但是这一点现在基本不太可能，因为传统模型只有几种，现在基本都有了区块链的实现；</li>
<li>大家所做的更多的是系统设计性的工作，而非算法改进，因为采用一种新的手段实现已有模型很少涉及算法，更多的是通过合约结构或合约功能的某种设计和实现，做了一定的优化；</li>
<li>应当充分吸收传统访问控制的优点。传统访问控制经历了多年的发展，在某些实现细节上有很多值得借鉴的设计，当换了一种新的实现手段，这些设计都可以移用过来。目前该方向的研究者大部分都是从区块链入手，考虑访问控制的实现，少有专业的访问控制方向的研究者转向区块链的实现，因此大部分的方案在功能完整性方面甚至都存在一定的不足，无法做全局的考虑。</li>
</ol>
<p>下一小节我们描述区块链这种手段为物联网访问控制带来的优点和引入的困难，这将是我们进行方案优化和性能评估的凭借。</p>
<h3 id="12-好处和困难">1.2 好处和困难</h3>
<p>区块链的引入解决的核心问题是<strong>信任</strong>。链式结构和共识算法带来的不可篡改、透明、便于审计等特性，从而<strong>提高了系统的安全性</strong>，最终帮助我们搭建了协作实体之间的信任关系。基于这种信任关系，我们可以搭建一个统一的平台，从而又带来效率的提高。</p>
<p>安全性又包含两个方面，一个是系统运行过程中对各种攻击的抵御，这是现有物联网系统急缺的能力，这部分的研究主要就是区块链能抵御哪些攻击，添加某些设计又可以抵御哪些新的攻击，逐步完善它的能力；另一个是系统出问题后快速追查出问题的地方，这一点从供应链角度更好理解，建立了统一的平台后，各参与者直接的交接完全数字化和透明，减少了欺诈风险，同时由于数字记录不可篡改，出现问题时可以快速追查到出问题的环节。</p>
<p>区块链还引入了两个优点：<strong>自动化</strong>和<strong>分布式</strong>。自动化是智能合约带来的，基于智能合约图灵完备的能力提高各参与者之间的交接效率，推进数字化进程；分布式是区块链的实现方式带来的，解决了传统集中式方案的单点故障问题。尽管这两个优点是解决信任问题附带的产物，但如果充分利用这两个优点，同样可以是我们考虑的问题。</p>
<p>区块链带来的困难包括</p>
<ol>
<li>实时性。某些场景下可能对实时性有一定的要求，但是，一个合法的交易在区块链中得到确认，需要经历被收集到区块、广播到区块链网络、经由大多数节点验证等过程，与传统方案相比，区块链方案显然有一定的差距；</li>
<li>吞吐量。同样的原因，区块链的吞吐量相比于传统方案有一定的差距，但影响吞吐量的决定性因素是区块链平台和共识算法的选择，架构设计产生的影响不大；</li>
<li>IoT 设备的资源（能力）限制。运行共识算法需要一定的计算能力，不是所有的 IoT 设备都有这样的能力；</li>
<li>IoT 环境的异构性。IoT 设备种类、软件平台、网络环境等千差万别，不是所有 IoT 设备都可以实用区块链客户端，并且可以实时地持续接入区块链网络；</li>
<li>区块链存储的昂贵性。在区块链中存储大量数据会导致区块链快速增长，对成员节点设备的存储性能是一个考验，因此应当尽量避免这一点；</li>
<li>成本问题。例如 Ethereum 中部署合约及与合约交互都需要以太币，更少的 Gas 消耗保证了更低的成本。</li>
</ol>
<p>我们的解决思路</p>
<ol>
<li>实时性和吞吐量：平台和共识选择；</li>
<li>设备资源限制和环境异构性：分层管理；</li>
<li>存储问题：调整合约架构</li>
</ol>
<p>然而，基于智能合约实现的系统中，恶意的行为（如短时间频繁的调用）仍可能产生过量的交易，从而降低合法交易被区块链收集的概率，或者使得确认时间延长，而区块链本身无法对这类行为做出规避。另一方面，物联网环境是一个动态变化的环境，基于属性的访问控制缺乏对这些变化的应对能力，我们应针对操作的严重性、资源的敏感性、用户的访问历史记录等信息，对决策做出动态的调整。目前，只有少数Blockchain-IoT 访问控制的论文结合了动态访问控制的思想<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>。</p>
<h2 id="2-相关工作">2. 相关工作</h2>
<p>Huang等<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> 在论文中设计了一个基于信誉的 PoW 共识机制来取得效率与安全的平衡。首先为节点 $i$ 设置一个信誉值属性 $Cr_i$，该值会随着节点的行为实时的变化。正常的行为，如遵守系统规则发送交易，会随着时间的推移使信誉值逐步增加，与之相反，节点产生异常行为会导致信誉值下降。PoW 机制的难度根据每个节点的信誉值自调整，信誉值越低，运行 PoW 算法花费的时间越长。因此，诚实的节点消耗的资源更少，恶意节点攻击所需的花费更多。</p>
<p>在该论文中，作者定义的攻击模型有两个（即两种恶意行为）：</p>
<ol>
<li>Lazy Tips：懒惰的节点指那些总是验证固定的以前的交易，而不去验证最新的交易的节点。例如，恶意实体可以通过发出许多验证固定交易对的交易来人为地扩大<strong><ruby>提示<rt>tips</rt></ruby></strong>的数量。这会使其它节点有更高的概率选中这些提示，而丢弃属于诚实节点的提示</li>
<li>Double-spending：通过在前一次花费被验证之前提交多个交易，恶意节点希望将一枚代币花费两次或多次，这就是双花问题。尽管这样的行为会被共识机制检测到并撤销，但它降低了系统效率，因为其它相关的交易也会被撤销重新执行。</li>
</ol>
<p>更具体的信誉值增减算法的设计，可以参考附录I。但作者设计的算法与 PoW 结合程度较深，对恶意行为的惩罚依赖于难度值得调整，无法在 BFT 类共识算法中继续得到使用，同时，对于智能合约中由于函数调用产生的一些恶意行为，也难以阻止。</p>
<p>Mohammed等<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> 在 RBAC 中结合了信誉机制来消除恶意行为的影响，但该方案依赖于一个中心化的证书权威，恶意行为主要指的是证书的不一致和证书过期。</p>
<p>待补充&hellip;</p>
<h2 id="3-所提出的方案">3. 所提出的方案</h2>
<h3 id="31-恶意行为检测">3.1 恶意行为检测</h3>
<h4 id="311-原始方案">3.1.1 原始方案</h4>
<p><strong>惩罚</strong>：我们取设备 $i$  信誉值的负面影响部分 $Cr_i^N$ 定义为惩罚函数，惩罚函数的值与历史恶意行为的数量和类型（历史行为记录和操作严重性）有关，每个恶意行为的影响随着时间的推移逐渐减小，但不可以变为0，具体的函数如下
$$
Cr_i^N = \sum_{k=1}^{m_i} \alpha(\beta) · \frac{\gamma}{t-t_k}
$$
其中 $m_i$ 表示设备 $i$ 的恶意行为总数，$t$ 表示当前时间，$t_k$ 表示设备 $i$ 造成的第 $k$ 个恶意行为的时间点，$\alpha(\beta)$ 表示恶意行为 $\beta$ 的惩罚系数，在0-1内取值，该系数定义如下，可以根据对恶意行为敏感度的要求进行调整。
$$
\alpha(\beta) = \left \lbrace
\begin{array}{ll}
\alpha_1 &amp; \text{如果 β 代表非法的属性或策略修改请求 ;}  \\
\alpha_2 &amp; \text{如果 β 非法的访问控制请求; } \\
\alpha_3&amp; \text{如果 β 代表短时间发起大量请求}
\end{array} \right.
$$
我们采取的惩罚是阻塞设备的访问请求，意思是计算一个阻塞时间，从当前时间开始的这一段时间内，来自该设备的所有访问请求都被拒绝。阻塞时间根据如下指数函数来计算，可以看出，惩罚函数的值越大，阻塞时间越长。
$$
T_{Blocked} = 2^{Cr_i^N}
$$
惩罚函数中的 $\gamma$ 用来控制恶意行为频率，因为在 $\gamma = 1$ 的情况下，惩罚函数的值总是小于 1 的，这就意味着随之计算得到的阻塞时间会比较小。如果将 $\gamma$ 调大，比如 5，就意味着一旦两次恶意行为的间隔小于 5s （$t-t_k \lt 5$），函数的值会大于1，从而计算得到的阻塞时间会呈指数增长。</p>
<p>每一次恶意行为记录的提交都会触发惩罚函数和阻塞时间的计算，将当前时间加上阻塞时间会得到一个惩罚终止时间，这个终止时间在 RC 中定义为设备的一个属性，只能由信誉合约更新。当 ACC 在进行访问请求判定时，会读取设备该属性判断是否在阻塞期。</p>
<p><strong>奖励</strong>：除了惩罚外，我们还应当对合法的行为做出奖励，从而减少阻塞时间。奖励函数可以利用信誉值的正面影响部分 $Cr_i^P$ 表示。$Cr_i^P$ 应与合法的行为数量正相关，这里的合法行为可以包括</p>
<ol>
<li>普通的增删改操作行为。比如对设备、设备属性、策略等的增删改，这些操作执行完成后，行为记录会发送给信誉合约进行计算。增(Register or Add)、改(Update)、删(Delete)三个操作行为的 ID 分别定义为1，2，3.</li>
<li>访问控制。当设备发起的访问控制通过时，信誉合约接收行为记录并计算信誉值，访问控制通过的行为 ID 为 4</li>
</ol>
<p>我们对四种不同的行为设置不同的权重，最终的 $Cr_i^P$ 定义如下，其中 $\omega_k$ 代表第 $k$ 种操作的权重，$n_k$ 代表第 $k$ 种操作的数量</p>
<p>$$
Cr_i^P = \sum_{k=1}^4 \omega_k n_k
$$</p>
<p>$Cr_i^P$到奖励时间的转换应该是线性的，因为我们认为合法行为的累积不应当导致奖励时间迅速增加，我们在此给出一个合法行为数量上限 $N_{max}$，则奖励时间 $T_{Reward}$ 定义如下
$$
T_{Reward} = \frac{Cr_i^P}{N_{max}} \times T_{Blocked}
$$
注意，计算 $T_{Reward}$ 前需要判定 $Cr_i^P$，若其值大于 $N_{max}$，则置为 $N_{max}$，否则奖励时间就会大于阻塞时间，这是不合适的。</p>
<p>每一次合法行为的提交都会更新合法行为列表，但只有当前设备处于阻塞期，才会计算奖励时间，然后从惩罚终止时间中减去奖励时间，从而使设备的惩罚更早的结束。这里需要注意的是，产生恶意行为并做出惩罚时，并不会立即根据历史行为计算奖励时间，而是在下一次合法行为产生时进行计算。奖励时间计算完毕后，要清空当前的合法行为记录，因为它们已经起到了自己的作用。与之相对的，恶意行为记录永远不会清空，虽然它们产生的影响随着时间的推移变小，但不可能消失，因此每次惩罚函数计算都会读取所有恶意行为。</p>
<p><strong>参数设置</strong>：处于直觉，我们暂时将参数设置为</p>
<ol>
<li>惩罚函数中，$\alpha_1 = 0.5, \alpha_2 = 0.5, \alpha_3 = 1$，因为第三种恶意行为影响更恶劣；</li>
<li>惩罚函数中，$\gamma = 5$，这是直觉判断，需要后续更正；</li>
<li>奖励函数中，$\omega_1 = 0.5, \omega_2 = 0.5, \omega_3 = 0.5, \omega_4 = 1$，因为访问控制通过是主要的合法行为</li>
<li>奖励时间中，$N_{max} = 10$，也是一个直觉判断，需要后续更正</li>
</ol>
<h4 id="312-原始方案的问题">3.1.2 原始方案的问题</h4>
<ol>
<li>设备信誉值不应当与设备活跃程度有关，某种设备可能短时间一次请求都不发起，但这种情况不应当对设备信誉值产生影响；</li>
<li>如果设备一直遵守规则，信誉值会保持不断增长，最终可能导致超限。因此需要为信誉值设置上限和下限；</li>
<li>设备前期累积的信誉值不应当与设备产生的特定恶意行为抵消，也就是说，设备产生了某种特别恶劣的行为，即时它前期积累了很高的信誉，也必须惩罚；</li>
<li>以太坊智能合约语言 Solidity 不支持浮点数定义和运算，因此公式中涉及的除法运算和浮点数需要调整；</li>
<li>原始方案中时间的计算单位是 ms，因此两次行为间隔太久可能导致结果过大，计划将行为数量作为窗口而不是时间间隔；</li>
<li>非法的属性、策略修改请求会被直接拒绝，不会作为交易提交到区块链，阻塞期间继续访问也应当直接拒绝，只有这样才能阻止更多的非法交易进入区块链。</li>
</ol>
<h4 id="313-改进后的方案">3.1.3 改进后的方案</h4>
<p>改进后的方案中，惩罚公式如下
$$
Cr_i^N = -\sum_{k=1}^{m} max \{\alpha(\beta)-(m - k), 1 \}
$$
其中，$m$ 为设备 $i$ 当前的恶意行为总数，$k$ 是第 k 个恶意行为发生时的恶意行为总数，$\alpha(\beta)$ 表示恶意行为 $\beta$ 的惩罚系数，在1-10内取值,该系数定义如下，可以根据对恶意行为敏感度的要求进行调整。
$$
\alpha(\beta) = \begin{cases}
\alpha_1 &amp; \text{如果 β 非法的访问控制请求; } \\
\alpha_2 &amp; \text{如果 β 代表短时间发起大量请求}
\end{cases}
$$
$max \{\alpha(\beta)-(m - k), 1 \}$ 的含义是，每发生一个新的恶意行为，旧的恶意行为惩罚系数就减一，底线是惩罚系数的最小值1，这能保证随着时间的推移，旧的恶意行为的影响不断减小，但不会减小到0。</p>
<p>奖励函数 $Cr_i^P$ 定义不变， $\omega_k$ 代表第 $k$ 种操作的权重，$n_k$ 代表第 $k$ 种操作的数量，但权重的取值范围限定在 1-10
$$
Cr_i^P = max \{ Cr_{imax}^P , \sum_{k=1}^4 \omega_k n_k \}
$$</p>
<p>最终的信誉值计算公式如下
$$
Cr_i = Cr_i^P + Cr_i^N
$$
阻塞时间的计算依然是以 2 为底的指数函数，但这里会进行判断，当恶意行为是短时间发起大量请求时，立刻进行处罚，否则只有在信誉值低于某个值$\gamma$ 时才进行处罚。阻塞时间函数如下
$$
T_{blocked} = 2^{Cr_i}, if \ \text{频繁请求恶意行为} \ or \ \text{(信誉值} &lt; \gamma)
$$</p>
<h3 id="32-合约设计">3.2 合约设计</h3>
<h4 id="321-合约结构">3.2.1 合约结构</h4>
<p>添加恶意行为检测部分后，将原系统中的注册合约（RC）更名为管理合约（MC），将原系统中的判决合约（JC）更名为信誉合约（RC）。因此，当前系统中的三种合约分别为：管理合约（Management Contract, MC），访问控制合约（Access Control Contract, ACC）和信誉合约（Reputation Contract, RC），这几种合约间的调用关系如下图</p>
<p></p>
<p>管理合约（Management Contract, MC），负责管理合约和设备属性。在设备属性中新增 TimeofUnblock 字段，用于设置阻塞终止时间，该字段只能被信誉合约更新。MC中各种操作行为会产生日志并提交给信誉合约</p>
<p>访问控制合约（Access Control Contract，ACC），负责管理资源属性、策略和执行访问控制。在执行访问控制判断时，会首先从 MC 读取 TimeofUnblock 字段，查看是否大于当前时间，如果大于则阻塞请求，否则通过。同样，ACC 中的所有行为记录也会提交到 RC</p>
<p>信誉合约（Reputation Contract, RC），负责根据 MC 和 ACC 提交的记录计算信誉函数的值，并根据该值计算阻塞终止时间，最后调用 MC 的相关函数更新设备的 TimeofUnblock 字段。</p>
<h4 id="322-合约测试">3.2.2 合约测试</h4>
<p>在 Remix 中进行 测试，编译配置开启 <code>Enable optimization</code>（可以大幅减少 gas 消耗），1-7步的顺序不能改变</p>
<ol>
<li>
<p>系统管理者部署MC</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">MC部署账户(系统管理者)：0x4542ED8d83107Db8e9Cab06d9A8D7a02b896f7d9
返回：
 MC合约地址：0x1f1e534ff105d9e697a1c9afabcd02560de55bbe
transaction cost：3164548 gas
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>监管机构部署RC</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">RC部署账户(监管机构)：0x5521Ba0bC012bE5dC12855f4972c48505Dc88c4A
传入：
 MC合约地址：0x1f1e534ff105d9e697a1c9afabcd02560de55bbe
返回：
 RC合约地址：0x644e0e3b47ad746be213e1553928f96f70a2655c
transaction cost：1244974 gas
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>系统管理者调用 MC中的 setRC()  进行设置</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">调用账户(系统管理者)：0x4542ED8d83107Db8e9Cab06d9A8D7a02b896f7d9
传入：
 RC合约地址：0x644e0e3b47ad746be213e1553928f96f70a2655c
 监管机构账户：0x5521Ba0bC012bE5dC12855f4972c48505Dc88c4A
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>设备管理者部署 ACC</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">ACC部署账户(设备管理者)：0x8f3dA5cD93Eb378Cdd27631C1757075B25D65B18
传入：
 MC合约地址：0x1f1e534ff105d9e697a1c9afabcd02560de55bbe
 RC合约地址：0x644e0e3b47ad746be213e1553928f96f70a2655c
 设备管理者地址：0x8f3dA5cD93Eb378Cdd27631C1757075B25D65B18
返回：
 ACC合约地址：0x19455cac7bd27705661d467e20ee82b1cc48737b
transaction cost：5635472 gas
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>设备管理者调用 MC 中的 deviceRegister() 函数，注册自身</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">调用账户(设备管理者)：0x8f3dA5cD93Eb378Cdd27631C1757075B25D65B18
传入参数为：
 设备地址：0x8f3dA5cD93Eb378Cdd27631C1757075B25D65B18
 管理者地址：0x8f3dA5cD93Eb378Cdd27631C1757075B25D65B18
 合约地址：0x19455cac7bd27705661d467e20ee82b1cc48737b
 设备ID：gateway33
 设备类型：gateway
 设备角色：manager
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>设备部署 ACC</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">ACC部署账户(设备)：0xB52fd79681f876af9dac92d1ED9a23Aac3fdBfa1
传入：
 MC合约地址：0x1f1e534ff105d9e697a1c9afabcd02560de55bbe
 RC合约地址：0x644e0e3b47ad746be213e1553928f96f70a2655c
 设备管理者地址：0x8f3dA5cD93Eb378Cdd27631C1757075B25D65B18
返回：
 ACC合约地址：0x54d463eca95c313077815ce0a893b4036199e28e
transaction cost：5635472 gas
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>设备管理者调用 MC 中的 deviceRegister() 函数，注册设备固定属性</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">调用账户(设备管理者)：0x8f3dA5cD93Eb378Cdd27631C1757075B25D65B18
传入参数为：
 设备地址：0xB52fd79681f876af9dac92d1ED9a23Aac3fdBfa1
 管理者地址：0x8f3dA5cD93Eb378Cdd27631C1757075B25D65B18
 合约地址：0x54d463eca95c313077815ce0a893b4036199e28e
 设备ID：pallat23
 设备类型：pallat
 设备角色：device
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>设备管理者调用 MC 中的 addAttribute()  函数，添加额外属性</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">调用账户(设备管理者): 0x8f3dA5cD93Eb378Cdd27631C1757075B25D65B18
传入参数：
 设备地址：0xB52fd79681f876af9dac92d1ED9a23Aac3fdBfa1
 属性名：currentFruit
 属性值：apple
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>调用 MC 中的 get 类函数，查看设备属性，包括 getFixedAttribute(), getDeviceRelatedAddress(), getCustomedAttribute() 三个函数</p>
</li>
<li>
<p>设备管理者调用 MC 中的 updateAttribute() 函数，更改属性</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">调用账户(设备管理者): 0x8f3dA5cD93Eb378Cdd27631C1757075B25D65B18
传入参数：
    设备地址：0xB52fd79681f876af9dac92d1ED9a23Aac3fdBfa1
    属性名：currentFruit
    属性值：peer
</code></pre></td></tr></table>
</div>
</div><p>调用 MC 中的 getCustomedAttribute() 函数，查看更改后的属性，确认无误</p>
</li>
<li>
<p>设备管理者调用 MC 中的 deleteAttribute() 函数，删除 currentFruit 属性</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">调用账户(设备管理者): 0x8f3dA5cD93Eb378Cdd27631C1757075B25D65B18
传入参数：
    设备地址：0xB52fd79681f876af9dac92d1ED9a23Aac3fdBfa1
    属性名：currentFruit
</code></pre></td></tr></table>
</div>
</div><p>调用 MC 中的 getCustomedAttribute() 函数，会返回 Attribute not exist! 错误</p>
</li>
</ol>
<p>接下来测试访问控制合约（ACC）</p>
<ol>
<li>
<p>设备管理者调用 ACC 的 addResourceAttr() 函数添加资源属性</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">调用账户(设备管理者): 0x8f3dA5cD93Eb378Cdd27631C1757075B25D65B18
传入参数：
 资源名：GPS
 属性名：currentLocation
 属性值：116.309551, 39.896559 
</code></pre></td></tr></table>
</div>
</div><p>然后调用 getResourceAttr() 函数查看</p>
</li>
<li>
<p>设备管理者调用 ACC 的 updateResourceAttr() 函数更新资源属性，继续查看；最后调用 deleteResourceAttr() 函数删除资源属性，查看返回 Resource attribute not exist! 错误</p>
</li>
<li>
<p>设备管理者调用 ACC 的 addPolic() 函数添加策略</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">调用账户(设备管理者): 0x8f3dA5cD93Eb378Cdd27631C1757075B25D65B18
传入参数：
 资源名：truck
 操作：read
 属性所有者：subject
 属性名：deviceType
 操作符：=
 属性值：gateway
</code></pre></td></tr></table>
</div>
</div><p>成功后查看策略</p>
</li>
<li>
<p>设备管理者调用 ACC 的 accessControl() 函数，测试访问控制</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">调用账户(设备管理者): 0x8f3dA5cD93Eb378Cdd27631C1757075B25D65B18
传入参数：
 资源名：truck
 操作：read
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h4 id="323-合约审计">3.2.3 合约审计</h4>
<p>依旧打算使用 Mythx 进行合约审计，但 Mythx 已转为收费，合约审计部分的工作只能放弃。</p>
<h2 id="4-性能测试的指标">4. 性能测试的指标</h2>
<p>测量值，或者说实验结果分为三部分：访问控制系统、私有交易验证和信誉系统，下面对其进行讨论。</p>
<h3 id="41-访问控制系统">4.1 访问控制系统</h3>
<p>合约功能以及在 Remix 中进行了验证，访问控制系统应当获得的实验结果，包括</p>
<ol>
<li>合约部署的时间和 Gas 消耗；</li>
<li>属性定义及更新的时间消耗；</li>
<li>访问控制的时间消耗；</li>
</ol>
<p>其中以访问控制的时间消耗为最主要的测量者，我们应当证明我们实现的系统相比于其它系统更优，尤其是相对于论文[^wang_2016_blockchain]，主要就是通过访问控制时间的对比。事实上，我们还应当通过 IBM Food Trust 的访问控制系统做对比，但目前我们无法拿到该系统的数据。</p>
<p>Gas 的消耗在 Remix 部署时可以在返回值中看到，属性定义、更新、访问控制等操作都通过 JS 脚本进行，利用 JS 的时间库计算执行时间。每一种操作都取 50 次测量的平均值。要注意的是，时间的测量值受实验环境影响很大。</p>
<h3 id="42-私有交易验证">4.2 私有交易验证</h3>
<p>我们设定超市与农场的购买合同是私有的，通过 Remix 发起私有交易，通过 Geth 或 Cakeshop 区块链浏览器查看。</p>
<h3 id="43-信誉系统">4.3 信誉系统</h3>
<p>需要验证奖励、惩罚、容忍、报警四大功能。</p>
<p>输入参数定义为一个文件，文件包括三列，第一列是产生请求的时间，需要符合泊松分布，可以通过 Matlab 产生；第二列是是请求类型，根据请求类型的不同调用不同的 JS 脚本。应当得到的值包括 CrP、CrN、阻塞时间等，这些参数都通过监测合约发出的时间收集。收集到相关数据后，计算正确检测恶意行为的概率、虚警概率、信誉值随时间变动的曲线、阻塞时间的变化等。</p>
<p>应当注意、产生请求的时间、当前属性、请求类型全部都是随机的，这样才有测量的必要，恶意行为应当不止一种，且是否能检测到也是不确定的，这样才存在正确检测恶意行为的概率。</p>
<p>读取文件并调用 JS 脚本，使用 Shell 脚本完成。</p>
<h2 id="附录i-参考的信誉算法">附录I 参考的信誉算法</h2>
<p>根据节点 $i$ 的行为，将其信誉值 $Cr_i$ 划分为两部分，公式如下
$$
Cr_i = \lambda_1 Cr_i^P + \lambda_2 Cr_i^N
$$
其中 $Cr_i^P$ 代表正面影响部分，$Cr_i^P$ 代表负面影响部分。$\lambda_1$ 和 $\lambda_2$ 分别代表各部分的权重系数，调节这两个值就可以调整两部分所占权重，比如，如果我们想要严格的惩罚策略，应该令 $\lambda_2$ 更大一点。</p>
<p>$Cr_i^P$ 与节点 $i$ 单位时间内正常的交易数量成正相关，即通过节点活跃程度定义，表示如下
$$
Cr_i^P = \frac{\sum_{k=1}^{n_i} \omega_k} {\Delta T}
$$
其中 $n_i$ 代表节点 $i$ 在最近的单位时间内有效交易的数量，$\Delta T$ 代表单位时间，$\omega_k$ 代表第 $k$ 个交易的权重，交易的权重指的是该交易被验证的次数。也就是说，如果节点 $i$ 在一段时间内保持活跃，$Cr_i^P$ 将根据活跃程度不断调整，保证活跃节点可以使用更少的算力更快地发布交易。如果节点 $i$ 在一段时间内没有发布交易，就认为它是不活跃的，甚至是不可信节点，所以系统不会为它降低 PoW 的难度，即 $Cr_i^P = 0$。</p>
<p>$Cr_i^N$ 与节点 $i$ 的恶意行为数量成负相关，可以表示为
$$
Cr_i^N = -\sum_{k=1}^{m_i} \alpha(\beta) · \frac{\Delta T}{t-t_k}
$$
其中 $m_i$ 表示节点 $i$ 的恶意行为总数，$t$ 表示当前时间，$t_k$ 表示节点 $i$ 造成的第 $k$ 个恶意行为的时间点，$\alpha(\beta)$ 表示恶意行为 $\beta$ 的惩罚系数，该系数定义如下，其中 $\alpha_l$ 和 $\alpha_d$ 可以根据对恶意行为敏感度的要求进行调整。
$$
\alpha(\beta) = \begin{cases} \alpha_l&amp;\text{if β is lazy tips behavior;}  \\ \alpha_d &amp; \text{if β is double-spending behavior} \end{cases}
$$
从$Cr_i^N$ 的公式中我们可以发现，随着时间的推移，恶意行为对节点的影响在逐渐减小，但不同于 $Cr_i^P$，它无法减小到0，也就是完全消除。当一个恶意行为发生的时候，$Cr_i^N$ 的绝对值会很大，由于 PoW 难度巨大，攻击将无法持续，通过这种方式我们可以及时阻止恶意行为。</p>
<p>该机制正常运行的需求是我们可以获取每个节点相关的所有交易，这样就可以计算出交易权重 $\omega$ 和 恶意行为记录 $\alpha(\beta)$，从而可以独立地计算出 $Cr_i^P$ 和 $Cr_i^N$，最终得到信誉值。作者在论文中将信誉值与 PoW 难度关联，具体来说，这两种成反比，定义公式为 $Cr_i = \delta \frac 1{D_i}$，其中 $D_i$ 为节点 $i$ 的 PoW 难度，$\delta$ 为比例系数。这样，信誉值高的难度低，信誉值低的难度高，难度的调整通过控制前缀0的最小长度完成，整个系统得以实现。</p>
<p>具体的实验中以上公式中的相关参数如何设置，作者给出了一些描述。交易权重 $\omega$ 可以直接计算，两个权重系数设置为 $\lambda_1 = 1,\lambda_2 = 0.5$，因为 $Cr_i^N$ 的值可能相对比较大，如果想要更严厉的惩罚措施，$\lambda_2$ 可以设置的更大。考虑到 IIoT 系统的请求频率，单位时间设置为 $\Delta T = 30s$，一个不是太长的间隔。对于 lazy tips，设置 $\alpha(\beta) = 0.5$，对于 double-spending，设置 $\alpha(\beta) = 1$，因为双花对系统造成的损害更严重。</p>
<h2 id="附录ii-所做调整">附录II 所做调整</h2>
<p><span id="jump"></span>下面是所作的调整总结</p>
<ul>
<li><i class="far fa-square fa-fw"></i> 功能-策略冲突解决机制</li>
<li><i class="far fa-square fa-fw"></i> 功能-无匹配策略时的处理</li>
<li><i class="far fa-square fa-fw"></i> 功能-恶意行为检测</li>
<li><i class="far fa-check-square fa-fw"></i> 架构-策略定义拆分单独的合约（提供重用性）</li>
<li><i class="far fa-square fa-fw"></i> 架构-部分函数迁移到单独的库文件 Utils.sol（for gas save）</li>
<li><i class="far fa-square fa-fw"></i> 语法-匹配最新版本编译器</li>
<li><i class="far fa-square fa-fw"></i> 语法-统一代码风格</li>
<li><i class="far fa-square fa-fw"></i> 实验过程-去除合约审计（MythX 转为收费）</li>
<li><i class="far fa-square fa-fw"></i> 实验过程-移除树莓派节点（在家的时候没有树莓派）</li>
<li><i class="far fa-square fa-fw"></i> 实验过程-恶意行为的测试方案</li>
<li><i class="far fa-check-square fa-fw"></i> 实验过程-测试新的性能指标（必要的）</li>
<li><i class="far fa-check-square fa-fw"></i> 实验过程-利用 JavaScript 和 Bash 交互迁移到利用 Go</li>
<li><i class="far fa-square fa-fw"></i> 思路-明晰背景（为什么做这件事）</li>
<li><i class="far fa-square fa-fw"></i> 思路-明晰场景</li>
<li><i class="far fa-square fa-fw"></i> 思路-信誉算法设计</li>
</ul>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>史锦山, 李茹, 等. 物联网下的区块链访问控制综述[J]. 软件学报, 2019, Vol.30Issue(6): 1632–1648. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>ZHANG Y, KASAHARA S, SHEN Y, 等. Smart Contract-Based Access Control for the Internet of Things[J]. IEEE Internet of Things Journal, 2019, 6(2): 1594–1605. DOI:<a href="https://doi.org/10.1109/JIOT.2018.2847705" target="_blank" rel="noopener noreffer">10.1109/JIOT.2018.2847705</a>. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>AMOON M, ALTAMEEM T, ALTAMEEM A. RRAC: Role Based Reputed Access Control Method for Mitigating Malicious Impact in Intelligent IoT Platforms[J]. Computer Communications, 2020, 151: 238–246. DOI:<a href="https://doi.org/10.1016/j.comcom.2020.01.011" target="_blank" rel="noopener noreffer">10.1016/j.comcom.2020.01.011</a>. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>J. Huang, L. Kong, G. Chen, M.-Y. Wu, X. Liu, and P. Zeng, “Towards Secure Industrial IoT: Blockchain System With Credit-Based Consensus Mechanism,” <em>IEEE Trans. Ind. Inf.</em>, vol. 15, no. 6, pp. 3680–3689, Jun. 2019, doi: <a href="https://doi.org/10.1109/TII.2019.2903342" target="_blank" rel="noopener noreffer">10.1109/TII.2019.2903342</a>. <a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>]]></description></item><item><title>2018-2020 研究历史</title><link>https://shuzang.github.io/2018-2020-research-history/</link><pubDate>Fri, 24 Apr 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://shuzang.github.io/2018-2020-research-history/</guid><description><![CDATA[<p>本文总结2018年12月到2020年4月的研究工作历史，不包括论文阅读工作。</p>
<h2 id="201812">2018.12</h2>
<ul>
<li>区块链主流共识算法收集了解和分析</li>
<li>IIoT 与区块链结合的场景收集和一些研究思路， <a href="https://shuzang.github.io/blockchain-for-iot/" target="_blank" rel="noopener noreffer">总结文档地址</a></li>
<li>利用 Hyperledge Composer 完成供应链场景下的易腐食品运输示例</li>
</ul>
<h2 id="201901">2019.01</h2>
<ul>
<li>实时与非实时数据的区别，区块链存储问题分析，<a href="https://shuzang.github.io/data-storage-in-blockchain/" target="_blank" rel="noopener noreffer">总结文档地址</a></li>
<li>区块链平台比较和选择，<a href="https://shuzang.github.io/blockchain-platform-compare-and-select/" target="_blank" rel="noopener noreffer">总结文档地址</a></li>
</ul>
<h2 id="201903">2019.03</h2>
<ul>
<li>Ethereum 原理、架构等基本知识学习</li>
<li>利用虚拟机搭建 Ethereum 私有链，熟悉转账、挖矿等相关命令和操作</li>
<li>了解智能合约编译、部署、调用全过程，了解智能合约开发与测试框架 Truffle</li>
<li>搭建 Swarm 分布式存储网络</li>
</ul>
<h2 id="201904">2019.04</h2>
<ul>
<li>Ethereum 区块生成时间数据集获取及分析 <a href="https://shuzang.github.io/extract-the-block-generation-time-of-ethereum/" target="_blank" rel="noopener noreffer">过程记录</a></li>
<li>场景思考，初步的方案设计和实验设计，工业4.0背景了解。<a href="https://shuzang.github.io/blockchain-for-smart-factory/" target="_blank" rel="noopener noreffer">未完成的智能工厂方案设计</a></li>
<li>智能合约编程语言 Solidity 语法学习及练习</li>
<li>基于已有知识的区块链综述文章撰写，<a href="https://shuzang.github.io/blockchain-for-iot/iiota-smart-factory-case-study/" target="_blank" rel="noopener noreffer">文档地址</a></li>
</ul>
<h2 id="201905">2019.05</h2>
<ul>
<li>继续撰写综述文章，智能工厂场景可行性分析及相关问题考虑</li>
<li>区块链安全与隐私问题总结分析，比如可能的攻击、相关解决方案等，相关方向论文阅读</li>
<li>注意力集中在两篇当时新出的区块链和智能工厂结合的论文，初步确认了应实现一个访问控制方案</li>
</ul>
<h2 id="201906">2019.06</h2>
<ul>
<li>各论文使用的访问控制方案总结比较</li>
<li>各论文使用的存储方案总结</li>
<li>起草开题报告第一版，确认三个创新方向为：访问控制，存储，其它（如共识、通信方式、不相干区块过滤），并确认具体的细节</li>
</ul>
<h2 id="201907">2019.07</h2>
<ul>
<li>开题报告内容继续完善</li>
<li>开始关注区块链平台性能分析工具，并将其作为一个可能的方向</li>
<li>确认要做的三件事：1. 在 Zhang 的方案上复现然后做改进；2. 区块链压缩；3. 移动性和通信链路不稳定性问题解决</li>
</ul>
<h2 id="201908">2019.08</h2>
<ul>
<li>关注性能分析可能遇到的问题及其实验设计细节，寻找可能的方向</li>
<li>安排访问控制方案实现的时间表</li>
<li>熟悉 Quorum 区块链及其网络搭建</li>
<li>开题</li>
</ul>
<h2 id="201909">2019.09</h2>
<ul>
<li>设计树莓派和PC的组网方案，Quorum 客户端编译部署到树莓派，最终将树莓派作为节点加入 Quorum网络</li>
<li>Zhang 论文中的访问控制合约复现，部署及相关问题解决</li>
<li>开始关注异常检测方向，了解强化学习概念和信誉问题</li>
</ul>
<h2 id="201910">2019.10</h2>
<ul>
<li>复现合约的功能测试，相关测试脚本的编写</li>
<li>异常检测方向的论文收集和阅读，相关思路提出，<a href="https://shuzang.github.io/blockchain-and-anomaly-detection/" target="_blank" rel="noopener noreffer">总结文档地址</a></li>
<li>访问控制方案场景思考，可优化之处分析，<a href="https://shuzang.github.io/idea-design-and-optimization-of-smart-contract-based-access-control-scheme/" target="_blank" rel="noopener noreffer">总结文档地址</a></li>
</ul>
<h2 id="201911">2019.11</h2>
<ul>
<li>实验室已有设备梳理及实验方案设计</li>
<li>优化的访问控制方案设计及智能合约实现</li>
<li>区块链用于物联网访问控制的全部问题总结，<a href="https://shuzang.github.io/blockchain-based-access-control-for-iot/" target="_blank" rel="noopener noreffer">文档地址</a></li>
</ul>
<h2 id="201912">2019.12</h2>
<ul>
<li>区块链发展情况调查，包括论文发表情况，期刊、会议和基金信息，研究团队，著名研究者，征稿情况等</li>
<li>已实现的访问控制合约功能测试，使用Truffle 部署，Gas和时间消耗统计，合约安全性检查</li>
</ul>
<h2 id="202001">2020.01</h2>
<ul>
<li>整理已完成访问控制工作，总结创新点，思考下一步研究方向（异常检测、区块链压缩，细化方案，性能测试工具）</li>
<li>通过阅读论文了解当时访问控制发展情况，区块链理论发展情况</li>
</ul>
<h2 id="202003">2020.03</h2>
<ul>
<li>论文写作</li>
<li>分析存储方向研究思路的可行性</li>
<li>开始阅读 Edge-D2D-区块链 的论文</li>
</ul>
<h2 id="202004">2020.04</h2>
<ul>
<li>D2D与区块链结合背景情况调查，初步方案提出，<a href="https://shuzang.github.io/blockchain-for-d2d-cache-or-computing-offload/" target="_blank" rel="noopener noreffer">总结文档地址</a></li>
<li>阅读已有论文分析现有访问控制工作的可扩展性</li>
</ul>
]]></description></item><item><title>阶段总结7-区块链与D2D内容缓存/计算卸载</title><link>https://shuzang.github.io/blockchain-for-d2d-cache-or-computing-offload/</link><pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://shuzang.github.io/blockchain-for-d2d-cache-or-computing-offload/</guid><description><![CDATA[<h2 id="1-概念引入">1. 概念引入</h2>
<p>论文<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>提到，一些邻近的用户设备（User Equipment, UE）组合其计算能力，在本地服务于具有更高性能需求的应用可以叫做 ad-hoc cloud。实际应用需要解决几个关键的问题：</p>
<ol>
<li>在保证处理后的数据能够返回到源 UE 的同时，在附近找到合适的计算 UE</li>
<li>尽管没有用于促进可靠计算的控制信道，但必须启用计算 UE 间的协调</li>
<li>考虑到电池消耗和额外的数据传输约束，必须激励计算 UE 向其它设备提供其计算能力</li>
<li>安全和隐私问题</li>
</ol>
<h2 id="2-背景调查">2. 背景调查</h2>
<p>如第一部分所述，我们主要谈论的问题被称作 ad-hoc cloud，在论文<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>中，将该方向的研究正式命名为移动自组织云（Mobile ad hoc cloud，MAC），这篇综述对2016年及之前的该方向论文进行了总结，我们总结一些可能有用的内容。</p>
<p>本地的计算密集型应用（如游戏和高清视频）需要大量的服务与资源，利用云提供这些资源的方式叫做移动云计算（Mobile Cloud Computing， MCC）。但是，考虑到网络连接的带宽和质量，这种方式不总是可行的，这种情况下，人们提出了 MAC，利用一组移动设备的共享资源，来实现一个共同的目标。MAC 不是用来取代原有技术的，而是一种补充，当网络质量不佳、附近基站不可用或其它情况时，使用这种方式。</p>
<p>以实时会议（conference）出席的例子来说明：移动用户拍摄会议参与者的快照，并将捕获的人脸和存储的照片进行匹配，从而确定谁在参加哪个会话（session）；此外，出于会议议程的规划，会议组织者希望获取不同 session 中参与者的最新情况。在该场景中，移动用户可能没有足够的资源在单个设备上执行该任务，因此选择使用 MAC 满足任务执行的实时性需求。假设每个 session 有50个参与者，其中10个愿意参与 MAC，任务被分解为如下步骤</p>
<ol>
<li>检测快照中的人脸数量，并为每个人脸裁剪一个小图像</li>
<li>分别提交每个人脸进行识别</li>
<li>将与会者列表返回给用户</li>
</ol>
<p>假设第1步需要15秒，第2步需要10秒，第3步需要6秒，不使用 MAC 移动用户总共需要 15+10*50+6 = 512s，如果使用 MAC，任务2被分配给 10 个 MAC 参与者（provider），时间将大幅减少，假设与所有 provider 的通信开销是3s，那么总时间为 15+3 +10 * 5+6 = 74s。</p>
<p>实际的过程更加复杂，面对的问题包括：<strong><ruby>构成 MAC 的移动设备的发现<rt>MAC formation</rt></ruby></strong>、<strong><ruby>任务卸载<rt>task offloading</rt></ruby></strong>，任务调度与分配，安全与隐私，<strong><ruby>移动性和激励<rt>mobility and incentives</rt></ruby></strong>，资源管理。按这种分类总结相关解决方案如下图</p>
<p></p>
<p>由于通常参与 MAC 的移动节点是随机选择的，因此安全性和隐私性是一个重要问题。在 MAC 中加入任何恶意节点都会增加总体任务执行时间，从而导致性能下降。此外，位置的隐私性也是共享设备的用户的一个重要的问题。为了解决这些问题，需要合适的认证与授权机制，保护位置隐私及防止恶意节点参与 MAC。论文<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>提出一种可信算法，基于AES 加密保证节点间的安全通信，同时也可以管理节点的加入和退出。论文<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>则提出一种信任管理系统，监视参与 ad hoc 网络的节点，计算其信任值并存储，从而其它移动设备可验证其信任值，信任值越高越可靠，最终达到阻止恶意节点参与的目的。除此之外，有的方案建立和分发密钥来保护通信，有的方案利用 SaaS 或 PaaS 检测异常行为。</p>
<h2 id="3-引入区块链的例子">3. 引入区块链的例子</h2>
<p>这一部分取自论文<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>，是一个利用区块链提供不可信 D2D 节点间信任的例子。</p>
<p>首先，随着智能手机和 IoT 设备的增多，移动通信已成为日常生活的一部分，传统的云计算不能满足实时性的需要，D2D-ECN(device-to-device edge computing and network)被提出，目的是共享移动设备的计算和通信资源提供一个灵活的边缘计算平台。这种情况下假设希望在一个期望的时间内执行一个计算密集型的任务，可以将计算任务卸载到有可用计算资源的移动设备上执行，数据传输延迟也可以通过购买空闲通信资源减少</p>
<p><figure><a class="lightgallery" href="https://ieeexplore.ieee.org/mediastore_new/IEEE/content/media/8753818/8761046/8761664/qiao1-p6-qiao-small.gif" title="本地的资源交换和任务分配" data-thumbnail="https://ieeexplore.ieee.org/mediastore_new/IEEE/content/media/8753818/8761046/8761664/qiao1-p6-qiao-small.gif" data-sub-html="<h2>资源交换和任务分配</h2><p>本地的资源交换和任务分配</p>">
        
    </a><figcaption class="image-caption">资源交换和任务分配</figcaption>
    </figure></p>
<p>区块链被引入用来解决分布式和点对点网络中不可信用户间的安全和可靠性问题。由于现有研究大部分使用 PoW 共识，在资源有限的 IoT 环境中不具备可行性，作者选择了一种基于信誉的共识（reputation-based consensus）<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>来协调设备和验证交易。整个系统的安全性靠该共识和一个信誉评估系统保证。</p>
<p>作者认为现有研究没有考虑计算卸载规则对基于区块链的边缘网络的性能的影响，整个计算卸载过程可以划分为资源交易和任务分配两部分，资源交易的目的是提供高效的资源定价和分配策略，从而平衡任务所有者的<strong><ruby>效用<rt>utility</rt></ruby></strong>和资源所有者的收益，任务分配则是在保证较低的执行时间和系统开销。论文实际做的事有两件</p>
<ol>
<li>提出并使用智能合约实现了一个分布式的资源交易和任务分配方案，平衡资源定价与收益，最小化执行时间和系统开销；</li>
<li>提出一个信誉评估系统并和共识配合使用保证计算卸载环境的可靠性</li>
</ol>
<p>论文引入资源币激励用户参与，一个计算卸载过程的工作流如下图所示。设备首先在LBS中注册并被授予身份，通过{身份ID，证书，公钥，私钥，钱包地址}五元组追踪在区块链中的交易记录（资源交易和信誉度更新）；然后，任务所有者发送资源需求到LBS，资源所有者发送可用资源数量和使用限制到LBS，LBS验证证书后将这些内容写入智能合约，并在达到条件后自动触发，资源的定价和交易被设定了规则；之后，根据可用的通信和计算资源，智能合约执行任务分配算法最小化总延迟，并在准确返回计算结果后对资源提供者的信誉进行评分；这些工作完成后，任务提供者按照资源价格支付资源币；最后，任务所有者签名后广播资源交易记录和更新后的信誉度，运行 基于信誉的共识，由信誉度最高的节点将这些记录收集到区块并附加到区块链。实际过程需要经过多轮验证</p>
<p><figure><a class="lightgallery" href="https://ieeexplore.ieee.org/mediastore_new/IEEE/content/media/8753818/8761046/8761664/qiao2-p6-qiao-small.gif" title="基于区块链的资源交易和任务分配系统组成和工作流" data-thumbnail="https://ieeexplore.ieee.org/mediastore_new/IEEE/content/media/8753818/8761046/8761664/qiao2-p6-qiao-small.gif" data-sub-html="<h2>工作流</h2><p>基于区块链的资源交易和任务分配系统组成和工作流</p>">
        
    </a><figcaption class="image-caption">工作流</figcaption>
    </figure></p>
<p>这里有3个关注的地方</p>
<ol>
<li>
<p>作者使用公式推导得到了任务分配者效用和资源所有者收益的平衡函数，在<strong>资源交易智能合约</strong>中执行该函数得到合适的定价；</p>
</li>
<li>
<p>作者使用公式推导最小化了任务执行的总延迟，并在<strong>任务分配智能合约</strong>中执行；</p>
</li>
<li>
<p>对资源提供者的信誉度评估在得到正确的计算结果后执行，作者也提供了公式推导</p>
</li>
</ol>
<p>整个系统的安全性通过三个方面保证：共识和信誉评估系统保证计算卸载环境可靠；智能合约保证交易记录和信誉度不被篡改；LBS保证通信安全。</p>
<h2 id="4-一些思路">4. 一些思路</h2>
<p>使用一个公链提供基于位置的服务，所有设备在区块链中注册获取其身份，可以更新自己的资源状态或发起资源请求，由于计算卸载是小范围的，设备还需要提供自身的位置，但位置信息应被加密保护，从而保证隐私。</p>
<p>此外区块链中还维持一个信誉评估系统，根据每次资源交易的结果更新设备信誉度。</p>
<p>访问控制系统在其中起到的作用是，接受到资源请求后，根据位置属性和信誉度获取附近设备的地址，设备地址应该作为一种资源提供。得到附近的设备地址后，发起请求建立资源请求者者和资源提供者的 D2D 通信，该D2D网络同时也是一个区块链，任务分配、计算卸载等过程都在这个本地区块链执行。资源请求者得到结果并验证正确后，将这个临时的区块链链接到公链相应的区块，并在主链中更新信誉度和支付数字货币。</p>
<p>该结构类似于哈希表，主链是不断延长的哈希表结构，每个区块是哈希表的一个元素，而每个哈希表元素对应一条或多条临时区块链。</p>
<p>核心思想是将支付、信誉评估、任务分配、计算卸载等功能分离，放在各自适合的区块链中。</p>
<h3 id="41-功能划分">4.1 功能划分</h3>
<p>我们的基本思路是根据需求将各种功能划分到公链和私链上。基本的出发点是，公链的处理速度不够快，计算卸载和内容缓存都对速度有一定要求，而私链覆盖范围不够大，设备可能在任何时间任何地点有内容缓存或计算卸载的需求。因此最终决定将对处理速度有要求的功能放到私链，将设备发现和移动性等功能放到公链，然后通过一定的方法将两条区块链相关联。</p>
<h4 id="公链">公链</h4>
<p>首先基于位置的服务（LBS）需要在公链上实现。论文<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>使用了一个可信 LBS，设备只有在其中注册后才能成为合法的 D2D-ECN （D2D边缘计算网络）参与者，然后 LBS 会分配设备ID 和证书（也可以是 IP 或 MAC 地址）用来唯一识别设备，接着发给设备一对公私钥用于通信，最后是钱包地址，用于资源交易（购买或出售存储或计算能力）。资源请求者将资源需求发到 LBS，资源所有者将可用资源数量和使用限制发到 LBS，LBS 验证它们的证书后将这些内容写入智能合约。因此在该论文中，LBS是独立于区块链之外的可信实体，我们知道，第三方的可信是相对的，尤其在关于位置的隐私上，我们更抱有戒心，因此可以直接利用智能合约在公链上提供基于位置的服务。</p>
<p>为了激励用户参与计算卸载和内容缓存，使用资源提供者的资源需要支付数字货币，我们可以直接使用公链的货币，如以太坊，因此如第一部分所述，资源请求者还需要知道资源提供者的钱包地址。</p>
<p>经过分析，我们应在公链上实施的功能包括：设备注册，位置管理，支付。支付可以直接使用公链的账户地址，注册需要维持一个注册表，以设备 ID 为主键，关联设备地址、IP或MAC地址以及设备的公链账户地址。鉴于可能发生的恶意行为，我们可以维持一个简单的恶意行为判决机制或一个信誉系统。这里的关键问题是设备位置的隐私，由于公链中信息是透明的，位置不可以直接进行存储，最好是对其进行加密，所以可能还需要在设备注册时传入一个公钥用于对设备地址加密。资源请求者发起请求后，公链中的 LBS 根据请求者的位置查找其附近的设备，并将这些设备的 IP/MAC 传给请求者，用于建立 D2D 网络。资源匹配、任务划分、计算卸载等其它功能都在D2D网络中进行。</p>
<p>这里不确定的是资源匹配的过程是否在公链中实施，也就是说，是直接将请求者附近所有设备的位置发送过去，还是进行资源匹配后将符合要求的设备位置发送过去。</p>
<h4 id="私链">私链</h4>
<p>资源请求者收到附近设备的 IP/MAC 地址后，发起广播请求建立 D2D 网络，然后在 D2D 网络之上建立私有区块链，利用私有区块链提供的智能合约实现任务划分和计算卸载/内容缓存。任务完成后，将整条私链（或私链的哈希）交给公链存储，依附在公链当前的区块上，形成一种类似于如下的结构。</p>
<p></p>
<p>如同现有的线上支付系统，资源提供者完成任务后在公链中标记任务完成，资源请求者确认后，事先锁定在智能合约中的数字货币被支付。整个交易完成，最后可能会根据交易情况评估信誉或记录恶意行为。</p>
<h3 id="42-多链关联">4.2 多链关联</h3>
<p>就是上面说的将临时区块链的数据链接到公链相关的区块，这一思路的来源是 Dorri 的论文<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup>，论文关于 Local BC 包含的交易有一段说明如下</p>
<blockquote>
<p>Besides the headers, each block contains a number of transactions. For each transaction five parameters are stored in the local BC as shown in the top left corner of the Figure 2. The first two parameters are used to chain transactions of the same device to each other and identify each transaction uniquely in the BC. The transaction’s corresponding device ID is inserted on the third field. ”Transaction type” refers to the type of transaction that can be genesis, access, store, or monitor transactions. The transaction is stored on the fifth field if it comes from the overlay network, otherwise, this filed is kept blank. The local BC is kept and managed by a local miner.</p>
</blockquote>
<p>其中提到的 Figure 2 如下，Local BC的区块体是一系列交易的集合，每个交易的第一个字段填充相同设备上一个交易的交易号，用来将相同设备的所有交易链接到一起。每个交易的交易号是第二个字段，设备ID是第三个字段。如果交易来自 Overlay，交易内容存在第五个字段，否则留空。</p>
<p></p>
<h3 id="43-当前难点">4.3 当前难点</h3>
<p>难点也是可行性问题在于</p>
<ol>
<li>支付合约的设计实现</li>
<li>如何根据加密后的位置查找附近设备</li>
<li>已知 IP/MAC 地址如何组件 D2D 网络</li>
<li>如何利用合约实现内容缓存/计算卸载</li>
<li>完成任务的私链如何存在公链上
<ul>
<li>如果存哈希，私链主体内容存在哪里</li>
<li>如果存内容，公链的区块是否能容纳</li>
</ul>
</li>
</ol>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>MACH P, BECVAR Z. Mobile Edge Computing: A Survey on Architecture and Computation Offloading[J]. IEEE Communications Surveys &amp; Tutorials, 2017, 19(3): 1628–1656. DOI:<a href="https://doi.org/10.1109/COMST.2017.2682318" target="_blank" rel="noopener noreffer">10.1109/COMST.2017.2682318</a>. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>YAQOOB I, AHMED E, GANI A, 等. Mobile Ad Hoc Cloud: A Survey: Mobile Ad Hoc Cloud[J]. Wireless Communications and Mobile Computing, 2016, 16(16): 2572–2589. DOI:<a href="https://doi.org/10.1002/wcm.2709" target="_blank" rel="noopener noreffer">10.1002/wcm.2709</a>. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>Lacuesta R, Lloret J, Sendra S, Peñalver L. Spontaneous ad hoc mobile cloud computing network. The Scientific World Journal 2014; 2014: 1–19. DOI: 10.1155/2014/232419 <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>Hammam A, Senbel S. A trust management system for ad-hoc mobile clouds. In Computer Engineering &amp; Systems (ICCES), 2013 8th International Conference on, IEEE, 2013 <a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5" role="doc-endnote">
<p>Qiao G, Leng S, Chai H, et. al. Blockchain Empowered Resource Trading in Mobile Edge Computing and Networks[C]. ICC 2019 - 2019 IEEE International Conference on Communications (ICC). Shanghai, China: IEEE, 2019: 1–6. DOI:<a href="https://doi.org/10.1109/ICC.2019.8761664" target="_blank" rel="noopener noreffer">10.1109/ICC.2019.8761664</a>. <a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6" role="doc-endnote">
<p>F. Gai et al., &ldquo;Proof of Reputation: A Reputation-based Consensus Protocol for Peer-to-Peer Networks&rdquo;, <em>Proc. 2018 Int. Con. Dat. Sys. Adv. App. DASFAA</em>, Feb. 2018. ↩ <a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7" role="doc-endnote">
<p>Dorri A, Kanhers S S, Jurdak R, 等. Blockchain for IoT security and privacy: The case study of a smart home[C/OL]//2017 IEEE International Conference on Pervasive Computing and Communications Workshops (PerCom Workshops). Kona, HI: IEEE, 2017: 618–623. DOI:<a href="https://doi.org/10.1109/PERCOMW.2017.7917634" target="_blank" rel="noopener noreffer">10.1109/PERCOMW.2017.7917634</a>. <a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></description></item><item><title>文献管理工具 Zotero 学习指南</title><link>https://shuzang.github.io/%E6%96%87%E7%8C%AE%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-zotero-%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/</link><pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://shuzang.github.io/%E6%96%87%E7%8C%AE%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-zotero-%E5%AD%A6%E4%B9%A0%E6%8C%87%E5%8D%97/</guid><description><![CDATA[<p>在文献管理方面的需求包括：</p>
<ol>
<li>文献可以方便地导入工具中并提取准确丰富地文献信息</li>
<li>工作和学习时，可以快速在工具中找到自己想要的文献</li>
<li>在写作时，可以方便的导出工具中的文献</li>
</ol>
<p>由于 Zotero 没有内置的 PDF 阅读工具，因此忽略阅读层面的需求，除此之外，最大的缺点是没有移动端的应用程序。下面分别就几个主要的方面探索使用技巧。</p>
<p>注：本文主要参考 <a href="https://sspai.com/post/56724" target="_blank" rel="noopener noreffer">少数派-文献管理神器 Zotero 学习路径指南</a></p>
<h2 id="1-文献导入">1. 文献导入</h2>
<p>Zotero 支持多种导入方式，包括：</p>
<ul>
<li>通过 Zotero Connector 浏览器插件导入</li>
<li>输入文献对应的 ISBN、DOI、PMID 或 arXiv ID 来导入</li>
<li>复制 BibTex 信息从剪贴板导入</li>
<li>从文件（BibTeX, RIS, Zotero RDF等）导入</li>
<li>将下载好的PDF文件直接拖入软件，然后自动提取文件中的元数据</li>
<li>自行添加</li>
</ul>
<p>经过实践，<strong>通过输入  DOI 或 arXiv ID 导入的文献信息最为丰富</strong>，因此有条件的情况下应采用这种方式。</p>
<h3 id="11-通过标识符添加">1.1 通过标识符添加</h3>
<p>单击 Zotero 窗格中间列顶部的「通过标识符添加条目」按钮，输入标识符后按 Enter。如果要一次输入多个标识符，在输入第一个标识符后按 Shift + Enter 可以进入多行模式，随后输入其余标识符（每行一个），并通过 Enter 换行。输入完成后，再按 Shift + Enter 即可一次导入所有文献，示例如下图，是否带有「DOI:」或「arXiv:」前缀不影响导入效果，下图中第一条和第三条是 DOI，中间一条是arXiv ID。</p>
<p></p>
<h3 id="12-通过-feed-进行订阅">1.2 通过 feed 进行订阅</h3>
<p>文献需要及时跟踪，通常是通过邮件订阅或者RSS，Zotero 本身提供了一种简单的订阅方法，相比于前两种，这种方式更受我喜爱，也是现在主要使用的方式。以 IEEE Internet of Things Journal 期刊为例，在 <a href="https://ieeexplore.ieee.org/xpl/mostRecentIssue.jsp?punumber=6488907" target="_blank" rel="noopener noreffer">期刊主页</a> 获取订阅链接（和RSS订阅的链接是一样的），然后在 Zotero 中点击左上角的「新建文献库」按钮，选择「新建订阅」，然后选择「来自URL」</p>
<p></p>
<p>在弹出的「订阅设置」对话框中填入刚刚复制的链接（URL），稍等一会儿就会自动获取到标题，最后在「高级选项」中设置更新频率等信息。</p>
<p></p>
<p>保存之后稍等一会儿就可以看到订阅的情况，之后会按照我们设置的时间每24小时更新一次，也可以在右键菜单中主动更新。订阅的论文并不在我们的文献库中，需要手动添加。</p>
<p></p>
<h2 id="2-文献和笔记管理">2. 文献和笔记管理</h2>
<p>文献管理的目的在于需要时快速而准确的找到所需论文，笔记则提供记录思维的工具。</p>
<h3 id="21-分类与标签">2.1 分类与标签</h3>
<p>分类指的是多个层级的文件夹，这里我的命名规则是不同时期的研究方向，虽然总的划分是区块链，但在不同时期，可能关心不同的领域，比如 access control 或 anomaly detection。有些论文可能从属于不同的分类，可以在一个分类中添加后拖动到另一个分类中，这里的拖动产生的是复制操作，不是剪切，而且，两者指向同一个 论文条目和 PDF 文件，不会产生存储冗余。因此，在删除一篇论文时，可以选择「从分类中移除条目」或「删除条目」，前者只会从当前分类移除论文的链接，如果其它分类中也有该文献，不会受到影响，如果其它分类中没有该文献，文献被移动到「未分类条目」。</p>
<p></p>
<p>除了分类外，还可以为每个文献添加若干标签。为了避免使用维度的重合，标签体系中无必要情况不应再按照研究的领域进行命名，若有必要，先考虑使用「子分类」的方式。我对标签的使用是在应用维度，首先，新加入的文献放入它所属分类中，然后添加「未读」标签，这是因为很多时候添加文献都是批量添加的，然后才慢慢看，等到看完后，删除「未读」标签，添加重要性标签。使用「P1、P2 和 P3」对文献的重要性进行分级，P1 最重要，P3 最不重要，重要性的划分依据这篇论文的热度、引用数和自己感觉，有些论文是领域内公认权威的，引用数爆表，比如每个领域的起始文献，有些论文是自己看完感觉有很多想法可以实践，或者感觉思路很好有借鉴意义，可以添加「P1」标签。最后一个是写作时的分类，将文献划分为「中期」「毕业」「小论文」等几个使用场景，然后添加这些标签。</p>
<p>每个标签可以设置对应的颜色，这个色块会自动的显示在每个条目的开头，方便查看，Zotero 中只提供了9中颜色待选，不过已经足够了，通常我们使用的不超过3个。</p>
<p></p>
<h3 id="22-内容寻找">2.2 内容寻找</h3>
<p>基本的查找思路依然是分类和标签，对于最后得到的结果，可以按照文献相关信息进行排序，比如标题、创建者或者文献类型等。最后，在此基础上，Zotero 还支持对结果进行二次排序。</p>
<p></p>
<p>另外一种查找方法是快速搜索，搜索内容包括标题、创建者等文献信息和标签，在 PDF 文档已建立的情况下，选择「所有内容」甚至可以搜索到文档的文本。</p>
<p></p>
<p>另外，Zotero 的高级搜索还提供和 Web of Science 等文献数据库类似的功能，可以通过文献信息和各种逻辑运算符来控制筛选条件。单击主界面上方的放大镜图标或者在工具栏的「编辑」菜单中可以打开高级搜索窗口。</p>
<p></p>
<p>最后，不同的文献之前、文献和笔记之间都可以进行关联，我们可以将一些相关的文献关联到一起。</p>
<h3 id="23-笔记">2.3 笔记</h3>
<p>每一篇文献支持插入多个笔记，默认的笔记是富文本格式，但由于 Zotero 的插件和 Chrome 或 Firefox 等浏览器的插件格式相同，只需要将浏览器的 <a href="https://github.com/adam-p/markdown-here" target="_blank" rel="noopener noreffer">markdown-here</a> 插件重新打包然后导入 Zotero<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>，即可支持 Markdown 语法。</p>
<p></p>
<h2 id="3-文献导出">3. 文献导出</h2>
<p>在书写论文的过程中插入参考文献是最重要的需求之一，也是文献管理软件存在的意义之一，很多人都是因为这个需求才开始使用文献管理软件。</p>
<h3 id="31-平时使用">3.1 平时使用</h3>
<p>指的是在自己的博客或者笔记中插入引用，因为不需要遵守严格的引用需求，可以使用直接拖拽的方式，单篇或多篇文献都可以，非常方便。</p>
<p></p>
<h3 id="32-在-microsoft-word-中编辑论文">3.2 在 Microsoft Word 中编辑论文</h3>
<p>Zotero 提供相关的加载项供使用，通常在软件安装时就会提示自动安装，也可以自己到「首选项—&gt;引用—&gt;文字处理软件」中进行安装。</p>
<p></p>
<p>安装好后打开 Word 可以看到该插件</p>
<p></p>
<p>各按钮功能介绍如下</p>
<p></p>
<p>在正式插入引文之间，需要设置引文的格式，通过管理样式可以轻松找到海量的引文格式。</p>
<p></p>
<p>在需要添加引文的位置点击「Add/Edit Citation」按钮，调出引文搜索</p>
<p></p>
<p>在出现的搜索框中输入一个标题或作者等搜索特定的参考文献</p>
<p></p>
<p>一旦选中，点击气泡或按下「Ctrl + ↓」添加页码、前缀或后缀</p>
<p></p>
<p>可以一次选择多篇文献，最后按「Enter」即可将文献引用添加到文档中，不过如下图所示，此时添加的只是下标</p>
<p></p>
<p>添加新行并移动光标到新行末尾，点击「Add/Edit Bibliography」将参考书目加入文档。</p>
<p></p>
<p>添加新的引文或文献编辑完成后可以点击刷新更新所有引文和参考书目</p>
<h3 id="33-在-latex-中编辑论文">3.3 在 Latex 中编辑论文</h3>
<p>此时的核心是导出 BibTex 文件，由于原始的导出功能不够完善，导出的字段也无法自定义，因此需要安装 <a href="https://github.com/retorquere/zotero-better-bibtex" target="_blank" rel="noopener noreffer">Better BibTex</a>插件。</p>
<p>导出时，选择所有需要的文献，在右键菜单中选择「导出条目」，然后选择「Better BibTex」格式，点击OK即可导出 bib 文件。</p>
<h2 id="4-其它事项">4. 其它事项</h2>
<p>主要指同步和协作、插件系统和Zotero的其它高级功能。</p>
<h3 id="41-备份与协作">4.1 备份与协作</h3>
<p>Zotero 本身只提供 300M 免费的存储空间，这些空间存储 PDF 文档完全不够，很多文章包括官方都推荐使用 WebDAV 服务，但国内支持的好像只有「坚果云」。因为我的主力软件是 OneDrive，所以这里介绍 Zotero 如何与 OneDrive 配合来存储PDF文件。</p>
<p></p>
<p>Zotero 的数据和文件的同步是分离的，数据指的是文献的分类、标签和各种元数据信息，文件指的是PDF和笔记等各种附件，这就给了我们机会<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>。如上图所示，在「同步」设置页面，对数据同步的选项全部勾选，而文件同步的选项全部取消勾选。</p>
<p>然后切换到「高级—&gt;文件和文件夹」选项卡，点击打开数据文件夹，获取数据文件的存储路径。</p>
<p></p>
<p>所有的附件（包括PDF和笔记）都存储在数据文件夹的<code>storage</code>目录下。我们可以采用软链接<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>的方式来管理这些文件，建立软链接后，原数据文件夹下的<code>storage</code>文件夹成为一个快捷方式，指向OneDrive存储空间的实际文件，因此不会占用大量存储空间。在命令行中使用如下命令建立原始路径和新路径的软链接，</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">mklink /j C:<span class="se">\U</span>sers<span class="se">\l</span>ylw1<span class="se">\Z</span>otero<span class="se">\s</span>torage F:<span class="se">\O</span>neDrive<span class="se">\课</span>题<span class="se">\论</span>文库
</code></pre></td></tr></table>
</div>
</div><ul>
<li><code>/j</code>参数以绝对路径的方式创建软链接，将所有源文件夹文件移动到新文件夹后，清空源文件夹，这样可以保证旧的附近不再占用存储空间</li>
<li><code>C:\Users\lylw1\Zotero\storage</code>是所有文件的原始路径</li>
<li><code>F:\OneDrive\课题\论文库</code>是所有文件的新路径，位于 OndDrive 存储库中，新的文件夹名不必和原来的<code>storage</code>相同，可以任意命名。</li>
</ul>
<p>因为在个人所有电脑中 Zotero 数据文件夹的路径都相同，OneDrive文件夹的路径也相同，所以可以通用，如果不相同，只需要重新修改软链接即可。如果嫌弃这种方式比较麻烦，可以选择使用插件 <a href="http://zotfile.com/" target="_blank" rel="noopener noreffer">ZotFile</a>。</p>
<h3 id="42-插件系统">4.2 插件系统</h3>
<p>插件系统是 Zotero 的一大优势，前面已经提到了几款插件，更多插件可以通过 <a href="https://www.zotero.org/support/plugins" target="_blank" rel="noopener noreffer">官方插件网站</a> 进行查看，或者自行在网上搜索安装。一些推荐的插件如下</p>
<ul>
<li><a href="https://github.com/retorquere/zotero-better-bibtex" target="_blank" rel="noopener noreffer">Better BibTex</a>：Make Zotero useful for us LaTeX holdots.</li>
<li><a href="https://github.com/adam-p/markdown-here" target="_blank" rel="noopener noreffer">Markdown Here</a>：用 Markdown 书写笔记</li>
<li><a href="https://github.com/bwiernik/zotero-shortdoi" target="_blank" rel="noopener noreffer">Zotero DOI Manager</a>：Zotero plugin for auto-fetching and validating DOI and shortDOIs</li>
<li><a href="https://github.com/papermachines/papermachines" target="_blank" rel="noopener noreffer">papermachines</a>：文献可视化</li>
<li><a href="https://github.com/ethanwillis/zotero-scihub" target="_blank" rel="noopener noreffer">Zotero Scihub</a>：自动从 sci-hub 下载文献的 PDF</li>
<li><a href="http://zotfile.com/" target="_blank" rel="noopener noreffer">ZotFile</a>：管理 PDF 文件</li>
</ul>
<h3 id="43-时间轴">4.3 时间轴</h3>
<p>Zotero 有个时间轴功能，可以将所有文献反映在一条时间轴上，时间可以是文献的发表日期、添加日期和修改日期，时间轴的跨度单位可以是日、月、年、十年、百年等，不过这个功能不常用，目前没有想到这个功能的意义。</p>
<p></p>
<h3 id="44-小技巧">4.4 小技巧</h3>
<ul>
<li>当选择了一个项目时，可以通过按住 Option(Ctrl) 键突出显示包含此项目的所有集合，也就是知道这篇文献所在的分组</li>
<li>在集合列表或项目列表中的键盘上按 +（加号）可以展开所有节点，按 -（减号）则可以折叠</li>
<li>要查看所选库或集合中的项目数可以单击然后使用 Command-A(Ctrl-A) 全选，计数将显示在右侧</li>
<li>若使用快速复制功能，在将项目拖放到文本文档时按住 Shift 键能实现插入引文而不是完整引用</li>
<li>可以单击详细信息中的 DOI 和 URL 字段标签直接打开链接</li>
</ul>
<h2 id="5-最后">5. 最后</h2>
<p>主流的文献管理工具还有</p>
<ul>
<li><a href="https://endnote.com/" target="_blank" rel="noopener noreffer">Endnote</a> ：老牌且知名的文献管理工具，付费价格相对较贵但多数高校和科研机构会统一购买，移动端（iPad）使用体验优秀。</li>
<li><a href="https://www.mendeley.com/" target="_blank" rel="noopener noreffer">Mendeley</a> ：2013 年以开源软件身份被 Elsevier 高价收购，背靠大树。</li>
</ul>
<p>不过很多人推荐<a href="https://www.papersapp.com/" target="_blank" rel="noopener noreffer">Papers</a>，除了基本的文献和笔记管理外，还有界面美观和内置PDF阅读器两个优点，说实话很心动，但是要付费订阅，如果走科研道路就算了，可惜并没有打算读博。</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="https://www.cnblogs.com/Jay-CFD/p/10968876.html" target="_blank" rel="noopener noreffer">Zotero导入Markdown here插件</a> <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p><a href="https://www.junjienotes.com/tips/%e5%88%a9%e7%94%a8onedrive%e5%90%8c%e6%ad%a5zotero%e6%95%b0%e6%8d%ae%e6%96%87%e4%bb%b6%e5%a4%b9%e7%9a%84%e6%96%b9%e6%b3%95/" target="_blank" rel="noopener noreffer">利用ONEDRIVE同步ZOTERO数据文件夹的方法</a> <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p><a href="https://www.cnblogs.com/Akkuman/p/9688311.html" target="_blank" rel="noopener noreffer">windows中的软链接硬链接等</a> <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></description></item><item><title>区块链实验6-实验场景的分析与选择</title><link>https://shuzang.github.io/analysis-and-selection-of-experimental-scenes/</link><pubDate>Wed, 15 Jan 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://shuzang.github.io/analysis-and-selection-of-experimental-scenes/</guid><description><![CDATA[<p>考虑到开题时老师给的意见和编写论文的需要，这里再分析一次场景，并选择一个合适的纳入实验。</p>
<h2 id="1-场景">1. 场景</h2>
<p>已有的该方向论文所使用的场景有：Smart home<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> <sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>、Healthcare<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>、Smart Factory<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>、Supply chain<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup> 和 Smart lock<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>。如果根据场景来分类，各有各的不同，但如果根据信任关系来分类，Smart home、Smart Factory、Smart lock 都属于用户与生产厂商之间的冲突，Smart Factory 又可以和 Healthcare 一起归属传统的信任域，可能出现误操作或者人员间的信任问题，Supply chain 则涉及多方之间的信任。</p>
<h3 id="11-用户与生产厂商">1.1 用户与生产厂商</h3>
<p>Smart home、Smart factory 和 Smart lock 都涉及用户和生产厂商之间的信任问题，Smart device 产生的数据会回传给生产厂商的服务器，由厂商进行处理并提供具体的服务，用户对数据并没有完全的控制权，相关的协议仅靠用户协议规定，没有较强的约束力。</p>
<p>这三种中以 Smart home 最具代表性，<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> 中提到的架构图如下，其中涉及三种实体：IoT 设备、网关和服务器。设备有两种类型：智能手机、电视等可以通过 Wi-Fi 或 有线连接直接访问互联网，摄像头、温湿度传感器等只能通过蓝牙、Zigbee 等技术连接网关，由网关访问互联网。这两者是用户端的代表。服务器负责存储 IoT 设备产生的数据以及提供相应的服务，比如从传感器收集环境信息或发送操作命令给执行器。</p>
<p></p>
<p>Smart Factory 通常有自己的服务器，但不可避免地，会需要上传数据向设备厂商换取实时监控、维修等各种服务。而摄像头等设备，实际上并不局限于 Smart home，同样用于 Smart Factory、公共交通等各行各业，Smart Lock 除了用于酒店，当然也可以用在 Smart home，它们的界限并不那么清晰，但其共同点是：均属于 C/S 架构，有自己无法控制的数据。</p>
<blockquote>
<p>Smart home 可扩展到 Smart building 场景，烟雾等火警传感器、电梯、电表、水表等，Smart building 涉及的设备和领域更多，也更具普适性。</p>
</blockquote>
<p>这里举两个典型的实例。</p>
<p>第一个是<strong>摄像头</strong>。如今，很多家庭都选择在家里安装摄像头以提供防盗或其它功能，但是由于家用设备存储能力的不足，或者自身缺乏足够专业的能力进行远程访问，一般都是用设备厂商或第三方服务商提供的软件服务来存储摄录的内容及进行远程访问，监控的内容不可避免地需要上传到他们的服务器，近年来，第三方导致的监控内容泄露的情况频繁发生，用户缺乏对这些数据的控制能力的根本原因，另外，摄像头权限被非法获取也会造成隐私泄露及其它严重的安全问题。基于区块链对摄像头进行访问控制，可以令用户拥有对监控内容的完全控制能力，从而保证用户的隐私与安全。</p>
<p>第二个是<strong>智能门锁</strong>。这里指的是旅馆或公寓的短租房间的电子门锁（门锁作为一种 IoT 资源）。如果一个人想预定旅馆或公寓的房间几个晚上，可以从智能手机（客户端）向处理门锁授权请求的授权服务器（AS）发送请求，AS建立一个智能合约来接收预付款，一旦验证客户已支付，AS将向客户提供必要的凭据（数字钥匙或者称作访问令牌），在确定的时间内，客户可以通过利用手机通过蓝牙等通信手段发起请求，验证权限后可以打开门锁。尽管客户不具有智能门锁的所有权，但通过智能合约，仍然保证了自己的权益。</p>
<h3 id="12-传统信任域">1.2 传统信任域</h3>
<p>如果说单个家庭属于绝对的信任域，那么工厂、医院、公司这种只能是相对的，即使不讨论跨国公司、位处多地的工厂和医院等情况，单个的工厂、医院、公司内也存在各种信任问题，不论有意还是无意，非法的操作是可能发生的。</p>
<p>以<strong>医院的资产管理</strong><sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>为例，考虑这样一件事：医院拥有大量的资产，比如外科手术器械，这些器械会在消毒部门、手术室、实验室等区域周期性的流动，器械位于错误的位置可能危及患者生命，缺乏详细的资产记录也可能造成资产损失。如下图，假设源房间（如灭菌室）将一些资产（如外科手术器械）运送到目的房间（如0号手术室、1号手术室）。由于 $Asset_1$ 已被分配到目的房间1（例如，1号手术室），假如由于人为错误试图访问目的房间0（例如，0号手术室），其访问将被拒绝。简而言之，这一系统的目的是建立医疗资产访问控制系统，防止由于人为错误或外部安全威胁导致资产进入错误区域（如房间）。</p>
<p></p>
<p>论文<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> 所提供的 Smart Factory 下的温度采集实例是一个相似的例子，下图中一个设备节点申请存储权限，温度计发出的数据存储请求由微型计算机代为处理，设备通过一个唯一ID标识，管理中心验证存储权限后，微型计算机将数据加入缓冲池，待数据量满足一定规模或者到达某个周期时间，加密后的温度数据就上传到数据库，数据哈希和相关交易记录存储到区块链中。</p>
<p></p>
<h3 id="13-供应链">1.3 供应链</h3>
<p>论文<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>提出的木屋建造实例是一个供应链场景，主要由下图所示的几个关键流程组成</p>
<p></p>
<p>在收割阶段，传感器/执行器和其它低功耗设备将感知、收集和处理与原材料和收割过程相关的信息，这些信息将用于其它阶段。运输、制造和存储阶段的日志将会被其它阶段利用。分发阶段需要保证由正确的车辆通过正确的路线准时送达。整个过程涉及传感器/执行器、边缘设备/服务器、服务/网络提供者、其它第三方等多种角色，需要保证每个角色都只能访问需要访问的资源以及提供需要提供的必要信息。作者并没有给出一个具体的实验实例。</p>
<p>我们寻找了一个更加详细与具体的供应链实例说明<sup id="fnref:7"><a href="#fn:7" class="footnote-ref" role="doc-noteref">7</a></sup>，是一个关于食品运输的例子，同时这里要说明的是，供应链是 IBM 区块链的一个主要场景，已投入使用，项目名为 <a href="https://www.ibm.com/cn-zh/blockchain/solutions/food-trust" target="_blank" rel="noopener noreffer">IBM Food Trust</a> 。如下图，假设一批香蕉从巴西里约热内卢附近的农场运往鹿特丹的超市配送中心。香蕉被打包放到托盘上，每个托盘都装有一个传感器节点。一大早，这些托盘就被卡车从农场运到港口的一个货运码头，在那里，托盘被装进集装箱，然后集装箱一路运到连锁超市的配送中心。在整个旅程中，香蕉的温度需要保持在10到15摄氏度之间，同时应该远离新鲜的咖啡豆等物品，因为这些东西产生的乙烯加速香蕉的成熟过程。</p>
<p></p>
<h2 id="2-场景选择">2. 场景选择</h2>
<p>我们选定 Smart home 中的摄像头用例、供应链中的易腐商品运输两个场景，来设计我们的实验。</p>
<p>摄像头场景设计如下，初始由厂商建立一个 4 节点的区块链网络（维持最小节点数），其中一个账户设定为管理账户，以该账户部署 MC 和 RC。购买了摄像头的用户注册一个账户为管理员账户，代表的设备可能是家用电脑或者智能手机，首先注册自身，节点类型为 Validator，然后为购买的每个摄像头建立普通节点账户，部署ACC 并注册到管理员账户下，每个家庭成员注册一个普通节点账户并关联自己的智能手机或个人电脑，注册到管理员账户下，ACC 合约地址为空。由家庭管理员为所有设备设定权限，涉及的访问操作包括</p>
<ol>
<li>摄像头申请网络存储；</li>
<li>家庭成员申请查看录像（历史数据或实时数据）；</li>
<li>家庭成员申请开启或关闭摄像头；</li>
</ol>
<p>厂商根据设备 MAC 和可用空间等决定是否授予写入数据权限，家庭成员则根据角色授予权限。</p>
<p>食品运输的场景设计如下，假设一批香蕉被采摘后打包装箱，贴好 RFID 标签/条形码，然后通过扫描枪和人工输入将采摘时间、采摘位置、所属农场、商品类型、重量、状态、采摘者、记录者等属性记录上链。这批香蕉已经被预定送往某个超市，且有一个大致的运输计划，包括这批货物在什么时间应当位于什么地点，被什么交通工具运输。早晨，这批香蕉被装运到货车上，装运时需要通过扫描枪扫描，然后通过货物ID查询相关信息与运输计划匹配，确保装运到了正确的货车上，同时采集并更新装运时间、装运地点、货物状态等信息。这批香蕉被送到港口的货运码头，卸货时在码头继续被扫描，更新卸货时间、地点、货物状态，确认到达了正确的码头，符合运输计划。紧接着，这批香蕉又被装入集装箱，相关的信息随之更新，当货物到达超市后，更新状态并确认目的地。</p>
<p>整个过程中发生的访问控制包括，一开始管理者根据运输计划设置访问控制策略，确保途中涉及的所有实体，包括运输的货车、港口、集装箱、超市等在规定的时间或位置有权访问这批香蕉的相关信息，在运输过程的每个阶段，这些实体扫描 RFID 标签/条形码时都会同步发起访问请求，只有符合要求的实体才能获得相关信息并更新当前环境属性。诸如购买订单、交付记录以及其它的法律文档或相关协定，不希望被第三方访问的，可以使用 Quorum 的私有交易功能，保证只被交易双方看到。</p>
<h3 id="关于访问操作的说明">关于访问操作的说明</h3>
<p>谈到访问控制，指的是什么样的操作，我们通常所谈及的，是对传感器数据的访问和对执行器的控制。Dorri 的论文<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>是该基于区块链完成物联网访问控制领域起始的几篇论文之一，也是引用最多的论文之一，他的应用场景是 Smart home。在这篇论文中，他将对数据的操作分为了如下三类</p>
<p>首先是<strong>存储数据</strong>。每个设备都有数据存储的需求，以一个智能恒温器为例，假设 Alice 在云中有一个账户并设置了上传数据的权限，当恒温器有存储数据的请求时，需要首先将数据发送到本地矿工，矿工根据已定义的策略对恒温器的权限进行验证，验证通过后将数据、数据哈希一起发送到云存储，云存储检查是否有剩余空间并匹配数据哈希，在存储完成后，将数据 Hash 和区块号返回，相关的交易收集到区块链中。</p>
<p></p>
<p>然后是<strong>访问数据</strong>。服务提供者可能需要周期性的访问存储的数据或某个设备的全部数据，请求交易经过 Smart home 的矿工验证权限后，矿工从存储中获取数据，最后用请求者的公钥加密数据后将数据发给请求者。</p>
<p></p>
<p>最后是<strong>监控数据</strong>。某些时候，智能家庭的所有者可能需要实时地访问家里某些设备的信息，比如恒温器当前配置。矿工收到用户请求后，验证用户权限然后返回设备的实时数据。</p>
<p></p>
<p>我们应当证明我们所实现的系统能够完成这些操作，不过实际的测试需要添加存储系统比如 IPFS，然后编写一个存储合约与现有系统关联，由于涉及的东西比较多，可以作为下一步的工作。</p>
<h2 id="3-供应链场景分析">3. 供应链场景分析</h2>
<p>这部分是 2020.09.09 写的，位于中期答辩以前，主要是以 IBM 的一个项目：<a href="https://www.ibm.com/cn-zh/blockchain/solutions/food-trust" target="_blank" rel="noopener noreffer">IBM Food Trust</a> 为参考，进一步分析供应链（更具体一点是食物供应链）场景，指出区块链的作用和我们工作的必要性。</p>
<p>需要说明的是，这部分场景可以用于论文中的实验说明及答辩的时候向老师们介绍，但实际上，设计系统的时候并没有严格和场景相关，理论上只要物联网和区块链可结合的场景都适用。所以，Introduction 从供应链的角度分析可以，从传统访问控制系统的问题这一角度分析也可以。</p>
<h3 id="31-供应链的问题">3.1 供应链的问题</h3>
<p>对消费者而言， 当前购买商品消费者的选择不断增多，导致品牌效应明显，消费者更倾向选择听过的品牌。另外，由于环保意识和可持续发展意识的形成，市场环境的恶化，当前消费者购买商品不仅想知道营养成分，还想知道如何种植、如何制作以及经历了哪些运输过程到达消费者手中的，对这一系列过程的透明化有助于消费者形成对品牌安全和质量的信心，培养用户忠诚度。</p>
<p>对于整个供应链整个上下游 ，包括生产商、加工方、运输公司、零售商等，参与者众多，各企业数字化程度不一致，协作与交接不密切，交接甚至有时候还在使用纸质文件，产生的问题包括</p>
<ol>
<li>效率低下，整个过程发生产品损失、交付延期的概率增加，碳足迹也大幅增加，尤其是对于时间要求较高的食品而言，还会影响食品的新鲜程度，甚至造成食物浪费，其它商品类似；</li>
<li>发生食品安全问题时，在整个供应链中寻找发生问题的地方要花费大量的时间；</li>
<li>过程不透明，某些环节黑箱运作，是食品腐败和欺诈产生的重要原因之一。</li>
</ol>
<h3 id="32-区块链的作用">3.2 区块链的作用</h3>
<p>依赖行业龙头企业或政府建立一个统一的平台是行不通的，供应链各参与者之间的信任难以达成，区块链的主要作用就是利用透明、不可篡改的特性提供信任，并通过智能合约尽量实现自动化，从而提高效率。具体的好处可以总结如下</p>
<ol>
<li>所有参与者实时的知道货物来源、位置、状态，整个过程完全透明，消费者更放心，便于建立品牌信任；</li>
<li>知道所有的信息还便于保证产品质量，以及发现问题时快速确认责任方，以及消除欺诈风险；</li>
<li>便于供应链参与者根据货物情况建立更好的供需模型；</li>
<li>自动化的处理和即时的同步可以提升效率，减少运输成本和浪费，从而节省成本。</li>
</ol>
<h3 id="33-访问控制系统">3.3 访问控制系统</h3>
<p>对于权限的控制是一个两级的机制。</p>
<p>首先，使用联盟链，企业想要加入需要得到监管委员会的认可。</p>
<p>其次，使用访问控制系统，保证每条供应链的隔离，确保数据只能被该条供应链的参与者看到。我们可以理解，一个访问控制系统是必不可少的，而且是核心功能。</p>
<p>另外，还使用隐私合约和隐私交易机制，进一步保证隐私，因为区块链本身是完全透明的。</p>
<p>为了应对物联网复杂的环境，我们决定实现一个基于属性的访问控制系统来完成细粒度的访问控制，要解决的问题包括</p>
<ol>
<li>应该包含什么样的功能；</li>
<li>以什么样的架构来组织这些功能</li>
</ol>
<p>对于问题1，核心的功能应该包括：用户及设备的管理、属性的管理、策略的管理及核心的访问控制逻辑。这里的管理包括增删查改四个基本功能。</p>
<p>对于问题2，我们参考了其它的论文，并做了一定的改动，具体查看前面的系列文章，有详细的思考和设计的过程。</p>
<h2 id="4-未来工作">4. 未来工作</h2>
<p>基于属性的访问控制引入了对海量属性和策略的维护问题，如何自动化的根据设备实时状态更新这些信息，可以是下一步研究的问题（比如预言机）；</p>
<p>物联网设备数量和通信活动的频繁，必然导致数据的快速增长，考虑区块链存储数据的昂贵，必须考虑如何解决这一点，可以考虑两种方案</p>
<ol>
<li>使用分布式存储系统将数据存储在链下，虽然损失了区块链的安全性；</li>
<li>由于大量的数据具有时效性，可以考虑对这些数据进行压缩；</li>
</ol>
<p>注意，这些工作是在恶意行为检测部分完成后可以继续进行的工作，我们书写本篇文章这部分内容时，恶意行为检测部分已经接近完成。</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>A. Dorri, S. S. Kanhere, and R. Jurdak, “Blockchain in internet of things: Challenges and Solutions,” arXiv:1608.05187 [cs], Aug. 2016. Available: <a href="http://arxiv.org/abs/1608.05187">http://arxiv.org/abs/1608.05187</a>. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>P. Wang, Y. Yue, W. Sun, and J. Liu, “An Attribute-Based Distributed Access Control for Blockchain-enabled IoT,” in 2019 International Conference on WiMob, Barcelona, Spain, Oct. 2019, pp. 1–6, doi: 10.1109/WiMOB.2019.8923232. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>Figueroa, Añorga, and Arrizabalaga, An Attribute-Based Access Control Model in RFID Systems Based on Blockchain Decentralized Applications for Healthcare Environments, Computers, vol. 8, no. 3, p. 57, Jul. 2019, doi: 10.3390/computers8030057. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>J. Wan, J. Li, M. Imran, D. Li, and Fazal-e-Amin, “A Blockchain-Based Solution for Enhancing Security and Privacy in Smart Factory,” IEEE Trans. Ind. Inf., vol. 15, no. 6, pp. 3652–3660, Jun. 2019, doi: 10.1109/TII.2019.2894573. <a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5" role="doc-endnote">
<p>T. Kumar, A. Braeken, V. Ramani, I. Ahmad, E. Harjula, and M. Ylianttila, “SEC-BlockEdge: Security Threats in Blockchain-Edge based Industrial IoT Networks,” presented at the 2019 11th International Workshop on RNDM, Nicosia, Cyprus, Oct. 2019, p. 7. <a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6" role="doc-endnote">
<p>V. A. Siris, D. Dimopoulos, N. Fotiou, S. Voulgaris, and G. C. Polyzos, “Trusted D2D-Based IoT Resource Access Using Smart Contracts,” in 2019 IEEE 20th International Symposium on WoWMoM, Washington, DC, USA, Jun. 2019, pp. 1–9, [Online]. Available: <a href="https://ieeexplore.ieee.org/document/8793041/">https://ieeexplore.ieee.org/document/8793041/</a>. <a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:7" role="doc-endnote">
<p>L. Evers and P. Havinga, “Supply Chain Management Automation using Wireless Sensor Networks,” in <em>2007 IEEE Internatonal Conference on Mobile Adhoc and Sensor Systems</em>, Pisa, Italy, Oct. 2007, pp. 1–3, doi: <a href="https://doi.org/10.1109/MOBHOC.2007.4428689" target="_blank" rel="noopener noreffer">10.1109/MOBHOC.2007.4428689</a>. <a href="#fnref:7" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>]]></description></item><item><title>区块链实验5-优化系统的实现与测试</title><link>https://shuzang.github.io/optimize-the-implementation-and-testing-of-the-system/</link><pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://shuzang.github.io/optimize-the-implementation-and-testing-of-the-system/</guid><description><![CDATA[<p>本文是方案优化部分的第二篇，此时已经根据上一篇的思路完成了对合约代码的重新编写，本篇对优化后的系统进行测试。</p>
<h2 id="1-合约说明">1. 合约说明</h2>
<p>新的合约系统中依然包含Register Contract（注册合约，RC），Access Control Contract（访问控制合约，ACC）和 Judge Contract（判决合约，JC）三种合约。</p>
<h3 id="11-gas消耗统计">1.1 Gas消耗统计</h3>
<p>三个合约部署的Gas消耗统计如下</p>
<table>
<thead>
<tr>
<th>合约名</th>
<th>transaction cost</th>
<th>execution cost</th>
</tr>
</thead>
<tbody>
<tr>
<td>RC</td>
<td>3285811 gas</td>
<td>2457443 gas</td>
</tr>
<tr>
<td>ACC</td>
<td>5380922 gas</td>
<td>4047334 gas</td>
</tr>
<tr>
<td>JC</td>
<td>1375161 gas</td>
<td>1002445 gas</td>
</tr>
</tbody>
</table>
<p>消耗的代币数量 = gas × gasprice，gasprice的货币单位决定代币的货币单位。</p>
<p>在Quorum网络中，这些Gas消耗没有实际意义，因为gasprice = 0，合约部署前会判断用户是否拥有足够的gas，但不会真的扣除。</p>
<h3 id="12-合约功能说明">1.2 合约功能说明</h3>
<p>RC实现的功能大致分为两类，第一部分对合约进行管理，第二部分对属性进行管理</p>
<p>ACC实现的功能分为三类，第一部分对设备自身拥有的资源属性进行管理，第二部分对访问控制策略进行管理，第三部分是访问控制函数</p>
<p>JC实现两个函数，第一个是恶意行为判决，第二个用来查询恶意行为</p>
<h2 id="2-审计">2. 审计</h2>
<p>智能合约的安全性非常重要，行业内对智能合约进行安全性分析称之为「审计」</p>
<h3 id="21-工具选取">2.1 工具选取</h3>
<p>基本的思路是选取合适的自动审计工具来对编写完成的合约进行分析，参考了 <a href="https://learnblockchain.cn/2019/10/15/VaasMythril/" target="_blank" rel="noopener noreffer">关于形式化验证两大工具 (Vass &amp; Mythril) 测试对比</a> 这篇文章。</p>
<p>在经过大量查找后发现，商业化应用的审计工具以上文中提到的这两款（Vass 和 Mythril） 最为普及。我们首先使用成都链安的 Vass 工具进行分析，然而发现，在合约中存在内联汇编时，Vass 无法编译合约，更谈不上审计，然而内联汇编在我们的合约中是必要的，因此换用 Mythril。</p>
<p>工具是由以太坊开源社区所提供的安全分析工具，而建立在Mythril上的合约分析平台 <a href="https://github.com/b-mueller/awesome-mythx-smart-contract-security-tools" target="_blank" rel="noopener noreffer">MythX</a>具有更高的可用性并覆盖了更广泛的安全问题，因此最终使用MythX 完成统计分析。MythX 拥有 Remix、VScode 和 Truffle 的插件，因此无论以哪种方式编辑合约，都可以轻松的进行安全分析，但首先需要拥有 MythX 的账户。</p>
<p>首先在 <a href="https://dashboard.mythx.io/#/registration">https://dashboard.mythx.io/#/registration</a> 页面使用邮箱进行注册，之后关联 MetaMask 以太坊账户，MythX 将提供一个密码供 Remix 等工具中的插件使用，也可以自己设定，但设定的密码要求长度为 6-64 位，至少一个小写字符，一个大写字符，一个数字和一个符号，该要求的原文如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">Password needs to contain: Length: 8 and 64 characters; One lowercase (a-z) and uppercase (A-Z) letter; One digit (0-9); One symbol (e.g. !&#34;#$%&amp;/()., )
</code></pre></td></tr></table>
</div>
</div><h3 id="22-审计">2.2 审计</h3>
<p>打开 Remix 界面，在插件列表搜索 MythX，点击<code>Activate</code>将插件激活。</p>
<p>以 Remix 自带的示例合约 ballot.sol 为例，首先编译该合约，然后切换到 MythX 选项卡，输入之前关联到 MythX 的以太坊账户地址，MythX 提供的或自己更改后的密码，点击<code>Save</code>，然后点击<code>Analyze</code></p>
<p></p>
<p>经过一段时间的等待后，将可以在<code>Report</code>界面查看到安全分析结果</p>
<p></p>
<p>也可以点击上图 Log 记录中的链接进入 MythX Dashboard 查看详细结果</p>
<p></p>
<p>点击<code>Analysed Files</code>查看错误的详细位置与说明，然后更改源代码，重新测试，直到合约安全性达到自己想要的结果。</p>
<p></p>
<p>检测到的合约弱点(漏洞)以SWC-XXX编号的形式出现，由 <a href="https://swcregistry.io/">https://swcregistry.io/</a> 可查看完整的安全问题列表和解释。但是，免费的 MythX 只能检测10种安全问题，Pro版和企业版可以检测26种安全问题，具体对每种安全问题的支持程度见该页面： <a href="https://mythx.io/swc-coverage/">https://mythx.io/swc-coverage/</a></p>
<p>当前调试过程种，遇到的典型安全问题是 SWC-101:Integer Overflow and Underflow 问题，问题的具体分析可参考 <a href="https://github.com/ethereum/solidity/issues/796" target="_blank" rel="noopener noreffer">solidity-issue #796</a></p>
<h3 id="23-审计结果">2.3 审计结果</h3>
<p>我们所编写的 RC，ACC 和 JC 三个合约在经过多次修改后，将出现的安全问题降低到了可接受的程度，如下图所示</p>
<p></p>
<p>三个合约出现的低级安全问题均为SWC-103: Floating Pragma ，即编译器的版本指定为一个范围，但这样具有更好的适用性，因此不进行修改</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"> <span class="nx">pragma</span> <span class="nx">solidity</span> <span class="o">&gt;=</span><span class="mf">0.4.22</span> <span class="o">&lt;</span><span class="mf">0.6.0</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>ACC出现的15个中级安全问题在详情列表中无法查看</p>
<p></p>
<p>邮件询问后官方的回复如下，字节码级别的错误如果不依靠安全工具很难检出并修正，因此我们只能忽略掉这些安全问题。</p>
<blockquote>
<p><strong>Josh Reid</strong> (MythX)</p>
<p>Dec 5, 11:11    AST</p>
<p>Hello,</p>
<p>Thanks for reaching out to MythX support! We are currently investigating    any potential issues that may be causing these vulnerabilities to not be    displayed fully, however this may also be due to the vulnerabilities being    detected only on the bytecode.</p>
<p>Unfortunately, at this time we do no have the ability to display bytecode    vulnerabilities as we cannot specify where they are. However, this is    something we are looking to evaluate and differentiate on more as we go    forward. I apologize for any confusion this may have caused and will be    sure to update you if we find any issues as we continue to look into this.    In the meantime, thanks so much for your patience and cooperation! Is there    anything else I can help you with at this time?</p>
<p>Best,</p>
<p>Josh</p>
</blockquote>
<h2 id="3-系统测试">3. 系统测试</h2>
<p>本节介绍合约在 Quorum 区块链网络中的部署过程和访问控制的测试实现。由于论文复现的时候发现手动配置的复杂性太高，极易出错，而一旦出错就必须重来，因此这次的优化实验决定使用 truffle 进行部署测试。</p>
<h3 id="31-账户设置">3.1 账户设置</h3>
<p>按设计，Raspberry Pi 3B+ 是 lightnode1，Raspberry Pi 3B 是 linghtnode2。区块链网络启动后，四个 validator 各有 10<sup>50</sup> wei(10<sup>18</sup>是 1 ether)，但是后面加入区块链网络的两台树莓派是普通节点，余额为 0，所以首先由 node0 向两个账户分别转账 1 ether。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># lightnode1账户地址为：&#34;0x77c22157a3b8840d34b8ed5975b5f2597bd6a7a2&#34;</span>
<span class="c1"># lightnode2账户地址为：&#34;0xa31d40508da63fb00d7e2f4db57c3774384aa299&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>在 node0 的 geth console 中解锁账户，并分别向 lightnode1 和 lightnode2 转账 1 ether</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">&gt;</span> <span class="nx">eth</span><span class="p">.</span><span class="nx">accounts</span>
<span class="p">[</span><span class="s2">&#34;0xbffe4ff0cbd0a7590fb71966d1e6bb1a4c2359e0&#34;</span><span class="p">]</span>
<span class="o">&gt;</span> <span class="nx">eth</span><span class="p">.</span><span class="nx">getBalance</span><span class="p">(</span><span class="nx">eth</span><span class="p">.</span><span class="nx">accounts</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="mi">1</span><span class="nx">e</span><span class="o">+</span><span class="mi">50</span>
<span class="o">&gt;</span> <span class="nx">personal</span><span class="p">.</span><span class="nx">unlockAccount</span><span class="p">(</span><span class="nx">eth</span><span class="p">.</span><span class="nx">accounts</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="nx">Unlock</span> <span class="nx">account</span> <span class="mh">0xbffe4ff0cbd0a7590fb71966d1e6bb1a4c2359e0</span>
<span class="nx">Passphrase</span><span class="o">:</span> 
<span class="kc">true</span>
<span class="o">&gt;</span> 
<span class="o">&gt;</span> <span class="nx">eth</span><span class="p">.</span><span class="nx">sendTransaction</span><span class="p">({</span><span class="nx">from</span><span class="o">:</span><span class="nx">eth</span><span class="p">.</span><span class="nx">accounts</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">to</span><span class="o">:</span><span class="s2">&#34;0x77c22157a3b8840d34b8ed5975b5f2597bd6a7a2&#34;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="o">*</span><span class="mi">1</span><span class="nx">e18</span><span class="p">})</span>
<span class="s2">&#34;0x3ed3cbc568a64dff3c3fe4a00b87d259d2299953c47e284b19253299eb8c4725&#34;</span>
<span class="o">&gt;</span> <span class="nx">eth</span><span class="p">.</span><span class="nx">sendTransaction</span><span class="p">({</span><span class="nx">from</span><span class="o">:</span><span class="nx">eth</span><span class="p">.</span><span class="nx">accounts</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nx">to</span><span class="o">:</span><span class="s2">&#34;0xa31d40508da63fb00d7e2f4db57c3774384aa299&#34;</span><span class="p">,</span> <span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="o">*</span><span class="mi">1</span><span class="nx">e18</span><span class="p">})</span>
<span class="s2">&#34;0xc9e4193164d38d94502960fcc0d1d7c2e22a9f04307145945c4ae525c6d99aee&#34;</span>
<span class="o">&gt;</span> <span class="nx">eth</span><span class="p">.</span><span class="nx">getBalance</span><span class="p">(</span><span class="nx">eth</span><span class="p">.</span><span class="nx">accounts</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="mf">9.9999999999999999999999999999998e+49</span>
</code></pre></td></tr></table>
</div>
</div><p>在 lightnode1 和 lightnode2 的 geth console 执行下列命令查询余额，由结果可知转账成功。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">&gt;</span> <span class="nx">web3</span><span class="p">.</span><span class="nx">fromWei</span><span class="p">(</span><span class="nx">eth</span><span class="p">.</span><span class="nx">getBalance</span><span class="p">(</span><span class="nx">eth</span><span class="p">.</span><span class="nx">accounts</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="s2">&#34;ether&#34;</span><span class="p">)</span>
<span class="mi">1</span>
</code></pre></td></tr></table>
</div>
</div><p>两台树莓派担任的角色是网关，用于管理 IoT 设备，因此分别在 lightnode1 和 lightnode2 中建立新账户，用来代表 IoT 设备，由网关向各自管理的设备转账 10<sup>7</sup> wei，以供使用。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="err">#</span> <span class="nx">lightnode1</span>
<span class="o">&gt;</span> <span class="nx">personal</span><span class="p">.</span><span class="nx">newAccount</span><span class="p">()</span>
<span class="nx">Passphrase</span><span class="o">:</span>
<span class="nx">Repeat</span> <span class="nx">passphrase</span><span class="o">:</span>
<span class="s2">&#34;0x9a4aa696f85c6bf96733cc5385ccaf2b7ee13f17&#34;</span>
<span class="o">&gt;</span> <span class="nx">personal</span><span class="p">.</span><span class="nx">listAccounts</span>
<span class="p">[</span><span class="s2">&#34;0x77c22157a3b8840d34b8ed5975b5f2597bd6a7a2&#34;</span><span class="p">,</span> <span class="s2">&#34;0x9a4aa696f85c6bf96733cc5385ccaf2b7ee13f17&#34;</span><span class="p">]</span>
<span class="o">&gt;</span> <span class="nx">personal</span><span class="p">.</span><span class="nx">unlockAccount</span><span class="p">(</span><span class="nx">eth</span><span class="p">.</span><span class="nx">accounts</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="nx">Unlock</span> <span class="nx">account</span> <span class="mh">0x77c22157a3b8840d34b8ed5975b5f2597bd6a7a2</span>
<span class="nx">Passphrase</span><span class="o">:</span>
<span class="kc">true</span>
<span class="o">&gt;</span> <span class="nx">eth</span><span class="p">.</span><span class="nx">sendTransaction</span><span class="p">({</span><span class="nx">from</span><span class="o">:</span><span class="nx">eth</span><span class="p">.</span><span class="nx">accounts</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">to</span><span class="o">:</span><span class="nx">eth</span><span class="p">.</span><span class="nx">accounts</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="o">*</span><span class="mi">1</span><span class="nx">e7</span><span class="p">})</span>
<span class="s2">&#34;0x35bda063bc28ff3ef68b78962f427e930824390c4d1a8857c98e2dcf70485e17&#34;</span>
<span class="o">&gt;</span> <span class="nx">eth</span><span class="p">.</span><span class="nx">getBalance</span><span class="p">(</span><span class="nx">eth</span><span class="p">.</span><span class="nx">accounts</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="mi">10000000</span> 

<span class="err">#</span> <span class="nx">lightnode2</span>
<span class="o">&gt;</span> <span class="nx">personal</span><span class="p">.</span><span class="nx">newAccount</span><span class="p">()</span>
<span class="nx">Passphrase</span><span class="o">:</span> 
<span class="nx">Repeat</span> <span class="nx">passphrase</span><span class="o">:</span> 
<span class="s2">&#34;0x016b71d115f1da36de58d2b78369fd3228bef3dd&#34;</span>
<span class="o">&gt;</span> <span class="nx">personal</span><span class="p">.</span><span class="nx">listAccounts</span>
<span class="p">[</span><span class="s2">&#34;0xa31d40508da63fb00d7e2f4db57c3774384aa299&#34;</span><span class="p">,</span> <span class="s2">&#34;0x016b71d115f1da36de58d2b78369fd3228bef3dd&#34;</span><span class="p">]</span>
<span class="o">&gt;</span> <span class="nx">personal</span><span class="p">.</span><span class="nx">unlockAccount</span><span class="p">(</span><span class="nx">eth</span><span class="p">.</span><span class="nx">accounts</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="nx">Unlock</span> <span class="nx">account</span> <span class="mh">0xa31d40508da63fb00d7e2f4db57c3774384aa299</span>
<span class="nx">Passphrase</span><span class="o">:</span> 
<span class="kc">true</span>
<span class="o">&gt;</span> <span class="nx">eth</span><span class="p">.</span><span class="nx">sendTransaction</span><span class="p">({</span><span class="nx">from</span><span class="o">:</span><span class="nx">eth</span><span class="p">.</span><span class="nx">accounts</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">to</span><span class="o">:</span><span class="nx">eth</span><span class="p">.</span><span class="nx">accounts</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="o">*</span><span class="mi">1</span><span class="nx">e7</span><span class="p">})</span>
<span class="s2">&#34;0x96bc2b359219c72ff4f2ce910c27d4c76649685a8f9cfd1b879938317c9a1fe1&#34;</span>
<span class="o">&gt;</span> <span class="nx">eth</span><span class="p">.</span><span class="nx">getBalance</span><span class="p">(</span><span class="nx">eth</span><span class="p">.</span><span class="nx">accounts</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="mi">10000000</span>
</code></pre></td></tr></table>
</div>
</div><p>至此账户设置完成，接下来将 truffle 连接到 quorum 网络，部署合约</p>
<h3 id="32-安装truffle">3.2 安装Truffle</h3>
<p>在 Ubuntu18.04 下安装运行，要求 Node.js 版本高于 v8.9.4，这里全都升级到了最新</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo apt-get install npm
$ sudo npm install npm@latest -g
$ sudo npm install n -g
$ sudo n lts
</code></pre></td></tr></table>
</div>
</div><p>安装 Truffle</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo npm install -g truffle
$ truffle version
Truffle v5.1.5 <span class="o">(</span>core: 5.1.5<span class="o">)</span>
Solidity v0.5.12 <span class="o">(</span>solc-js<span class="o">)</span>
Node v12.14.0
Web3.js v1.2.1
</code></pre></td></tr></table>
</div>
</div><h3 id="33-创建项目和基本配置">3.3 创建项目和基本配置</h3>
<p>建立空项目</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ mkdir AC
$ <span class="nb">cd</span> AC
</code></pre></td></tr></table>
</div>
</div><p>初始化项目</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ truffle init
✔ Preparing to download box
✔ Downloading
✔ cleaning up temporary files
✔ Setting up box
</code></pre></td></tr></table>
</div>
</div><p>项目文件夹中出现相关文件说明成功，此时没有任何合约和测试代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ ls
contracts  migrations  <span class="nb">test</span>  truffle-config.js
</code></pre></td></tr></table>
</div>
</div><p>修改<code>truffle-config.js</code>文件进行配置，使其关联到已建立的 quorum 网络</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="c1">// truffle-config.js
</span><span class="c1"></span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">networks</span><span class="o">:</span> <span class="p">{</span>
     <span class="nx">development</span><span class="o">:</span> <span class="p">{</span>
       <span class="nx">host</span><span class="o">:</span> <span class="s2">&#34;192.168.191.2&#34;</span><span class="p">,</span>  <span class="c1">// Localhost (default: none)
</span><span class="c1"></span>       <span class="nx">port</span><span class="o">:</span> <span class="mi">22000</span><span class="p">,</span>            
       <span class="nx">network_id</span><span class="o">:</span> <span class="s2">&#34;10&#34;</span><span class="p">,</span>       
       <span class="nx">gasPrice</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
       <span class="nx">gas</span><span class="o">:</span> <span class="mi">100000000</span><span class="p">,</span>
       <span class="nx">type</span><span class="o">:</span> <span class="s2">&#34;quorum&#34;</span>    
     <span class="p">},</span>
     <span class="nx">lightnode1</span><span class="o">:</span> <span class="p">{</span>
       <span class="nx">host</span><span class="o">:</span> <span class="s2">&#34;192.168.191.3&#34;</span><span class="p">,</span>   
       <span class="nx">port</span><span class="o">:</span> <span class="mi">22000</span><span class="p">,</span>            <span class="c1">// Standard Ethereum port (default: none)
</span><span class="c1"></span>       <span class="nx">network_id</span><span class="o">:</span> <span class="s2">&#34;10&#34;</span><span class="p">,</span>       
       <span class="nx">gasPrice</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
       <span class="nx">gas</span><span class="o">:</span> <span class="mi">10000000</span><span class="p">,</span>
       <span class="nx">type</span><span class="o">:</span> <span class="s2">&#34;quorum&#34;</span><span class="p">,</span>
       <span class="nx">from</span><span class="o">:</span> <span class="s2">&#34;0x9a4aa696f85c6bf96733cc5385ccaf2b7ee13f17&#34;</span><span class="p">,</span>    
       <span class="nx">provider</span><span class="o">:</span> <span class="k">new</span> <span class="nx">Web3</span><span class="p">.</span><span class="nx">providers</span><span class="p">.</span><span class="nx">WebsocketProvider</span><span class="p">(</span><span class="s2">&#34;ws://192.168.191.3:8545&#34;</span><span class="p">)</span>
     <span class="p">},</span>
     <span class="nx">lightnode2</span><span class="o">:</span> <span class="p">{</span>
       <span class="nx">host</span><span class="o">:</span> <span class="s2">&#34;192.168.191.4&#34;</span><span class="p">,</span>  
       <span class="nx">port</span><span class="o">:</span> <span class="mi">22000</span><span class="p">,</span>            <span class="c1">// Standard Ethereum port (default: none)
</span><span class="c1"></span>       <span class="nx">network_id</span><span class="o">:</span> <span class="s2">&#34;10&#34;</span><span class="p">,</span>       
       <span class="nx">gasPrice</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
       <span class="nx">gas</span><span class="o">:</span> <span class="mi">10000000</span><span class="p">,</span>
       <span class="nx">type</span><span class="o">:</span> <span class="s2">&#34;quorum&#34;</span><span class="p">,</span>
       <span class="nx">from</span><span class="o">:</span> <span class="s2">&#34;0x016b71d115f1da36de58d2b78369fd3228bef3dd&#34;</span><span class="p">,</span>
       <span class="nx">provider</span><span class="o">:</span> <span class="k">new</span> <span class="nx">Web3</span><span class="p">.</span><span class="nx">providers</span><span class="p">.</span><span class="nx">WebsocketProvider</span><span class="p">(</span><span class="s2">&#34;ws://192.168.191.4:8545&#34;</span><span class="p">)</span>    
     <span class="p">}</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>建立了三个网络<code>development</code>、<code>lightnode1</code>和<code>lightnode2</code>。第一个网络<code>development</code>是 node0，用来部署 RC 和 JC，第二个网络是 lightnode1，用来部署ACC，第三个网络是 lightnode2，用来发起访问控制做演示。</p>
<p>因为在最后设置了<code>provider</code>，使用 websocket 进行访问，所以实际上定义的<code>host</code>和<code>port</code>两个参数是被屏蔽的，主要是因为基于 http 的远程连接好像已经被启用了，只能使用 websocket。</p>
<p>参数的设置主要参考了以下两篇文档</p>
<ul>
<li><a href="https://www.trufflesuite.com/docs/truffle/reference/configuration" target="_blank" rel="noopener noreffer">Truffle Configuration</a></li>
<li><a href="https://www.trufflesuite.com/tutorials/building-dapps-for-quorum-private-enterprise-blockchains" target="_blank" rel="noopener noreffer">Building Dapps for Quorum:Private Enterprise Blockchains</a></li>
</ul>
<h3 id="34-部署">3.4 部署</h3>
<p>将 RC，ACC 和 JC 三个合约放入<code>contracts</code>文件夹，然后在项目根目录执行<code>truffle compile</code>编译命令，编译所有合约，不过编译命令可以不执行，因为下面的<code>truffle migrate</code>无论是否执行过编译都会再检查一遍，如果编译过，就忽略，如果没有编译，会自动执行编译命令。</p>
<p>在<code>migrations</code>文件夹新建文件<code>2_deploy_contracts.js</code>，用于部署合约，编写内容如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">Register</span> <span class="o">=</span> <span class="nx">artifacts</span><span class="p">.</span><span class="nx">require</span><span class="p">(</span><span class="s2">&#34;Register&#34;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">Judge</span> <span class="o">=</span> <span class="nx">artifacts</span><span class="p">.</span><span class="nx">require</span><span class="p">(</span><span class="s2">&#34;Judge&#34;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">AccessControl</span> <span class="o">=</span> <span class="nx">artifacts</span><span class="p">.</span><span class="nx">require</span><span class="p">(</span><span class="s2">&#34;AccessControl&#34;</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">deployer</span><span class="p">,</span> <span class="nx">network</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">network</span> <span class="o">==</span> <span class="s2">&#34;lightnode1&#34;</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">deployer</span><span class="p">.</span><span class="nx">deploy</span><span class="p">(</span><span class="nx">AccessControl</span><span class="p">,</span> <span class="nx">Register</span><span class="p">.</span><span class="nx">address</span><span class="p">,</span> <span class="nx">Judge</span><span class="p">.</span><span class="nx">address</span><span class="p">);</span>
  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
    <span class="nx">deployer</span><span class="p">.</span><span class="nx">deploy</span><span class="p">(</span><span class="nx">Register</span><span class="p">);</span>
    <span class="nx">deployer</span><span class="p">.</span><span class="nx">deploy</span><span class="p">(</span><span class="nx">Judge</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>首先从 node0 部署 RC 和 JC 两个合约，<code>truffle migrate</code>命令默认连接<code>truffle-config.js</code>配置中的<code>development</code>网络，我们之前已将该网络设置为 node0 的 ip 和端口。</p>
<p>注：所有<code>truffle migrate</code>和<code>truffle exec</code>命令执行前都要先对相应的账户解锁，否则无法成功</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ truffle migrate
Compiling your contracts...
<span class="o">===========================</span>
&gt; Compiling ./contracts/ACC.sol
&gt; Compiling ./contracts/JC.sol
&gt; Compiling ./contracts/Migrations.sol
&gt; Compiling ./contracts/RC.sol
&gt; Artifacts written to /home/shuzang/AC/build/contracts
&gt; Compiled successfully using:
   - solc: 0.5.12+commit.7709ece9.Emscripten.clang

Starting migrations...
<span class="o">======================</span>
&gt; Network name:    <span class="s1">&#39;development&#39;</span>
&gt; Network id:      <span class="m">10</span>
&gt; Block gas limit: 0x6dcd11a0


1_initial_migration.js
<span class="o">======================</span>

   Deploying <span class="s1">&#39;Migrations&#39;</span>
   ----------------------
   &gt; transaction hash:    0xefb249903f558ccd7b6326f73a886356b55377a4262b34b81f5f9f2940b4347e
   &gt; Blocks: <span class="m">0</span>            Seconds: <span class="m">4</span>
   &gt; contract address:    0x4EC4F8BA5aEcA93955f67CFA58dbe4C57b21b37c
   &gt; block number:        <span class="m">2922</span>
   &gt; block timestamp:     0x5e02bcb5
   &gt; account:             0xbfFe4ff0cBd0A7590Fb71966D1E6bb1a4c2359e0
   &gt; balance:             <span class="m">99999999999999999999999999999998</span>
   &gt; gas used:            <span class="m">263741</span>
   &gt; gas price:           <span class="m">0</span> gwei
   &gt; value sent:          <span class="m">0</span> ETH
   &gt; total cost:          <span class="m">0</span> ETH


   &gt; Saving migration to chain.
   &gt; Saving artifacts
   -------------------------------------
   &gt; Total cost:                   <span class="m">0</span> ETH


2_deploy_contracts.js
<span class="o">=====================</span>

   Deploying <span class="s1">&#39;Register&#39;</span>
   --------------------
   &gt; transaction hash:    0xa49e8d423980248e9c03eb52ecd3b46c15209e867285d2bc718a20620f3addd2
   &gt; Blocks: <span class="m">0</span>            Seconds: <span class="m">4</span>
   &gt; contract address:    0x8980FC2bBD25958d0c72F5ba5fa3e5faF1A48c05
   &gt; block number:        <span class="m">2924</span>
   &gt; block timestamp:     0x5e02bcbf
   &gt; account:             0xbfFe4ff0cBd0A7590Fb71966D1E6bb1a4c2359e0
   &gt; balance:             <span class="m">99999999999999999999999999999998</span>
   &gt; gas used:            <span class="m">3227866</span>
   &gt; gas price:           <span class="m">0</span> gwei
   &gt; value sent:          <span class="m">0</span> ETH
   &gt; total cost:          <span class="m">0</span> ETH


   Deploying <span class="s1">&#39;Judge&#39;</span>
   -----------------
   &gt; transaction hash:    0xaf538d559ecc72949d40bbc4d1dde67dfa535c7d5a78267c4de414b51fef4bf9
   &gt; Blocks: <span class="m">0</span>            Seconds: <span class="m">4</span>
   &gt; contract address:    0x2C2Fb0DD2440e72318Fb018f923F78Ff86541D08
   &gt; block number:        <span class="m">2925</span>
   &gt; block timestamp:     0x5e02bcc4
   &gt; account:             0xbfFe4ff0cBd0A7590Fb71966D1E6bb1a4c2359e0
   &gt; balance:             <span class="m">99999999999999999999999999999998</span>
   &gt; gas used:            <span class="m">1349320</span>
   &gt; gas price:           <span class="m">0</span> gwei
   &gt; value sent:          <span class="m">0</span> ETH
   &gt; total cost:          <span class="m">0</span> ETH


   &gt; Saving migration to chain.
   &gt; Saving artifacts
   -------------------------------------
   &gt; Total cost:                   <span class="m">0</span> ETH


<span class="nv">Summary</span>
<span class="o">=======</span>
&gt; Total deployments:   <span class="m">3</span>
&gt; Final cost:          <span class="m">0</span> ETH
</code></pre></td></tr></table>
</div>
</div><p>然后部署 ACC，<code>truffle migrate</code>命令指定连接网络<code>lightnode1</code>，<code>--f</code>指定部署脚本，否则因为之前该脚本已成功执行会略过，而又因为没有新的脚本而没有任何操作。<code>truffle-config.js</code>配置中的<code>lightnode1</code>网络已设置为 raspberry pi 3B+ 的 ip 和端口，默认账户设置为第二个账户，也就是新建的用于表示 IoT 设备的账户。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ truffle migrate --network linghtnode1 --f <span class="m">2</span>
Compiling your contracts...
<span class="o">===========================</span>
&gt; Everything is up to date, there is nothing to compile.



Starting migrations...
<span class="o">======================</span>
&gt; Network name:    <span class="s1">&#39;lightnode1&#39;</span>
&gt; Network id:      <span class="m">10</span>
&gt; Block gas limit: 0x67a09e29


2_deploy_contracts.js
<span class="o">=====================</span>

   Deploying <span class="s1">&#39;AccessControl&#39;</span>
   -------------------------
   &gt; transaction hash:    0xf49cca809ad273812de75225dcfe50b624bfe2a93fd2b44653491e8ee0edeb04
   &gt; Blocks: <span class="m">1</span>            Seconds: <span class="m">4</span>
   &gt; contract address:    0x05455fa63e5a7cb6575D75c99855cF3A1Adc72b1
   &gt; block number:        <span class="m">3160</span>
   &gt; block timestamp:     0x5e02c15b
   &gt; account:             0x9A4aa696F85C6bF96733Cc5385cCaf2b7ee13f17
   &gt; balance:             0.00000000001
   &gt; gas used:            <span class="m">5263918</span>
   &gt; gas price:           <span class="m">0</span> gwei
   &gt; value sent:          <span class="m">0</span> ETH
   &gt; total cost:          <span class="m">0</span> ETH


   &gt; Saving migration to chain.
   &gt; Saving artifacts
   -------------------------------------
   &gt; Total cost:                   <span class="m">0</span> ETH


<span class="nv">Summary</span>
<span class="o">=======</span>
&gt; Total deployments:   <span class="m">1</span>
&gt; Final cost:          <span class="m">0</span> ETH

</code></pre></td></tr></table>
</div>
</div><h3 id="35-合约交互">3.5 合约交互</h3>
<p>尝试了三种方式，但最后只有 truffle console 这种方式真正完成了。</p>
<h4 id="truffle-contract"><del>truffle-contract</del></h4>
<p>truffle使用<a href="https://github.com/trufflesuite/truffle/tree/master/packages/contract" target="_blank" rel="noopener noreffer">truffle-contract</a>接口(原文是contract abstraction，合约抽象)来交互，truffle develop的控制台、migrate写的部署脚本和基于JS的单元测试等都用的是这个抽象接口。</p>
<p>主要方式是编写JavaScript代码，使用提供的抽象接口可以调用已部署合约的函数，无论是发起交易改变合约状态还是仅仅调用获得返回结果。</p>
<p>在项目根目录(和<code>trufffle-config.js</code>同文件夹)创建文件<code>JCRegister.js</code>，用于注册判决合约，文件内容如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">Register</span> <span class="o">=</span> <span class="nx">artifacts</span><span class="p">.</span><span class="nx">require</span><span class="p">(</span><span class="s2">&#34;Register&#34;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">Judge</span> <span class="o">=</span> <span class="nx">artifacts</span><span class="p">.</span><span class="nx">require</span><span class="p">(</span><span class="s2">&#34;Judge&#34;</span><span class="p">);</span>

<span class="nx">module</span><span class="p">.</span><span class="kr">export</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Getting deployed Register contract...&#34;</span><span class="p">)</span>
    <span class="nx">Register</span><span class="p">.</span><span class="nx">deployed</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">instance</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Register Judge contract...&#34;</span><span class="p">);</span>
        <span class="k">return</span> <span class="nx">instance</span><span class="p">.</span><span class="nx">contractRegister</span><span class="p">(</span><span class="s2">&#34;Judger&#34;</span><span class="p">,</span> <span class="s2">&#34;JC&#34;</span><span class="p">,</span> <span class="s2">&#34;0xbffe4ff0cbd0a7590fb71966d1e6bb1a4c2359e0&#34;</span><span class="p">,</span> <span class="nx">Judge</span><span class="p">.</span><span class="nx">address</span><span class="p">);</span>
    <span class="p">}).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Transaction:&#34;</span><span class="p">,</span> <span class="nx">result</span><span class="p">.</span><span class="nx">tx</span><span class="p">);</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Finished!&#34;</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
    <span class="p">}).</span><span class="k">catch</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
        <span class="nx">done</span><span class="p">();</span>
    <span class="p">});</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>解锁node0账户，然后执行下列命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ truffle <span class="nb">exec</span> JCRegister.js
</code></pre></td></tr></table>
</div>
</div><p><code>truffle exec</code>执行错误，错误信息如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ truffle <span class="nb">exec</span> JCRegister.js
Using network <span class="s1">&#39;development&#39;</span>.

TypeError: fn is not a <span class="k">function</span>
    at Object.exec <span class="o">(</span>/usr/local/lib/node_modules/truffle/build/webpack:/packages/require/require.js:124:1<span class="o">)</span>
    at /usr/local/lib/node_modules/truffle/build/webpack:/packages/core/lib/commands/exec.js:89:1
    at processTicksAndRejections <span class="o">(</span>internal/process/task_queues.js:93:5<span class="o">)</span>
Truffle v5.1.5 <span class="o">(</span>core: 5.1.5<span class="o">)</span>
Node v12.14.0

</code></pre></td></tr></table>
</div>
</div><h4 id="web3js"><del>web3.js</del></h4>
<p>所以还是使用web3.js吧，在用户根目录建立web3文件夹，本地安装web3.js模块</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">cd</span> ..
$ <span class="nb">pwd</span>
/home/shuzang
$ mkdir web3 <span class="o">&amp;&amp;</span> <span class="nb">cd</span> web3
$ npm install web3
$ npm list --depth <span class="m">0</span>
/home/shuzang/web3
└── web3@1.2.4
</code></pre></td></tr></table>
</div>
</div><p>创建文件<code>1_Register_JC.js</code>用于注册判决合约，命名方式参考了 truffle 的命名方式文件内容如下，ABI 过长，本文以省略号代替。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">Web3</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;web3&#39;</span><span class="p">);</span>
<span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">web3</span> <span class="o">!==</span><span class="s1">&#39;undefined&#39;</span><span class="p">){</span> <span class="c1">//检查是否已有web3实例
</span><span class="c1"></span>    <span class="nx">web3</span><span class="o">=</span><span class="k">new</span> <span class="nx">Web3</span><span class="p">(</span><span class="nx">web3</span><span class="p">.</span><span class="nx">currentProvider</span><span class="p">);</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="c1">//否则就连接到给出节点
</span><span class="c1"></span>    <span class="nx">web3</span><span class="o">=</span><span class="k">new</span> <span class="nx">Web3</span><span class="p">();</span>
    <span class="nx">web3</span><span class="p">.</span><span class="nx">setProvider</span><span class="p">(</span><span class="k">new</span> <span class="nx">Web3</span><span class="p">.</span><span class="nx">providers</span><span class="p">.</span><span class="nx">WebsocketProvider</span><span class="p">(</span><span class="s2">&#34;ws://localhost:8545&#34;</span><span class="p">));</span>
<span class="p">}</span>

<span class="kd">var</span> <span class="nx">rcAbi</span> <span class="o">=</span> <span class="p">[...]</span>

<span class="nx">web3</span><span class="p">.</span><span class="nx">eth</span><span class="p">.</span><span class="nx">getBlock</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">result</span><span class="p">){</span>
	<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">error</span><span class="p">)</span>
		<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;connection succeed&#34;</span><span class="p">);</span>
	<span class="k">else</span>
		<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;something wrong, connection failed&#34;</span><span class="p">);</span>
<span class="p">});</span>


<span class="kd">var</span> <span class="nx">rcAddress</span> <span class="o">=</span> <span class="s2">&#34;0x8980FC2bBD25958d0c72F5ba5fa3e5faF1A48c05&#34;</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">jcAddress</span><span class="o">=</span> <span class="s2">&#34;0x2C2Fb0DD2440e72318Fb018f923F78Ff86541D08&#34;</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">register</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">web3</span><span class="p">.</span><span class="nx">eth</span><span class="p">.</span><span class="nx">Contract</span><span class="p">(</span><span class="nx">rcAbi</span><span class="p">);</span>
<span class="nx">register</span><span class="p">.</span><span class="nx">options</span><span class="p">.</span><span class="nx">address</span><span class="o">=</span><span class="nx">rcAddress</span><span class="p">;</span>

<span class="nx">register</span><span class="p">.</span><span class="nx">methods</span><span class="p">.</span><span class="nx">contractRegister</span><span class="p">(</span><span class="s2">&#34;Judger&#34;</span><span class="p">,</span> <span class="s2">&#34;JC&#34;</span><span class="p">,</span> <span class="s2">&#34;0xbffe4ff0cbd0a7590fb71966d1e6bb1a4c2359e0&#34;</span><span class="p">,</span> <span class="nx">jcAddress</span><span class="p">).</span><span class="nx">send</span><span class="p">({</span>
	<span class="nx">from</span><span class="o">:</span> <span class="s2">&#34;0xbffe4ff0cbd0a7590fb71966d1e6bb1a4c2359e0&#34;</span><span class="p">,</span>
	<span class="nx">gas</span><span class="o">:</span> <span class="mi">10000000</span>
<span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">result</span><span class="p">){</span>
	<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">error</span><span class="p">){</span>
		<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Transaction: &#39;</span> <span class="o">+</span> <span class="nx">result</span><span class="p">);</span>
		<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Finished!&#39;</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="k">else</span>
		<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
 <span class="p">})</span>

 <span class="nx">register</span><span class="p">.</span><span class="nx">methods</span><span class="p">.</span><span class="nx">getContractAddr</span><span class="p">(</span><span class="s2">&#34;Judger&#34;</span><span class="p">).</span><span class="nx">call</span><span class="p">({</span>
	<span class="nx">from</span><span class="o">:</span> <span class="s2">&#34;0xbffe4ff0cbd0a7590fb71966d1e6bb1a4c2359e0&#34;</span><span class="p">,</span>
	<span class="nx">gas</span><span class="o">:</span> <span class="mi">10000000</span>
<span class="p">},</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">result</span><span class="p">){</span>
	<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">error</span><span class="p">){</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Judge contract address:&#39;</span> <span class="o">+</span> <span class="nx">result</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="k">else</span>
		<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
 <span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>web3.js执行合约交易不成功，全部陷在交易池了</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="o">&gt;</span> <span class="nx">txpool</span><span class="p">.</span><span class="nx">status</span>
<span class="p">{</span>
  <span class="nx">pending</span><span class="o">:</span> <span class="mi">5</span><span class="p">,</span>
  <span class="nx">queued</span><span class="o">:</span> <span class="mi">0</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>日志记录里提示</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">VM returned with error                   <span class="nv">err</span><span class="o">=</span><span class="s2">&#34;evm: execution reverted&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>不明白为什么执行不了</p>
<h4 id="truffle-console">truffle console</h4>
<p>truffle的文档里提到与已部署的合约交互可以使用truffle console，故尝试</p>
<p>首先注册判决合约，需要在node0中进行，进入<code>development</code>网络</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ truffle console
</code></pre></td></tr></table>
</div>
</div><p>命令执行完毕后进入<code>truffle console</code>控制台，注册合约并查询合约地址进行验证</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">truffle</span><span class="p">(</span><span class="nx">development</span><span class="p">)</span><span class="o">&gt;</span> <span class="nx">Register</span><span class="p">.</span><span class="nx">deployed</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">instance</span><span class="p">)</span> <span class="p">{</span><span class="nx">instance</span><span class="p">.</span><span class="nx">contractRegister</span><span class="p">(</span><span class="s2">&#34;Judger&#34;</span><span class="p">,</span> <span class="s2">&#34;JC&#34;</span><span class="p">,</span> <span class="s2">&#34;0xbffe4ff0cbd0a7590fb71966d1e6bb1a4c2359e0&#34;</span><span class="p">,</span> <span class="nx">Judge</span><span class="p">.</span><span class="nx">address</span><span class="p">);})</span>
<span class="kc">undefined</span>
<span class="nx">truffle</span><span class="p">(</span><span class="nx">development</span><span class="p">)</span><span class="o">&gt;</span> <span class="nx">Register</span><span class="p">.</span><span class="nx">deployed</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">instance</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nx">instance</span><span class="p">.</span><span class="nx">getContractAddr</span><span class="p">(</span><span class="s2">&#34;Judger&#34;</span><span class="p">);})</span>
<span class="s1">&#39;0x2C2Fb0DD2440e72318Fb018f923F78Ff86541D08&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>退出重新执行<code>truffle console</code>命令，进入<code>lightnode2</code>网络</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">truffle<span class="o">(</span>development<span class="o">)</span>&gt; .exit
$ truffle console --network lightnode2
</code></pre></td></tr></table>
</div>
</div><p>进入<code>lightnode2</code>的<code>truffle console</code>控制台，注册设备相关属性，然后查询属性进行验证</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">truffle</span><span class="p">(</span><span class="nx">lightnode2</span><span class="p">)</span><span class="o">&gt;</span> <span class="kd">let</span> <span class="nx">instance</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">Register</span><span class="p">.</span><span class="nx">deployed</span><span class="p">()</span>
<span class="kc">undefined</span>
<span class="nx">truffle</span><span class="p">(</span><span class="nx">lightnode2</span><span class="p">)</span><span class="o">&gt;</span> <span class="nx">instance</span><span class="p">.</span><span class="nx">subjectRegister</span><span class="p">(</span><span class="s2">&#34;0x016b71d115f1da36de58d2b78369fd3228bef3dd&#34;</span><span class="p">,</span> <span class="s2">&#34;0xa31d40508da63fb00d7e2f4db57c3774384aa299&#34;</span><span class="p">,</span> <span class="s2">&#34;thermostat&#34;</span><span class="p">,</span> <span class="s2">&#34;subject&#34;</span><span class="p">)</span>
<span class="p">...</span>
<span class="nx">truffle</span><span class="p">(</span><span class="nx">lightnode2</span><span class="p">)</span><span class="o">&gt;</span> <span class="nx">instance</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s2">&#34;0x016b71d115f1da36de58d2b78369fd3228bef3dd&#34;</span><span class="p">,</span> <span class="s2">&#34;deviceType&#34;</span><span class="p">)</span>
<span class="s1">&#39;thermostat&#39;</span>
<span class="nx">truffle</span><span class="p">(</span><span class="nx">lightnode2</span><span class="p">)</span><span class="o">&gt;</span> <span class="nx">instance</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s2">&#34;0x016b71d115f1da36de58d2b78369fd3228bef3dd&#34;</span><span class="p">,</span> <span class="s2">&#34;deviceRole&#34;</span><span class="p">)</span>
<span class="s1">&#39;subject&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>退出<code>lightnode2</code>的控制台，进入<code>lightnode1</code>的控制台</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">truffle<span class="o">(</span>lightnode2<span class="o">)</span>&gt; .exit
$ truffle console --network lightnode1
</code></pre></td></tr></table>
</div>
</div><p>首先在RC中注册ACC</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">truffle</span><span class="p">(</span><span class="nx">lightnode1</span><span class="p">)</span><span class="o">&gt;</span> <span class="nx">Register</span><span class="p">.</span><span class="nx">deployed</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">instance</span><span class="p">)</span> <span class="p">{</span><span class="nx">instance</span><span class="p">.</span><span class="nx">contractRegister</span><span class="p">(</span><span class="s2">&#34;Temperature_Sensor1&#34;</span><span class="p">,</span> <span class="s2">&#34;ACC&#34;</span><span class="p">,</span> <span class="s2">&#34;0x9a4aa696f85c6bf96733cc5385ccaf2b7ee13f17&#34;</span><span class="p">,</span> <span class="nx">AccessControl</span><span class="p">.</span><span class="nx">address</span><span class="p">);})</span>
<span class="kc">undefined</span>
<span class="nx">truffle</span><span class="p">(</span><span class="nx">lightnode1</span><span class="p">)</span><span class="o">&gt;</span> <span class="nx">Register</span><span class="p">.</span><span class="nx">deployed</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">instance</span><span class="p">)</span> <span class="p">{</span><span class="k">return</span> <span class="nx">instance</span><span class="p">.</span><span class="nx">getContractAddr</span><span class="p">(</span><span class="s2">&#34;Temperature_Sensor1&#34;</span><span class="p">);})</span>
<span class="s1">&#39;0x05455fa63e5a7cb6575D75c99855cF3A1Adc72b1&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>然后在ACC中注册资源属性，并查询属性进行验证</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">truffle</span><span class="p">(</span><span class="nx">lightnode1</span><span class="p">)</span><span class="o">&gt;</span> <span class="kd">let</span> <span class="nx">instance</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">AccessControl</span><span class="p">.</span><span class="nx">deployed</span><span class="p">()</span>
<span class="kc">undefined</span>
<span class="nx">truffle</span><span class="p">(</span><span class="nx">lightnode1</span><span class="p">)</span><span class="o">&gt;</span> <span class="nx">instance</span><span class="p">.</span><span class="nx">resourceAttrAdd</span><span class="p">(</span><span class="s2">&#34;data&#34;</span><span class="p">,</span> <span class="s2">&#34;currentTemperature&#34;</span><span class="p">,</span> <span class="s2">&#34;23&#34;</span><span class="p">)</span>
<span class="nx">truffle</span><span class="p">(</span><span class="nx">lightnode1</span><span class="p">)</span><span class="o">&gt;</span> <span class="nx">instance</span><span class="p">.</span><span class="nx">getResourceAttr</span><span class="p">(</span><span class="s2">&#34;data&#34;</span><span class="p">,</span> <span class="s2">&#34;currentTemperature&#34;</span><span class="p">)</span>
<span class="s1">&#39;23&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>接下来针对已注册的属性，在ACC中设置访问控制策略，并查询策略进行验证</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">truffle</span><span class="p">(</span><span class="nx">lightnode1</span><span class="p">)</span><span class="o">&gt;</span> <span class="nx">instance</span><span class="p">.</span><span class="nx">policyAdd</span><span class="p">(</span><span class="s2">&#34;data&#34;</span><span class="p">,</span> <span class="s2">&#34;read&#34;</span><span class="p">,</span> <span class="s2">&#34;subject&#34;</span><span class="p">,</span> <span class="s2">&#34;deviceType&#34;</span><span class="p">,</span> <span class="s2">&#34;=&#34;</span><span class="p">,</span> <span class="s2">&#34;thermostat&#34;</span><span class="p">)</span>
<span class="nx">truffle</span><span class="p">(</span><span class="nx">lightnode1</span><span class="p">)</span><span class="o">&gt;</span> <span class="nx">instance</span><span class="p">.</span><span class="nx">getPolicy</span><span class="p">(</span><span class="s2">&#34;data&#34;</span><span class="p">,</span> <span class="s2">&#34;read&#34;</span><span class="p">,</span> <span class="s2">&#34;deviceType&#34;</span><span class="p">)</span>
<span class="nx">Result</span> <span class="p">{</span>
  <span class="s1">&#39;0&#39;</span><span class="o">:</span> <span class="s1">&#39;subject&#39;</span><span class="p">,</span>
  <span class="s1">&#39;1&#39;</span><span class="o">:</span> <span class="s1">&#39;deviceType&#39;</span><span class="p">,</span>
  <span class="s1">&#39;2&#39;</span><span class="o">:</span> <span class="s1">&#39;=&#39;</span><span class="p">,</span>
  <span class="s1">&#39;3&#39;</span><span class="o">:</span> <span class="s1">&#39;thermostat&#39;</span><span class="p">,</span>
  <span class="nx">_attrOwner</span><span class="o">:</span> <span class="s1">&#39;subject&#39;</span><span class="p">,</span>
  <span class="nx">_attrName_</span><span class="o">:</span> <span class="s1">&#39;deviceType&#39;</span><span class="p">,</span>
  <span class="nx">_operator</span><span class="o">:</span> <span class="s1">&#39;=&#39;</span><span class="p">,</span>
  <span class="nx">_attrValue</span><span class="o">:</span> <span class="s1">&#39;thermostat&#39;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>最后发起访问控制请求和监听依然使用web3.js完成，切换到web3目录下，首先新建<code>test.js</code>测试是否可使用，测试脚本内容如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">Web3</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;web3&#39;</span><span class="p">);</span>

<span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">web3</span> <span class="o">!==</span><span class="s1">&#39;undefined&#39;</span><span class="p">){</span> <span class="c1">//检查是否已有web3实例
</span><span class="c1"></span>    <span class="nx">web3</span><span class="o">=</span><span class="k">new</span> <span class="nx">Web3</span><span class="p">(</span><span class="nx">web3</span><span class="p">.</span><span class="nx">currentProvider</span><span class="p">);</span>
<span class="p">}</span><span class="k">else</span><span class="p">{</span>
    <span class="c1">//否则就连接到给出节点
</span><span class="c1"></span>    <span class="nx">web3</span><span class="o">=</span><span class="k">new</span> <span class="nx">Web3</span><span class="p">();</span>
    <span class="nx">web3</span><span class="p">.</span><span class="nx">setProvider</span><span class="p">(</span><span class="k">new</span> <span class="nx">Web3</span><span class="p">.</span><span class="nx">providers</span><span class="p">.</span><span class="nx">WebsocketProvider</span><span class="p">(</span><span class="s2">&#34;ws://localhost:8545&#34;</span><span class="p">));</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">connect</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">web3</span><span class="p">.</span><span class="nx">eth</span><span class="p">.</span><span class="nx">getBlock</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">result</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">error</span><span class="p">)</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;connection succeed&#34;</span><span class="p">);</span>
        <span class="k">else</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;something wrong, connection failed&#34;</span><span class="p">);</span>
    <span class="p">});</span>
<span class="p">}</span>


<span class="kd">var</span> <span class="nx">getAccount</span> <span class="o">=</span> <span class="kr">async</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="kr">await</span> <span class="nx">connect</span><span class="p">();</span>
    <span class="kd">var</span> <span class="nx">account0</span><span class="p">;</span>
    <span class="nx">web3</span><span class="p">.</span><span class="nx">eth</span><span class="p">.</span><span class="nx">getAccounts</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">result</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">error</span><span class="p">){</span>
            <span class="nx">account0</span><span class="o">=</span><span class="nx">result</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
            <span class="c1">//console.log(account0);
</span><span class="c1"></span>            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;accounts:&#34;</span><span class="o">+</span><span class="nx">result</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">else</span><span class="p">{</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;failed to get Accoutns&#34;</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">});</span>
<span class="p">}</span>


<span class="nx">getAccount</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">web3</span><span class="p">.</span><span class="nx">eth</span><span class="p">.</span><span class="nx">getBalance</span><span class="p">(</span><span class="s2">&#34;0xbffe4ff0cbd0a7590fb71966d1e6bb1a4c2359e0&#34;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">balance</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;balance:&#39;</span><span class="p">,</span><span class="nx">balance</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;test passed!&#34;</span><span class="p">);</span>
    <span class="p">})</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>测试结果如下，说明没有问题</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ node test.js
connection succeed
accounts:0xbfFe4ff0cBd0A7590Fb71966D1E6bb1a4c2359e0
balance: <span class="m">99999999999999999999999999999998000000000000000000</span>
<span class="nb">test</span> passed！
</code></pre></td></tr></table>
</div>
</div><p>在 web3 目录下新建<code>requester.js</code>文件和<code>monitor.js</code>文件，前者用来发起访问控制请求，后者用来监听访问控制触发的事件</p>
<p><code>requester.js</code>的内容如下，通过 websocket 连接 lightnode2，发起访问控制请求</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">Web3</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;web3&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">readline</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;readline&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">web3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Web3</span><span class="p">(</span><span class="nx">Web3</span><span class="p">.</span><span class="nx">givenProvider</span> <span class="o">||</span> <span class="s2">&#34;ws://192.168.191.4:8545&#34;</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">accAbi</span> <span class="o">=</span> <span class="p">[...];</span>

<span class="kd">var</span> <span class="nx">accAddr</span> <span class="o">=</span> <span class="s2">&#34;0xb29094a4DE9c2E22b598b39fE38860b9117340A6&#34;</span>
<span class="kd">var</span> <span class="nx">myACC</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">web3</span><span class="p">.</span><span class="nx">eth</span><span class="p">.</span><span class="nx">Contract</span><span class="p">(</span><span class="nx">accAbi</span><span class="p">,</span> <span class="nx">accAddr</span><span class="p">);</span>


<span class="kd">var</span> <span class="nx">previousTxHash</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">currentTxHash</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="kd">var</span> <span class="nx">rl</span> <span class="o">=</span> <span class="nx">readline</span><span class="p">.</span><span class="nx">createInterface</span><span class="p">({</span>
	<span class="nx">input</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">stdin</span><span class="p">,</span>
	<span class="nx">output</span><span class="o">:</span> <span class="nx">process</span><span class="p">.</span><span class="nx">stdout</span><span class="p">,</span>
	<span class="nx">prompt</span><span class="o">:</span> <span class="s1">&#39;Send access request?(y/n)&#39;</span>
<span class="p">});</span>

<span class="nx">rl</span><span class="p">.</span><span class="nx">prompt</span><span class="p">();</span>
<span class="nx">rl</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;line&#39;</span><span class="p">,(</span><span class="nx">answer</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
	<span class="k">if</span><span class="p">(</span><span class="s1">&#39;y&#39;</span> <span class="o">==</span> <span class="nx">answer</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">myACC</span><span class="p">.</span><span class="nx">methods</span><span class="p">.</span><span class="nx">accessControl</span><span class="p">(</span><span class="s2">&#34;data&#34;</span><span class="p">,</span> <span class="s2">&#34;read&#34;</span><span class="p">).</span><span class="nx">send</span><span class="p">({</span>
			<span class="nx">from</span><span class="o">:</span> <span class="s2">&#34;0xbd93271c5d2ccacdc307d1825614d5557ad6e0fd&#34;</span><span class="p">,</span>
			<span class="nx">gas</span><span class="o">:</span> <span class="mi">10000000</span><span class="p">,</span>
			<span class="nx">gasPrice</span><span class="o">:</span> <span class="mi">0</span>
		<span class="p">},</span><span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span><span class="nx">result</span><span class="p">){</span>
			<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">error</span><span class="p">){</span>
				<span class="nx">currentTxHash</span> <span class="o">=</span> <span class="nx">result</span>
				<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;currentTxHash: &#34;</span><span class="p">,</span> <span class="nx">result</span><span class="p">)</span>
			<span class="p">}</span>
		<span class="p">})</span>

	<span class="nx">myACC</span><span class="p">.</span><span class="nx">events</span><span class="p">.</span><span class="nx">ReturnAccessResult</span><span class="p">({</span>
			<span class="nx">fromBlock</span><span class="o">:</span> <span class="mi">0</span>
		<span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">result</span><span class="p">){</span>
		<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">if</span><span class="p">(</span><span class="nx">previousTxHash</span> <span class="o">!=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">transactionHash</span> <span class="o">&amp;&amp;</span> <span class="nx">currentTxHash</span> <span class="o">==</span> <span class="nx">result</span><span class="p">.</span><span class="nx">transactionHash</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Contract: &#34;</span><span class="o">+</span><span class="nx">result</span><span class="p">.</span><span class="nx">address</span><span class="p">);</span>
				<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Block Number: &#34;</span><span class="o">+</span><span class="nx">result</span><span class="p">.</span><span class="nx">blockNumber</span><span class="p">);</span>
				<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Tx Hash: &#34;</span><span class="o">+</span><span class="nx">result</span><span class="p">.</span><span class="nx">transactionHash</span><span class="p">);</span>
				<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Block Hash: &#34;</span><span class="o">+</span><span class="nx">result</span><span class="p">.</span><span class="nx">blockHash</span><span class="p">);</span>
				<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Time: &#34;</span><span class="o">+</span><span class="nx">result</span><span class="p">.</span><span class="nx">returnValues</span><span class="p">.</span><span class="nx">_time</span><span class="p">);</span>
				<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Message: &#34;</span><span class="o">+</span><span class="nx">result</span><span class="p">.</span><span class="nx">returnValues</span><span class="p">.</span><span class="nx">_errmsg</span><span class="p">);</span>
				<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Result: &#34;</span><span class="o">+</span><span class="nx">result</span><span class="p">.</span><span class="nx">returnValues</span><span class="p">.</span><span class="nx">_result</span><span class="p">);</span>
				<span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">returnValues</span><span class="p">.</span><span class="nx">_penalty</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
					<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Requests are blocked for &#34;</span> <span class="o">+</span> <span class="nx">result</span><span class="p">.</span><span class="nx">returnValues</span><span class="p">.</span><span class="nx">_penalty</span> <span class="o">+</span><span class="s2">&#34;seconds!&#34;</span><span class="p">)</span>
				<span class="p">}</span>
				<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">);</span>
				<span class="nx">previousTxHash</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">transactionHash</span><span class="p">;</span>
				<span class="nx">rl</span><span class="p">.</span><span class="nx">prompt</span><span class="p">();</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">})</span>
	<span class="p">}</span>
	<span class="k">else</span><span class="p">{</span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;access request doesn&#39;t send!&#34;</span><span class="p">)</span>
	<span class="nx">rl</span><span class="p">.</span><span class="nx">prompt</span><span class="p">();</span>
	<span class="p">}</span>
<span class="p">}).</span><span class="nx">on</span><span class="p">(</span><span class="s1">&#39;close&#39;</span><span class="p">,()</span> <span class="p">=&gt;{</span>
	<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;All actions had executed!&#39;</span><span class="p">);</span>
	<span class="nx">process</span><span class="p">.</span><span class="nx">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></td></tr></table>
</div>
</div><p><code>monitor.js</code>的内容如下，由 lightnode1 发起，用于监听返回的事件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">Web3</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;web3&#39;</span><span class="p">);</span>
<span class="kd">var</span> <span class="nx">web3</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Web3</span><span class="p">(</span><span class="nx">Web3</span><span class="p">.</span><span class="nx">givenProvider</span> <span class="o">||</span> <span class="s2">&#34;ws://192.168.191.3:8545&#34;</span><span class="p">);</span>

<span class="kd">var</span> <span class="nx">accAbi</span> <span class="o">=</span> <span class="p">[...];</span>
<span class="kd">var</span> <span class="nx">accAddr</span> <span class="o">=</span> <span class="s2">&#34;0xb29094a4DE9c2E22b598b39fE38860b9117340A6&#34;</span><span class="p">;</span>
<span class="kd">var</span> <span class="nx">myACC</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">web3</span><span class="p">.</span><span class="nx">eth</span><span class="p">.</span><span class="nx">Contract</span><span class="p">(</span><span class="nx">accAbi</span><span class="p">,</span> <span class="nx">accAddr</span><span class="p">);</span>

<span class="nx">myACC</span><span class="p">.</span><span class="nx">events</span><span class="p">.</span><span class="nx">ReturnAccessResult</span><span class="p">({</span>
	<span class="nx">fromBlock</span><span class="o">:</span> <span class="mi">0</span>
<span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">error</span><span class="p">,</span> <span class="nx">result</span><span class="p">){</span>
		<span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">error</span><span class="p">)</span> <span class="p">{</span>
			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Contract: &#34;</span><span class="o">+</span><span class="nx">result</span><span class="p">.</span><span class="nx">address</span><span class="p">);</span>
			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Block Number: &#34;</span><span class="o">+</span><span class="nx">result</span><span class="p">.</span><span class="nx">blockNumber</span><span class="p">);</span>
			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Tx Hash: &#34;</span><span class="o">+</span><span class="nx">result</span><span class="p">.</span><span class="nx">transactionHash</span><span class="p">);</span>
			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Block Hash: &#34;</span><span class="o">+</span><span class="nx">result</span><span class="p">.</span><span class="nx">blockHash</span><span class="p">);</span>
			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Time: &#34;</span><span class="o">+</span><span class="nx">result</span><span class="p">.</span><span class="nx">returnValues</span><span class="p">.</span><span class="nx">_time</span><span class="p">);</span>
			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Message: &#34;</span><span class="o">+</span><span class="nx">result</span><span class="p">.</span><span class="nx">returnValues</span><span class="p">.</span><span class="nx">_errmsg</span><span class="p">);</span>
			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Result: &#34;</span><span class="o">+</span><span class="nx">result</span><span class="p">.</span><span class="nx">returnValues</span><span class="p">.</span><span class="nx">_result</span><span class="p">);</span>
			<span class="k">if</span> <span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">returnValues</span><span class="p">.</span><span class="nx">_penalty</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
				<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;Requests are blocked for &#34;</span> <span class="o">+</span> <span class="nx">result</span><span class="p">.</span><span class="nx">returnValues</span><span class="p">.</span><span class="nx">_penalty</span> <span class="o">+</span><span class="s2">&#34;seconds!&#34;</span><span class="p">)</span>
			<span class="p">}</span>
			<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;\n&#39;</span><span class="p">);</span>
		<span class="p">}</span>
<span class="p">})</span>
</code></pre></td></tr></table>
</div>
</div><p>实验结果如下</p>
<p>


</p>
<h3 id="36-错误测试">3.6 错误测试</h3>
<p>之前的实验验证的是访问权限被授予的情况，现在测试被拒绝的情况</p>
<p>在 lightnode2 建立新的IoT设备账户，这次代表摄像头(Camera)，</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">&gt; personal.newAccount<span class="o">()</span>
Passphrase: 
Repeat passphrase: 
<span class="s2">&#34;0x42b97b26ed5f53693bcc9b58ad8c724718ea0a15&#34;</span>
&gt; personal.listAccounts
<span class="o">[</span><span class="s2">&#34;0xa31d40508da63fb00d7e2f4db57c3774384aa299&#34;</span>, <span class="s2">&#34;0x016b71d115f1da36de58d2b78369fd3228bef3dd&#34;</span>, <span class="s2">&#34;0x42b97b26ed5f53693bcc9b58ad8c724718ea0a15&#34;</span><span class="o">]</span>
&gt; personal.unlockAccount<span class="o">(</span>eth.accounts<span class="o">[</span>0<span class="o">])</span>
Unlock account 0xa31d40508da63fb00d7e2f4db57c3774384aa299
Passphrase: 
<span class="nb">true</span>
&gt; eth.sendTransaction<span class="o">({</span>from:eth.accounts<span class="o">[</span>0<span class="o">]</span>,to:eth.accounts<span class="o">[</span>2<span class="o">]</span>,value:1*1e7<span class="o">})</span>
<span class="s2">&#34;0x9f36de89d44db23e63e4fa0d3135d1c17e800cca73f0661ae276f20c0e3d1902&#34;</span>
&gt; eth.getBalance<span class="o">(</span>eth.accounts<span class="o">[</span>2<span class="o">])</span>
<span class="m">10000000</span>
</code></pre></td></tr></table>
</div>
</div><p>修改<code>truffle-config.js</code>文件中 lightnode2 网络的执行账户为新建立的账户</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="p">...</span>
<span class="nx">lightnode2</span><span class="o">:</span> <span class="p">{</span>
  <span class="nx">host</span><span class="o">:</span> <span class="s2">&#34;192.168.191.4&#34;</span><span class="p">,</span>  
  <span class="nx">port</span><span class="o">:</span> <span class="mi">22000</span><span class="p">,</span>            <span class="c1">// Standard Ethereum port (default: none)
</span><span class="c1"></span>  <span class="nx">network_id</span><span class="o">:</span> <span class="s2">&#34;10&#34;</span><span class="p">,</span>       
  <span class="nx">gasPrice</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
  <span class="nx">gas</span><span class="o">:</span> <span class="mi">10000000</span><span class="p">,</span>
  <span class="nx">type</span><span class="o">:</span> <span class="s2">&#34;quorum&#34;</span><span class="p">,</span>
  <span class="nx">from</span><span class="o">:</span> <span class="s2">&#34;0x42b97b26ed5f53693bcc9b58ad8c724718ea0a15&#34;</span><span class="p">,</span>
 <span class="p">...</span>
</code></pre></td></tr></table>
</div>
</div><p>进入<code>lightnode2</code>的 truffle console</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">cd</span> AC
$ truffle console --network lightnode2
</code></pre></td></tr></table>
</div>
</div><p>注册新设备的属性</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">truffle</span><span class="p">(</span><span class="nx">lightnode2</span><span class="p">)</span><span class="o">&gt;</span> <span class="nx">Register</span><span class="p">.</span><span class="nx">deployed</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">instance</span><span class="p">)</span> <span class="p">{</span><span class="nx">instance</span><span class="p">.</span><span class="nx">subjectRegister</span><span class="p">(</span><span class="s2">&#34;0x42b97b26ed5f53693bcc9b58ad8c724718ea0a15&#34;</span><span class="p">,</span><span class="s2">&#34;0xa31d40508da63fb00d7e2f4db57c3774384aa299&#34;</span><span class="p">,</span> <span class="s2">&#34;camera&#34;</span><span class="p">,</span> <span class="s2">&#34;subject&#34;</span><span class="p">);})</span>
<span class="kc">undefined</span>
<span class="nx">truffle</span><span class="p">(</span><span class="nx">lightnode2</span><span class="p">)</span><span class="o">&gt;</span> <span class="nx">Register</span><span class="p">.</span><span class="nx">deployed</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">instance</span><span class="p">)</span> <span class="p">{</span><span class="nx">instance</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s2">&#34;0x42b97b26ed5f53693bcc9b58ad8c724718ea0a15&#34;</span><span class="p">,</span><span class="s2">&#34;deviceType&#34;</span><span class="p">);})</span>
<span class="s1">&#39;camera&#39;</span>
<span class="nx">truffle</span><span class="p">(</span><span class="nx">lightnode2</span><span class="p">)</span><span class="o">&gt;</span> <span class="nx">Register</span><span class="p">.</span><span class="nx">deployed</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">instance</span><span class="p">)</span> <span class="p">{</span><span class="nx">instance</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s2">&#34;0x42b97b26ed5f53693bcc9b58ad8c724718ea0a15&#34;</span><span class="p">,</span><span class="s2">&#34;deviceRole&#34;</span><span class="p">);})</span>
<span class="s1">&#39;subject&#39;</span>
</code></pre></td></tr></table>
</div>
</div><p>建立<code>requester2.js</code>，内容和<code>requester.js</code>相似，只是发起访问控制的是<code>lightnode2</code>新建立的<code>camera</code>设备账户，也就是说与requester.js的不同仅在于发起访问控制的账户</p>
<p>错误测试的结果如下</p>
<p>
</p>
<h3 id="37-步骤总结">3.7 步骤总结</h3>
<p>总结一下本篇中需要做的事情</p>
<ol>
<li>node0部署RC，获取RC合约地址</li>
<li>node0部署JC，传入参数base=2、interval=3，获取JC的合约地址</li>
<li>JC合约在RC中注册</li>
<li>node0分别转给lightnode1和lightnode2 1 ether</li>
<li>lightnode1新建IoT设备账户，从第一个账户向该账户转入1000 0000wei</li>
<li>lightnode2新建两个IoT设备账户，从第一个账户分别向这两个账户转入1000 0000wei</li>
<li>lightnode2的两个IoT设备账户在RC中注册设备属性(事实上所有节点都应注册设备属性，这里是因为实验只需要它们两个发起访问控制)</li>
<li>lightnode1的IoT设备账户部署ACC，传入RC和JC的合约地址，获取ACC的合约地址</li>
<li>lightnode1在RC中注册ACC</li>
<li>lightnode1在ACC中注册资源属性，设置访问控制策略</li>
<li>lingtnode2的两个IoT设备通过调用ACC向lightnode1的IoT设备发起访问控制</li>
</ol>]]></description></item><item><title>区块链方向的期刊、会议和基金收集</title><link>https://shuzang.github.io/conference-journal-and-foundation-information-in-blockchain-field/</link><pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://shuzang.github.io/conference-journal-and-foundation-information-in-blockchain-field/</guid><description><![CDATA[<p>如题，本文只关注重点的几方面</p>
<ul>
<li>收录区块链的期刊、会议列表（将中国的单独分离）</li>
<li>期刊专题和会议的征稿通知，从中发现当前热点研究领域</li>
<li>基金项目信息中的负责人、研究机构、项目名，从而了解研究现状</li>
</ul>
<p>下面分类讨论</p>
<h2 id="1-期刊">1. 期刊</h2>
<p>期刊目录查询：<a href="https://www.researchgate.net/publication/321686910_SCI_Science_Citation_Indexed_Journal_List" target="_blank" rel="noopener noreffer">SCI</a>, <a href="https://www.elsevier.com/solutions/engineering-village/content" target="_blank" rel="noopener noreffer">EI</a>, <a href="http://www.sanxiau.edu.cn/xtsg/info/1021/1527.htm" target="_blank" rel="noopener noreffer">北大核心</a>, <a href="http://www.letpub.com.cn/index.php?page=journalapp&amp;view=search" target="_blank" rel="noopener noreffer">LetPub JCR分区</a></p>
<p>具体查看某个期刊是否被收录查看<a href="https://zhuanlan.zhihu.com/p/27010468" target="_blank" rel="noopener noreffer">如何快速查询期刊收录情况</a>这篇文章</p>
<p>查看影响因子和版面费情况查看<a href="http://www.sinoscript.com/search.html#opennewwindow" target="_blank" rel="noopener noreffer">SinoScript</a></p>
<p>SCI的收录查询网址为 <a href="https://mjl.clarivate.com/home" target="_blank" rel="noopener noreffer">Master Journal List</a></p>
<p>以上都是完整的目录，包含各个领域，而对收录区块链方向论文的期刊列表，虽然理论上计算机和通信领域的期刊应该都是收录的，但还是根据上次对区块链领域已发布文献的总结，列举曾收录过区块链方向的论文数量较多的一些期刊。</p>
<table>
<thead>
<tr>
<th>期刊名</th>
<th>中科院分区</th>
</tr>
</thead>
<tbody>
<tr>
<td>IEEE Access</td>
<td>2区</td>
</tr>
<tr>
<td>IEEE Internet of Things Journal</td>
<td>1区</td>
</tr>
<tr>
<td>Advances in Intelligent Systems and Computing</td>
<td>会议论文集</td>
</tr>
<tr>
<td><strong>Sensors</strong></td>
<td>3区</td>
</tr>
<tr>
<td>IEEE Transactions on Industrial Informatics</td>
<td>1区</td>
</tr>
<tr>
<td>Applied Sciences Basel</td>
<td>非计算机，4区</td>
</tr>
<tr>
<td>Future Generation Computer Systems</td>
<td>2区</td>
</tr>
<tr>
<td>Sustainability</td>
<td>非计算机，4区</td>
</tr>
<tr>
<td><strong>IT Professional</strong></td>
<td>3区</td>
</tr>
<tr>
<td>Communications In Computer And  Information Science</td>
<td>会议论文集</td>
</tr>
<tr>
<td>Procedia Computer Science</td>
<td>会议论文集</td>
</tr>
<tr>
<td>Energies</td>
<td>非计算机，3区</td>
</tr>
<tr>
<td>International Journal of Information Management</td>
<td>非计算机，4区</td>
</tr>
<tr>
<td><strong>Computers And Security</strong></td>
<td>3区</td>
</tr>
<tr>
<td>Future Internet</td>
<td>EI</td>
</tr>
<tr>
<td><strong>IEEE Transactions On Computational  Social Systems</strong></td>
<td>EI</td>
</tr>
<tr>
<td>Concurrency Computation Practice And  Experience</td>
<td>4区</td>
</tr>
<tr>
<td>Information Sciences</td>
<td>2区</td>
</tr>
<tr>
<td>软件学报</td>
<td></td>
</tr>
<tr>
<td>计算机研究与发展</td>
<td></td>
</tr>
<tr>
<td>自动化学报</td>
<td></td>
</tr>
<tr>
<td>中国电机工程学报</td>
<td></td>
</tr>
<tr>
<td>电子与信息学报</td>
<td></td>
</tr>
<tr>
<td>计算机应用研究</td>
<td></td>
</tr>
<tr>
<td>通信学报</td>
<td></td>
</tr>
<tr>
<td>电子学报</td>
<td></td>
</tr>
<tr>
<td>计算机学报</td>
<td></td>
</tr>
</tbody>
</table>
<p>专题征稿：</p>
<ul>
<li>Parallel and Distributed Computing，<a href="https://www.journals.elsevier.com/journal-of-parallel-and-distributed-computing/call-for-papers/blockchain-enabled-secure-communications" target="_blank" rel="noopener noreffer">Special Issue on Blockchain-enabled Secure Communications in Smart Cities</a>, 2020.02.28(Deadline)</li>
<li>Sensors, <a href="https://www.mdpi.com/journal/sensors/special_issues/Blockchainfor_IoT#info" target="_blank" rel="noopener noreffer">Special Issue on Blockchain Security and Privacy for the Internet of Things</a>, 2020.03.15(Deadline)</li>
</ul>
<p>下面是输入关键词<code>blockchain</code>和<code>iot</code>从IEEE的期刊推荐工具得到的<a href="http://publication-recommender.ieee.org/pubsearch" target="_blank" rel="noopener noreffer">推荐期刊</a>，删去影响因子大于5的，删去审稿期过长的，删去明显偏向某个领域的，删去收费的大致如下，最后三行期刊主页没有影响因子</p>
<table>
<thead>
<tr>
<th>Title</th>
<th>Impact Factor</th>
<th>审稿期</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://ieeexplore.ieee.org/xpl/RecentIssue.jsp?punumber=6294" target="_blank" rel="noopener noreffer">IT  Professional</a>, IEEE</td>
<td>2.424</td>
<td>12周</td>
</tr>
<tr>
<td><a href="https://www.journals.elsevier.com/computers-and-security/" target="_blank" rel="noopener noreffer">Computers  &amp; Security</a>, Elsevier</td>
<td>3.062</td>
<td>13周</td>
</tr>
<tr>
<td><a href="https://ieeexplore.ieee.org/xpl/RecentIssue.jsp?punumber=4236" target="_blank" rel="noopener noreffer">Internet  Computing</a>, IEEE</td>
<td>2.891</td>
<td>6-12周</td>
</tr>
<tr>
<td><a href="https://ieeexplore.ieee.org/xpl/RecentIssue.jsp?punumber=8013" target="_blank" rel="noopener noreffer">Security  &amp; Privacy</a>, IEEE</td>
<td>1.596</td>
<td>6-12周</td>
</tr>
<tr>
<td><a href="https://ieeexplore.ieee.org/xpl/RecentIssue.jsp?punumber=2" target="_blank" rel="noopener noreffer">Computer</a>, IEEE</td>
<td>3.564</td>
<td>12个月</td>
</tr>
<tr>
<td><a href="https://ieeexplore.ieee.org/xpl/RecentIssue.jsp?punumber=52" target="_blank" rel="noopener noreffer">Software</a>, IEEE</td>
<td>2.945</td>
<td>6-12周</td>
</tr>
<tr>
<td><a href="https://ieeexplore.ieee.org/xpl/RecentIssue.jsp?punumber=45" target="_blank" rel="noopener noreffer">Potentials</a>,  IEEE</td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="https://ieeexplore.ieee.org/xpl/RecentIssue.jsp?punumber=6570650" target="_blank" rel="noopener noreffer">Transactions On Computational  Social Systems</a>, IEEE</td>
<td></td>
<td></td>
</tr>
<tr>
<td><a href="https://ieeexplore.ieee.org/xpl/RecentIssue.jsp?punumber=8548628" target="_blank" rel="noopener noreffer">Internet  of Things Magazine</a>, IEEE</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h2 id="2-会议">2. 会议</h2>
<p>会议以CCF推荐会议列表，CPCI-S会议列表，和EI会议列表为准，可以从以下这些网站查询</p>
<ul>
<li>SCIEI Upcoming conferences： <a href="http://sciei.org/list-32-1.html">http://sciei.org/list-32-1.html</a></li>
<li>中国学术会议网： <a href="http://conf.cnki.net/">http://conf.cnki.net/</a></li>
<li>中科院国际会议服务平台： <a href="http://csp.escience.cn/dct/page/1">http://csp.escience.cn/dct/page/1</a></li>
<li>world conference alerts： <a href="https://www.worldconferencealerts.com/">https://www.worldconferencealerts.com/</a></li>
</ul>
<p>不过最好用的还是<a href="http://www.wikicfp.com/cfp/home" target="_blank" rel="noopener noreffer">WikiCFP</a>，以下关于区块链的会议列表大部分来自于该网站的查询，剩下的来自于上次总结的收录区块链方向论文较多的会议列表。Deadline置空意味找不到下一届的信息，会议缩写没有链接意味着本届会议官网已失效，无法找到。</p>
<table>
<thead>
<tr>
<th>Conference</th>
<th>Deadline</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://sites.google.com/site/itngbt2020/website-builder" target="_blank" rel="noopener noreffer">ITNG-BT</a>, Application, Challenges and Opportunities in Blockchain Technology(together with ITNG 2020), April 05-08, Las Vegas, Nevada, USA</td>
<td>2019.10.11</td>
</tr>
<tr>
<td><a href="https://www.comsnets.org/blockchain_workshop.html" target="_blank" rel="noopener noreffer">CyBlock</a>, Workshop on Cyber Security and Blockchain(in COMSNETS 2020), January 07, 2020, Bengaluru, India</td>
<td>2019.11.29</td>
</tr>
<tr>
<td><a href="https://ieeedapps.net/" target="_blank" rel="noopener noreffer">IEEE Dapps 2020</a>, The 2nd IEEE International Conference on Decentralized Applications and Infrastructures, April 13-16, 2020, Oxford, UK</td>
<td>2019.12.07</td>
</tr>
<tr>
<td><a href="https://www.i3e2020.org/1st-workshop-on-transparent-governance-with-emerging-blockchain-technology-tgebt20/" target="_blank" rel="noopener noreffer">TGBT</a>, 1st Workshop on Transparent Governance with Blockchain Technology(part of The 19th IFIP Conference on e-Business, e-Services and e-Society), April 06-08, 2020, Skukuza, Kruger National Park, South Africa</td>
<td>2019.12.15</td>
</tr>
<tr>
<td><a href="https://icbc2020.ieee-icbc.org/" target="_blank" rel="noopener noreffer">ICBC 2020</a>, IEEE International Conference on Blockchain and Cryptocurrency, May 03-06, 2020, Toronto, Canada</td>
<td>2019.12.19</td>
</tr>
<tr>
<td><a href="http://www.aibc.org/" target="_blank" rel="noopener noreffer">AIBC 2020</a>, 2020 International Artificial Intelligence and Blockchain Conference, Feb 18-20, Nagoya, Japan</td>
<td>2019.12.20</td>
</tr>
<tr>
<td><a href="http://www.inf.ufg.br/~insight/blockarch2020/index.html" target="_blank" rel="noopener noreffer">BlockArch 2020</a>, 1st Workshop on Blockchain-Based Software Architecture(together with ICSA 2020), March 16-20, 2020, Salvador, Brazil</td>
<td>2020.01.08</td>
</tr>
<tr>
<td><a href="http://emergingtechnet.org/BAT2020/index.php" target="_blank" rel="noopener noreffer">BAT 2020</a>, The Second International Workshop on Blockchain Applications and Theory(together with SDS 2020), April 20-23, 2020, Paris, France</td>
<td>2020.01.10</td>
</tr>
<tr>
<td><a href="https://infocom2020.ieee-infocom.org/symposium-edge-computing-security-and-blockchain" target="_blank" rel="noopener noreffer">EdgeBlock 2020</a>, IEEE International Symposium on Edge Computing Security and Blockchain(together with IEEE INFOCOM 2020), April 27, 2020, Beijing, China</td>
<td>2020.01.15</td>
</tr>
<tr>
<td><a href="http://icbct.org/cfp.html" target="_blank" rel="noopener noreffer">ICBCT 2020</a>, 2020 The 2nd International Conference on Blockchain Technology, March 12-14, 2020,Hilo Hawaiii, USA</td>
<td>2020.01.15</td>
</tr>
<tr>
<td><a href="https://icc2020.ieee-icc.org/workshop/ws-03-workshop-blockchain-iot-and-cyber-physical-systems" target="_blank" rel="noopener noreffer">BC for IoT CPS</a>, Workshop on Blockchain for IoT and Cyber-Physical Systems(part of the IEEE International Conference on Communications), June 07, 2020, Dublin, Ireland</td>
<td>2020.01.20</td>
</tr>
<tr>
<td><a href="http://www.cloud-conf.net/bsci/2020/" target="_blank" rel="noopener noreffer">BSCI 2020</a>, The 2nd ACM International Symposium on Blockchain and Secure Critical Infrastructure, June 01-05, 2020, Taipei, China</td>
<td>2020.01.30</td>
</tr>
<tr>
<td><a href="https://www.blockchain-congress.net/" target="_blank" rel="noopener noreffer">Blockchain 20</a>, 2nd International Congress on Blockchain and Applications, June 17-19, 2020, L&rsquo;Aquila, Italy</td>
<td>2020.01.31</td>
</tr>
<tr>
<td><a href="http://www.icobdb.org/" target="_blank" rel="noopener noreffer">ICBDB 2020</a>, International Conference on Big Data and Blockchain, August 07-09, Newcastle upon Tyne, UK</td>
<td>2020.02.18</td>
</tr>
<tr>
<td><a href="https://bct4mas.ehealth.hevs.ch/" target="_blank" rel="noopener noreffer">BCT4MAS2020</a>, 3rd International Workshop on Blockchain Technologies for Multi-Agent Systems, June 17-19, 2020, Aquila, Italy</td>
<td>2020.02.20</td>
</tr>
<tr>
<td><a href="http://www.blockchain-ieee.org/cfp.php" target="_blank" rel="noopener noreffer">Blockchain 2020</a>, IEEE International Conference on Blockchain, August 02-06, 2020, Rhode Island, Greece</td>
<td>2020.03.01</td>
</tr>
<tr>
<td><a href="https://coinsconf.com/" target="_blank" rel="noopener noreffer">COINS</a>, IEEE International Conference on Omni-layer Intelligent systems(Track Name: Blockchain and DLT), July 27-29, 2020, Barcelona, Spain</td>
<td>2020.03.06</td>
</tr>
<tr>
<td><a href="http://www.biotc.net/" target="_blank" rel="noopener noreffer">BIOTC 2020</a> , The 2020 Blockchain and Internet of Things Conference, July 08-10, Singapore</td>
<td>2020.03.20</td>
</tr>
<tr>
<td><a href="http://www.ficloud.org/deep-bdb/" target="_blank" rel="noopener noreffer">Deep-BDB 2020</a>, The 2nd International Conference on Deep Learning, Big Data and Blockchain, August 24-26, 2020, Rome, Italy</td>
<td>2020.03.12</td>
</tr>
<tr>
<td><a href="https://www.cryptovalleyconference.com/technology-call-for-papers" target="_blank" rel="noopener noreffer">CVCBT</a>, Crypto Valley Conference on Blockchain Technology, June 11-12, 2020, Rotkreuz, Switzerland</td>
<td>未确定</td>
</tr>
<tr>
<td><a href="http://hoticn.cqupt.edu.cn/callforpapers.html" target="_blank" rel="noopener noreffer">IEEE HotICN 2019</a>, IEEE International Conference on Hot Information-Centric Networking, Dec 13-15, 2019, Chongqing, China</td>
<td></td>
</tr>
<tr>
<td><a href="http://www.ntms-conf.org/ntms2020/call-for-workshops/bsc2019" target="_blank" rel="noopener noreffer">BSC</a>, 2nd International Workshop on Blockchain and Smart Contracts, in 11th IFIP International Conference on New Technologies, Mobility &amp; Security</td>
<td></td>
</tr>
<tr>
<td><a href="https://link.springer.com/conference/cbt" target="_blank" rel="noopener noreffer">CBT</a>, International Workshop on Cryptocurrencies and Blockchain Technology</td>
<td></td>
</tr>
<tr>
<td><a href="http://sensys.acm.org/2020/workshops/" target="_blank" rel="noopener noreffer">BlockSys</a>, Workshop on Blockchain-Enabled Networked Sensor Systems</td>
<td></td>
</tr>
<tr>
<td><a href="http://www.cryblock.org/" target="_blank" rel="noopener noreffer">CryBlock 2019</a>, 2nd Workshop on Cryptocurrencies and Blockchains for Distributed Systems(co-located with INFOCOM 2019)</td>
<td></td>
</tr>
<tr>
<td><a href="http://2019.cbcc.dbw.org.cn/" target="_blank" rel="noopener noreffer">CCF 区块链技术大会</a>, 2019年10月11日-13日, 成都</td>
<td></td>
</tr>
<tr>
<td><a href="http://cbcs.dbw.org.cn/" target="_blank" rel="noopener noreffer">CCF CBCS</a>, 中国区块链技术与应用高峰论坛, 2019年5月31-6月2日，南京</td>
<td></td>
</tr>
<tr>
<td><a href="http://www.cbdforum.cn/bcweb/" target="_blank" rel="noopener noreffer">CBD Forum</a>, 中国区块链技术和产业发展论坛, 2019年12月26日，北京</td>
<td></td>
</tr>
<tr>
<td>WETSEB 2019, 2nd International Workshop on Emerging Trends in Software Engineering for Blockchain</td>
<td></td>
</tr>
<tr>
<td>IWBOSE, IEEE International Workshop on Blockchain Oriented Software Engineering</td>
<td></td>
</tr>
<tr>
<td>BCC, ACM Workshop on Blockchain, Cryptocurrencies and Contracts</td>
<td></td>
</tr>
</tbody>
</table>
<p>以上会议征稿说明中涉及大量热点区块链方向，可从中看出当前主流研究方向，IoT和CPS相关的在<a href="https://icc2020.ieee-icc.org/workshop/ws-03-workshop-blockchain-iot-and-cyber-physical-systems" target="_blank" rel="noopener noreffer">IEEE ICC 2020 Workshop on Blockchain for IoT and Cyber-Physical Systems</a>中分的比较详细，如下</p>
<ul>
<li>Novel applications of blockchains for IoT and CPSs</li>
<li>Experimental evaluations of blockchain-based IoT and CPSs</li>
<li>Optimization for addressing scale and latency issues that are inherent in traditional blockchains</li>
<li>Lightweight protocols and algorithms for blockchains in IoT and CPSs</li>
<li>Solutions for addressing security and privacy concerns in blockchain-based IoT and CPSs</li>
<li>Novel theoretical concepts in blockchain for IoT and CPSs</li>
<li>New consensus mechanisms geared for IoT and CPSs</li>
<li>Use cases of blockchains for smart cities, smart grids, smart transportation E-health,</li>
<li>Use of Smart contracts for IoT and CPSs</li>
<li>Blockchain based security frameworks for IoT</li>
<li>Anonymity and privacy solutions for blockchain based IoT and CPS applications</li>
<li>Testbeds, experiments related to blockchain based IoT and CPS</li>
</ul>
<p>总结这些方向如下，详细信息可查看<a href="https://zhimap.com/m/SWGKuHfw" target="_blank" rel="noopener noreffer">大图</a></p>
<p></p>
<h2 id="3-基金">3. 基金</h2>
<h3 id="31-老师推荐">3.1 老师推荐</h3>
<p>NSF SBIR Phase I topics：<a href="https://seedfund.nsf.gov/topics/distributed-ledger/" target="_blank" rel="noopener noreffer">Distributed Ledger (DL)</a>，共包括15个子课题，如下</p>
<ol>
<li>Autonomous Systems and Economies</li>
<li>Blockchain, DAGs, and Next Gen Protocols</li>
<li>Convergence with Big Data, and AI</li>
<li>Convergence with IoT, Crowdsourcing and Crowdsensing</li>
<li>Cryptography and Security</li>
<li>Decentralized Applications (dApps); Smart Contracts</li>
<li>Distributed Consensus; Fault Tolerance Mechanisms</li>
<li>Distributed Ledger in Edge and Cloud Computing</li>
<li>Distributed Ledger Interoperability</li>
<li>Distributed Ledger in Network Architecture and Management</li>
<li>Financial Technologies</li>
<li>Human-to-Technology Interface</li>
<li>Scalability Solutions</li>
<li>Trusted Identity; Identity Management</li>
<li>Other Distributed Ledger Technologies</li>
</ol>
<p>有两个已获资助项目</p>
<ol>
<li><a href="https://www.nsf.gov/awardsearch/showAward?AWD_ID=1819962" target="_blank" rel="noopener noreffer">SBIR Phase I: Blockchain based Logging Management System for IoT Devices</a></li>
<li><a href="https://www.sbir.gov/sbirsearch/detail/1585183" target="_blank" rel="noopener noreffer">SBIR Phase I: Subspace: A Decentralized Database of End-User Devices | SBIR.gov</a></li>
</ol>
<p>注：SBIR，即<a href="https://www.nsf.gov/pubs/2019/nsf19554/nsf19554.htm" target="_blank" rel="noopener noreffer">Small Business Innovation Research</a></p>
<h3 id="32-国内基金">3.2 国内基金</h3>
<p>从LetPub查询的国内区块链基金项目数据，以区块链为关键词，自2015年起有该方向基金申请，呈逐年上升态势，总计项目数量49个，资助总金额达到1899万。<a href="http://www.letpub.com.cn/?page=grant&amp;name=%e5%8c%ba%e5%9d%97%e9%93%be&amp;person=&amp;no=&amp;company=&amp;addcomment_s1=&amp;addcomment_s2=&amp;addcomment_s3=&amp;addcomment_s4=&amp;money1=&amp;money2=&amp;startTime=2019&amp;endTime=2019&amp;subcategory=&amp;searchsubmit=true&amp;submit.x=51&amp;submit.y=15#fundlisttable" target="_blank" rel="noopener noreffer">项目列表</a></p>
<p></p>
<p>其中，北京理工大学和南京邮电大学基金项目最多(3个)，北航、上交、同济、中科大和武汉大学其次(2个)。在物联网领域共有6个项目</p>
<ol>
<li>黄鑫，西交利物浦大学，基于区块链的物联网计算模型及其基础机制研究</li>
<li>吴永东，暨南大学，基于区块链的物联网安全技术研究</li>
<li>张兰，中国科学技术大学，基于区块链的物联网安全技术研究</li>
<li>何云华，北方工业大学，基于区块链的分布式激励机制研究</li>
<li>李颉，上海交通大学，基于区块链的物联网安全技术研究</li>
<li>万志国，山东大学，面向大规模物联网的层次式区块链架构及安全研究</li>
</ol>
<p>其它方向主要是区块链中的密码学机制研究、区块链基础理论中的扩展性、共识、智能合约等部分、区块链在各种场景中的使用。具体的列表如下：</p>
<table>
<thead>
<tr>
<th>负责人</th>
<th>单位</th>
<th>题目</th>
<th>一级学科</th>
<th>二级学科</th>
<th>三级学科</th>
<th>项目类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>刘园</td>
<td>东北大学</td>
<td>面向解决非诚信问题的基于区块链的电子商务个性化信誉系统</td>
<td>计算机科学</td>
<td>信息安全</td>
<td>信息安全</td>
<td>青年科学基金</td>
</tr>
<tr>
<td>王化群</td>
<td>南京邮电大学</td>
<td>基于区块链的数字资产复杂交易中相关密码协议研究</td>
<td>计算机科学</td>
<td>信息安全</td>
<td>安全体系结构与协议</td>
<td>面上项目</td>
</tr>
<tr>
<td>段美姣</td>
<td>中央财经大学</td>
<td>基于区块链的信息物理融合系统数据安全与隐私保护机制研究</td>
<td>计算机科学</td>
<td>信息安全</td>
<td>安全体系结构与协议</td>
<td>青年科学基金</td>
</tr>
<tr>
<td>孙知信</td>
<td>南京邮电大学</td>
<td>基于属性密码体制的区块链安全关键技术研究</td>
<td>计算机科学</td>
<td>计算机体系结构</td>
<td>并行与分布式处理</td>
<td>面上项目</td>
</tr>
<tr>
<td>过敏意</td>
<td>上海交通大学</td>
<td>基于区块链的分布式资源管理关键技术研究</td>
<td>计算机科学</td>
<td>计算机软件</td>
<td>并行与分布式软件</td>
<td>面上项目</td>
</tr>
<tr>
<td>吴宇</td>
<td>东莞理工学院</td>
<td>移动云计算中基于区块链技术的网络优化研究</td>
<td>计算机科学</td>
<td>计算机网络</td>
<td>计算机网络</td>
<td>青年科学基金</td>
</tr>
<tr>
<td>孙毅</td>
<td>中国科学院计算技术研究所</td>
<td>区块链系统性能优化理论模型及算法研究</td>
<td>计算机科学</td>
<td>计算机网络</td>
<td>计算机网络</td>
<td>面上项目</td>
</tr>
<tr>
<td>赵庆林</td>
<td>珠海澳科大科技研究院</td>
<td>基于PoUW区块链的数据处理研究</td>
<td>计算机科学</td>
<td>计算机网络</td>
<td>计算机网络</td>
<td>面上项目</td>
</tr>
<tr>
<td>盖珂珂</td>
<td>北京理工大学</td>
<td>基于DAG结构的高吞吐区块链构建方法研究</td>
<td>计算机科学</td>
<td>计算机网络</td>
<td>计算机网络体系结构</td>
<td>面上项目</td>
</tr>
<tr>
<td>许维胜</td>
<td>同济大学</td>
<td>区块链技术支撑下的能源互联网超网络建模与优化</td>
<td>自动化</td>
<td>控制系统</td>
<td>楼宇监测与控制系统</td>
<td>面上项目</td>
</tr>
<tr>
<td>张宗洋</td>
<td>北京航空航天大学</td>
<td>安全可扩展可插拔区块链共识机制研究</td>
<td>计算机科学</td>
<td>信息安全</td>
<td>密码学</td>
<td>面上项目</td>
</tr>
<tr>
<td>蒋芃</td>
<td>北京理工大学</td>
<td>基于区块链的公钥可搜索加密研究</td>
<td>计算机科学</td>
<td>信息安全</td>
<td>密码学</td>
<td>青年科学基金</td>
</tr>
<tr>
<td>陈家辉</td>
<td>广东工业大学</td>
<td>区块链系统中的多变量公钥密码学关键技术研究</td>
<td>计算机科学</td>
<td>信息安全</td>
<td>密码学</td>
<td>青年科学基金</td>
</tr>
<tr>
<td>叶青</td>
<td>河南理工大学</td>
<td>基于NTRU格上可链接环签名的区块链隐私保护技术研究</td>
<td>计算机科学</td>
<td>信息安全</td>
<td>密码学</td>
<td>青年科学基金</td>
</tr>
<tr>
<td>何德彪</td>
<td>武汉大学</td>
<td>面向区块链系统隐私保护的关键密码技术研究</td>
<td>计算机科学</td>
<td>信息安全</td>
<td>密码学</td>
<td>面上项目</td>
</tr>
<tr>
<td>魏凌波</td>
<td>中国科学技术大学</td>
<td>具有可证明安全与性能保障的区块链分布式共识协议研究</td>
<td>计算机科学</td>
<td>信息安全</td>
<td>密码学</td>
<td>青年科学基金</td>
</tr>
<tr>
<td>李文敬</td>
<td>南宁师范大学</td>
<td>基于区块链的群体智能服务交易关键技术研究</td>
<td>人工智能</td>
<td>智能系统与应用</td>
<td>群体智能与多智能体系统</td>
<td>地区科学基金</td>
</tr>
<tr>
<td>蔡维德</td>
<td>北京航空航天大学</td>
<td>可扩展私有区块链关键问题研究</td>
<td>计算机科学</td>
<td>计算机软件</td>
<td>软件工程</td>
<td>面上项目</td>
</tr>
<tr>
<td>张召</td>
<td>华东师范大学</td>
<td>面向高吞吐处理的区块链数据管理</td>
<td>计算机科学</td>
<td>计算机软件</td>
<td>数据库与数据工程</td>
<td>面上项目</td>
</tr>
<tr>
<td>黄鑫</td>
<td>西交利物浦大学</td>
<td>基于区块链的物联网计算模型及其基础机制研究</td>
<td>电子学与信息系统</td>
<td>信息系统</td>
<td>通信网络安全</td>
<td>青年科学基金</td>
</tr>
<tr>
<td>吴永东</td>
<td>暨南大学</td>
<td>基于区块链的物联网安全技术研究</td>
<td>计算机科学</td>
<td>计算机网络</td>
<td>网络安全</td>
<td>重点项目</td>
</tr>
<tr>
<td>张兰</td>
<td>中国科学技术大学</td>
<td>基于区块链的物联网安全技术研究</td>
<td>计算机科学</td>
<td>计算机网络</td>
<td>网络安全</td>
<td>重点项目</td>
</tr>
<tr>
<td>张佩云</td>
<td>安徽师范大学</td>
<td>面向用户信任需求和个性化交易的可信区块链关键技术研究</td>
<td>计算机科学</td>
<td>计算机网络</td>
<td>网络资源共享与管理</td>
<td>面上项目</td>
</tr>
<tr>
<td>何云华</td>
<td>北方工业大学</td>
<td>基于区块链的分布式激励机制研究</td>
<td>计算机科学</td>
<td>计算机网络</td>
<td>物联网</td>
<td>青年科学基金</td>
</tr>
<tr>
<td>李颉</td>
<td>上海交通大学</td>
<td>基于区块链的物联网安全技术研究</td>
<td>计算机科学</td>
<td>计算机网络</td>
<td>物联网</td>
<td>重点项目</td>
</tr>
<tr>
<td>祝烈煌</td>
<td>北京理工大学</td>
<td>基于区块链的数据隐蔽传输机制研究</td>
<td>计算机科学</td>
<td>信息安全</td>
<td>系统安全</td>
<td>联合基金项目</td>
</tr>
<tr>
<td>万志国</td>
<td>山东大学</td>
<td>面向大规模物联网的层次式区块链架构及安全研究</td>
<td>计算机科学</td>
<td>信息安全</td>
<td>系统安全</td>
<td>面上项目</td>
</tr>
<tr>
<td>陈艳姣</td>
<td>武汉大学</td>
<td>基于区块链的数据隐藏传输机制研究</td>
<td>计算机科学</td>
<td>信息安全</td>
<td>系统安全</td>
<td>面上项目</td>
</tr>
<tr>
<td>董雪文</td>
<td>西安电子科技大学</td>
<td>基于区块链的智能服务跨域安全组合技术研究</td>
<td>计算机科学</td>
<td>信息安全</td>
<td>系统安全</td>
<td>面上项目</td>
</tr>
<tr>
<td>赵赫</td>
<td>中国科学院合肥物质科学研究院</td>
<td>基于区块链技术的数据真实性保障方法研究</td>
<td>计算机科学</td>
<td>信息安全</td>
<td>系统安全</td>
<td>青年科学基金</td>
</tr>
<tr>
<td>邓小鸿</td>
<td>江西理工大学</td>
<td>基于区块链的个人健康数据保护机制研究</td>
<td>计算机科学</td>
<td>计算机应用技术</td>
<td>新应用领域中的基础研究</td>
<td>地区科学基金</td>
</tr>
<tr>
<td>李皎</td>
<td>西安石油大学</td>
<td>考虑信任度和权值的区块链数据通信性能优化研究</td>
<td>计算机科学</td>
<td>计算机应用技术</td>
<td>新应用领域中的基础研究</td>
<td>青年科学基金</td>
</tr>
<tr>
<td>赵相福</td>
<td>浙江师范大学</td>
<td>面向区块链智能合约漏洞自动检测与修复的符号逻辑建模与推理</td>
<td>计算机科学</td>
<td>计算机应用技术</td>
<td>新应用领域中的基础研究</td>
<td>面上项目</td>
</tr>
<tr>
<td>朱晓荣</td>
<td>南京邮电大学</td>
<td>基于区块链和机器学习的移动边缘云网络可信协作机制和资源优化方法</td>
<td>电子学与信息系统</td>
<td>移动通信</td>
<td>移动通信系统</td>
<td>面上项目</td>
</tr>
<tr>
<td>徐志宇</td>
<td>同济大学</td>
<td>区块链赋能的下一代智能电网主动能量体社群P2P交易行为建模、规则设计与复杂性分析</td>
<td>自动化</td>
<td>系统工程理论与技术</td>
<td>资源、能源管理系统与优化</td>
<td>面上项目</td>
</tr>
</tbody>
</table>
]]></description></item><item><title>文献检索常识</title><link>https://shuzang.github.io/academic-basic-knowledge/</link><pubDate>Tue, 03 Dec 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://shuzang.github.io/academic-basic-knowledge/</guid><description><![CDATA[<h2 id="1-常用名词">1. 常用名词</h2>
<p>与学术研究和论文相关的，有许多常用的名词，本节对这些名词作解释和区分。</p>
<ul>
<li>
<p><strong>会议组织者</strong>：可能是某个学校或某个组织，为了学术或经济利益举办会议，从科研工作者处收取论文和注册费，然后将论文集交给出版商出版</p>
</li>
<li>
<p><strong>出版商</strong>：比如Elsevier/Springer/IEEE，他们运行和维护期刊，收取投稿论文进行审阅，最后以纸质、光盘和电子版本形式发行供科研工作者查看，各种举办的会议收到的文章最后也都会交给出版商出版。出版商拥有所收到的论文的版权，也会向会议组织者收取出版费用，向期刊投稿者收取版面费，最后放在自己的数据库中，再向需要论文访问权限的学校、研究机构或个人收取查看的费用。</p>
<p>国内的出版商相比来说比较孤立，一般由各协会或大学建立，一种期刊一个出版商，没有形成国外出版商的垄断规模，比如计算机学报、软件学报、北京大学学报、东北大学学报等。</p>
</li>
<li>
<p><strong>收录</strong>：出版商或其它机构建立的论文数据库，科研工作者从这些数据库中寻找和阅读论文。出版商建立的数据库(如IEEExplorer, ScienceDirect)一般是需要付费的，但属于全文数据库，意思是可以看到整篇论文的内容。其它机构建立的数据库是从各出版商的数据库中抓取公开的内容，比如题目、摘要、参考文献等，无法看到整篇论文的内容，但根据收录的论文质量的差别，逐渐形成口碑，被科研工作者广泛采用，如SCI和EI。还有些机构或私人建立的数据库，如SCI-Hub，是苦于出版商高额的收费价格私自建立的全文数据库，没有版权，是非法的，但鉴于当前出版商的垄断行为，这种数据库被越来越多的人使用。</p>
<p>国内的数据库机构相比来说具有垄断性质，学术论文普遍归属中国知网(CNKI)，虽然各期刊官网本身也可以检索，但只包括一种期刊，不如知网便利。</p>
</li>
<li>
<p><strong>检索</strong>：检索的含义是从数据库中寻找符合条件的论文，一般来说论文数据库本身都提供对用户的检索接口，如<a href="https://ieeexplore.ieee.org/Xplore/home.jsp" target="_blank" rel="noopener noreffer">IEEE xplorer</a>、<a href="https://www.sciencedirect.com/" target="_blank" rel="noopener noreffer">ScienceDirect</a>、<a href="http://apps.webofknowledge.com/WOS_GeneralSearch_input.do?product=WOS&amp;search_mode=GeneralSearch&amp;SID=6CIWceJqI9n1qQa94CZ&amp;preferencesSaved=" target="_blank" rel="noopener noreffer">Web of Science</a>、<a href="https://www.engineeringvillage.com/search/quick.url?usageZone=evlogo&amp;usageOrigin=header" target="_blank" rel="noopener noreffer">Engineering Village</a>等，现如今，搜索引擎厂商也提供对论文的检索功能，具有一定影响力及被广泛使用的有<a href="https://scholar.google.com/" target="_blank" rel="noopener noreffer">Google Scholar</a>、<a href="https://cn.bing.com/academic?mkt=zh-CN" target="_blank" rel="noopener noreffer">Bing学术</a>、<a href="http://xueshu.baidu.com/" target="_blank" rel="noopener noreffer">百度学术</a>等</p>
</li>
<li>
<p><strong>IF</strong>：Impact factor，期刊影响因子，是代表期刊影响大小的一项定量指标，实际上是某期刊在某年被全部源刊物引证该刊前两年发表论文的次数，与该刊前两年所发表的全部源论文数之比。</p>
</li>
<li>
<p><strong>JCR</strong>：Journal Citation Reports，期刊引证报告，是由一些机构对大量期刊之间引用和被引用数据进行统计，并根据IF进行分类统计并发布的报告，目前有影响力的是中科院的JCR和汤森路透JCR。</p>
</li>
</ul>
<h2 id="2-出版商">2. 出版商</h2>
<p>中国的期刊发行机构一般是各协会、研究所、大学，然后选择某个常规出版商出版，通常一本期刊属于一个机构或多个机构合作，比如计算机学报由中国计算机学会和中科院计算技术研究所共同主办，科学出版社出版，东北大学学报由东北大学主办，东北大学出版商出版，因此不构成垄断形式的影响力，在此不进行讨论。</p>
<p>国外的出版商已逐渐形成几大垄断性质的集团，把持了全球学术出版的各个方面，论文从投稿、发表到查看的全流程都少不了它们的参与，因此逐个进行介绍。</p>
<h3 id="elsevier">Elsevier</h3>
<p></p>
<p>Elsevier，中文名<a href="https://www.elsevier.com/zh-cn" target="_blank" rel="noopener noreffer">爱思唯尔</a>，1880年创建于荷兰，现今总部位于阿姆斯特丹，产品与服务包括期刊、图书专著、教科书和参考书的纸板和电子版，出版领域覆盖医学、生命科学、自然科学和社会科学等，公司每年出版超过2000种期刊，包括Lancet(柳叶刀)和Cell(细胞)等世界著名杂志。其标识是爱思唯尔之树，是一个长者站在葡萄藤缠绕的榆树下，刻有拉丁文“Non Solus&quot;(永不孤单)。</p>
<p>爱思唯尔旗下的数据库是<a href="https://www.sciencedirect.com/" target="_blank" rel="noopener noreffer">ScienceDirect</a>，主要查询该公司自己出版的文献，到现在为止收录了3800多种期刊和35000多部图书，是一个主流的论文数据库平台。</p>
<p>文献管理工具<a href="https://www.elsevier.com/zh-cn/solutions/mendeley" target="_blank" rel="noopener noreffer">Mendeley</a>也是爱思唯尔旗下，这是当今主流的文献管理工具之一。</p>
<p>一些参考网址列举如下</p>
<ul>
<li>Elsevier介绍： <a href="https://www.elsevier.com/zh-cn/about/our-business">https://www.elsevier.com/zh-cn/about/our-business</a></li>
<li>ScienceDirect介绍： <a href="https://www.elsevier.com/zh-cn/solutions/sciencedirect">https://www.elsevier.com/zh-cn/solutions/sciencedirect</a></li>
<li>Elsevier出版的图书和期刊目录：  <a href="https://www.elsevier.com/catalog">https://www.elsevier.com/catalog</a></li>
</ul>
<p>除了上面提到的医学界的顶级期刊柳叶刀和生命科学界的顶级期刊Cell属于Elsevier外，还有大量期刊和图书属于它，详情查看上面的第三个链接。不过，ScienceDirect种收录的期刊全文都不是免费的，多年来学术界一直致力于反抗Elsevier的垄断行为，名为The Cost of Knowledge的抵制活动现如今已得到33383人的参与，参与这一活动的网址为 <a href="http://thecostofknowledge.com/">http://thecostofknowledge.com/</a></p>
<h3 id="springer">Springer</h3>
<p></p>
<p>Springer，中文名<a href="https://www.springer.com/cn" target="_blank" rel="noopener noreffer">施普林格</a>，1842年创立于德国，现今总部位于柏林， 拥有超过2900种期刊和300,000本图书，每年出版6,500余种科技图书和约2,000余种科技期刊，涉及到医学、心理学、生物医学、生物、数学、物理、经济学、法律等多种学科。 鼎鼎大名的Nature期刊现在就归属于Springer，是在2015年1月合并的。</p>
<p>旗下的论文检索数据库为<a href="https://link.springer.com/" target="_blank" rel="noopener noreffer">Springer Link</a>，不过大多数情况都是因为图书检索到它</p>
<p>一些参考网址如下</p>
<ul>
<li>Springer历史： <a href="https://www.springer.com/cn/about-springer/history">https://www.springer.com/cn/about-springer/history</a></li>
<li>Springer产品与服务： <a href="https://www.springernature.com/gp/librarians/products">https://www.springernature.com/gp/librarians/products</a></li>
</ul>
<p>Springer是目前全球最大的书籍出版商，第二大期刊出版商(第一是Elsevier)</p>
<h3 id="wiley">Wiley</h3>
<p></p>
<p>Wiley，译为<a href="https://www.wiley.com/en-cn" target="_blank" rel="noopener noreffer">约翰威立</a>或不翻译，1807年创立于美国，出版了超过350位不同领域诺贝尔奖得主的作品，是世界第三大期刊出版商，也是全球最大的学协会出版商。 拥有1600+种期刊，其中1200+种期刊被JCR收录。 出版涵盖学科范围包括化学、材料科学、信息技术及计算机、工程学、数学与统计、物理与天文学、商业、 人文科学、教育及法律、心理学、社会科学、 生命科学、医学等多个学科。在JCR全部236个学科类别中，219个收录了Wiley期刊，其中有256本期刊在所属的学科中排名前十位。</p>
<p>拥有最高影响因子的期刊是《CA: A Cancer Journal for Clinicians》2018年的影响因子高达223.679，是目前影响因子最高的期刊。</p>
<p>Wiley旗下的论文数据库是<a href="https://onlinelibrary.wiley.com/" target="_blank" rel="noopener noreffer">Wiley Online Library</a></p>
<p>关于Wiley期刊的详细说明可以查看 <a href="https://www.wiley.com/en-cn/students">https://www.wiley.com/en-cn/students</a></p>
<h3 id="其它">其它</h3>
<p><a href="https://us.sagepub.com/en-us/nam" target="_blank" rel="noopener noreffer">SAGE</a>和<a href="https://taylorandfrancis.com/#" target="_blank" rel="noopener noreffer">Taylor&amp;Francis</a>也是世界出版巨头</p>
<p>IEEE是美国电气与电子工程师协会，全球最大的非营利性专业技术协会，也是国际学术会议和期刊中最知名的一个，总部设在纽约。主要致力于在电气、电子、计算机工程和与科学有关的领域开发和研究，在太空、计算机、通信、生物医学、电力及消费性电子产品等领域已制定了900多个行业标准，现已发展成为全球最具有影响力的国际学术组织。IEEE出版有70多种学术期刊杂志，每个专业分会都有自己的刊物，IEEE每年发表的论文著作数量占全世界该领域当年发表量的30%左右。IEEE最出名的除了其出版的期刊外，还有每年举办的业内顶尖学术国际会议，以及<a href="https://ieeexplore.ieee.org/Xplore/home.jsp" target="_blank" rel="noopener noreffer">IEEExplore</a>数据库</p>
<p>ACM是美国计算机协会，举办的学术会议和期刊在全球也具有重要影响力，全文数据库<a href="https://dl.acm.org/advsearch.cfm?" target="_blank" rel="noopener noreffer">ACM DL</a>是常用数据库之一</p>
<h2 id="3-三大检索">3. 三大检索</h2>
<p>除以上提到的出版商提供的自己旗下的全文数据库外，一些机构还提供了对全网资源的整合。最著名的是三大检索系统：<strong>SCI，EI和ISTP</strong>。这些检索系统在我国的知名度很高，除了它们本身已被国际权威机构公认外，还有一个重要原因是中国科技信息研究所从1989年起，每年以SCI，EI，ISTP光盘收录的期刊及论文为统计源，对我国发表在国内外的论文进行了大规模的统计分析，并按种类数量指标的大小排出各高校、科研机构及论文作者学术活动和论文水平的名次表，以《中国科技论文统计与分析》（年度研究报告）形式发表，这就是所谓的“学术榜”。各学术机构也将它们作为职称评定和奖金发放的依据。</p>
<h3 id="31-sci">3.1 SCI</h3>
<p>SCI是美国《科学引文索引》的英文简称，其全称为：Science Citation Index，创刊于1961年，它是根据现代情报学家加菲尔德（Engene GarfiEId） 1953年提出的引文思想而创立的，时至今日加菲尔德仍是SCI主编之一。SCI是由ISI（Institute for Scientific Information Inc.）美国科学情报所出版，为双月刊。 SCI是一部国际性索引，包括有：自然科学、生物、医学、农业、技术和行为科学等，主要侧重基础科学。所选用的刊物来源于94个类、40多个国家、50多种文字，这些国家主要有美国、英国、荷兰、德国、俄罗斯、法国、日本、加拿大等，也收录一定数量的中国刊物。</p>
<h3 id="32-istp">3.2 ISTP</h3>
<p>ISTP 是Index to Scientific &amp; Technical Proceedings的简称，中文名字为《科技会议录索引》，创刊于1978年，由美国科学情报研究所出版。该会议索引收录生命科学、物理化学、农业生物和环境科学、工程技术、管理信息、教育发展、社科人文和应用科学等学科的会议文献，包括一般性会议、座谈会、研究会、讨论会、发表会等。ISTP与SCI的主要区别就是SCI是对期刊的索引，而ISTP是对会议的索引。</p>
<p>ISTP后来已演变成为<strong>CPCI</strong>， Conference Proceedings Citation Index的简称，科技会议录索引。美国科学情报报研究所(ISI)基于Web of Science的检索平台，将Conference Proceedings Citation Index - Science（科技会议录索引，简称CPCI-S）和Conference Proceedings Citation Index - Social Science &amp; Humanities（社会科学与人文会议录索引，简称CPCI-SSH）两大会议录索引集成为ISI Proceedings，两大会议录共用一个检索平台Web of Science Proceedings（简称：WOSP）</p>
<p>Thomson Reuters公司1992年收购了ISI，SCI、SSCI、ISTP全部归属其名下，2008年这些数据库一同整合进Web of Science，目前统一从该数据库搜索。2016年Thomson Reuters分拆了其知识产权和科学部门，成立了一家单独的公司，并出售给了Onex Corporation 和 Baring Private Equity，这家公司就是Clarivate Analytics，目前运营着包括Web of Science和Endnote在内的许多订阅式业务。</p>
<h3 id="33-ei">3.3 EI</h3>
<p>EI，The Engineering Index，《工程索引》，创刊于1884年，是美国工程信息公司（Engineering information Inc.）出版的著名工程技术类综合性检索工具。EI每月出版1期，文摘1.3万至1.4万条；每期附有主题索引与作者索引；每年还另外出版年卷本和年度索引，年度索引还增加了作者单位索引。收录文献几乎涉及工程技术各个领域。例如：动力、电工、电子、自动控制、矿冶、金属工艺、机械制造、管理、土建、水利、教育工程等。它具有综合性强、资料来源广、地理覆盖面广、报道量大、报道质量高、权威性强等特点。</p>
<p>Engineering information公司则于1998年被Elsevier收购，现如今依然通过Engineering Village平台检索，只是如今的EI仅指 EI Compendex 数据库，搜索时应当注意，Engineering Index这个词当前在Wikipedia也重定向到了EI Compendex。</p>
<h2 id="4-sci分区">4. SCI分区</h2>
<p>目前，根据JCR分区表对SCI论文进行评价的模式已被国内部分高校和科研机构采纳，因为它有利于鼓励科研工作者向本学科的高级区域投稿。国内主流参考的SCI分区依据主要有中科院JCR分区表以及汤森路透JCR的Journal Ranking分区两种。其中，中科院期刊分区表则被更多的机构采纳以作为科研评价的指标。</p>
<h3 id="中科院jcr分区">中科院JCR分区</h3>
<p>由于不同学科之间的SCI期刊很难进行比较和评价，中国科学院国家科学图书馆世界科学前沿分析中心（原中国科学院文献情报中心），对目前SCI核心库加上扩展库期刊的影响力等因素，以年度和学科为单位，对SCI期刊进行4个等级的划分。一般而言，发表在1区和2区的SCI论文，通常被认为是该学科领域的比较重要的成果。</p>
<p>中科院JCR分区表对所有期刊的学科划分作出如下规定：</p>
<ul>
<li>
<p>**大类学科：**医学、生物、农林科学、环境科学与生态学、化学、工程技术、数学、物理、地学、地学天文、社会科学、管理科学及综合性期刊，共13个大类。</p>
</li>
<li>
<p>**小类学科：**即JCR学科分类体系Journal Ranking确定的176个学科领域。</p>
</li>
</ul>
<p>需要注意的是，一本期刊只可属于一个大类学科，但是一本期刊却可以属于多个不同的小类学科。例如期刊<a href="https://www.letpub.com.cn/index.php?journalid=209&amp;page=journalapp&amp;view=detail" target="_blank" rel="noopener noreffer">Advanced Materials</a>，只属于“<strong>工程技术</strong>”的大类学科，但具体可进一步细分为5个小类学科。</p>
<p></p>
<h3 id="分区方法">分区方法</h3>
<p>中科院期刊分区依据也是基于一个期刊的IF，但是采用的是<strong>三年平均IF</strong>，优点是减少了有些期刊IF逐年波动较大带来的不稳定因素。</p>
<p>具体方法：根据13个大类学科，分别将各大类的SCI期刊由3年平均IF划分为1区（最高区）、2区、3区和4区四个等级。中科院分区的1区到4区的期刊数量不等，呈金字塔状分布。前5%为该类1区、6%～20% 为2区、21%～50%为3区，其余为4区。</p>
<p>中科院分区表的大类分区中还会遴选出一些优秀的Top期刊：1区期刊直接划入Top范围内；2区中2年总被引频次指标位于前10%的期刊也归入Top期刊集合。</p>
<h3 id="两种jcr分区的比较">两种JCR分区的比较</h3>
<ul>
<li>
<p>学科划分不同：汤森路透JCR的Journal Ranking没有设置大类学科，只分为176个具体学科，也就是中科院分区表中所指的小类学科。</p>
</li>
<li>
<p>分区方法不同：Journal Ranking以当年的IF为基础，每个学科分类按照期刊的当年的IF高低，平均分为Q1、Q2、Q3和Q4四个区，Q表示Quartile in Category。汤森路透分区中期刊的数量是均匀分为四个部分，而中科院分区表四个区呈金字塔型分布，缺点是一区期刊数太少。</p>
</li>
<li>
<p>合并/更名期刊的处理方式不同：中科院分区表是基于JCR的数据，但对于JCR中期刊刊名更名/合并的情况进行数据规范处理。对于变更刊名的期刊，JCR会保留两个刊名，会计算两个IF。中科院分区表会将变更前期刊数据合并到变更后的期刊，且重新计算IF，只保留变更后刊名和ISSN。</p>
</li>
</ul>
<p></p>
<h3 id="查询方法">查询方法</h3>
<p>中科院分区可使用LetPub查询： <a href="http://www.letpub.com.cn/index.php?page=journalapp">http://www.letpub.com.cn/index.php?page=journalapp</a></p>
<p>JCR分区在Web of Science的搜索结果中任意选取一篇文章点看查看细节，点击<code>查看期刊影响力</code>可以看到结果</p>
<p></p>
<h2 id="5--会议分级">5.  会议分级</h2>
<p>将学术会议分为A、B、C几个等级，是为了区分它们的整体论文水平及影响力。就像大学的排名一样，下面是参考，国内基本使用的是CCF(中国计算机学会)的等级划分，顺便还是要说一句，下面的分级其实也包括期刊，但期刊我们一般以JCR为准，因此在这里不考虑。</p>
<ul>
<li>中国计算机学会的推荐： <a href="https://www.ccf.org.cn/xspj/gyml/">https://www.ccf.org.cn/xspj/gyml/</a></li>
<li>澳大利亚CORE排名： <a href="http://www.core.edu.au/conference-portal">http://www.core.edu.au/conference-portal</a></li>
</ul>
<h2 id="6-核心期刊">6. 核心期刊</h2>
<p>核心期刊是国内中文期刊的一种统计，通常是一些质量比较高的中文刊物，目前，国内期刊有很多种，比如“北大核心”、“南大核心”等，但各科研单位对核心的认定存在差别，下面对一些常见的核心作介绍</p>
<p>北大核心，全称北京大学图书馆“中文核心期刊”，是由北京大学图书馆及北京十几所高校图书馆众多期刊工作者及相关单位专家参加的研究项目，项目研究成果以印刷型图书的形式出版，第一版是1992年，最新一版是2017年的第八版。</p>
<p>南大核心，全称南京大学“中文社会科学引文索引（CSSCI）来源期刊”，南京大学中国社会科学研究评价中心制作，是国家、教育部重点课题攻关项目， 通过对全国所有符合两月以下出版及非一刊号多版的人文社会科学各学科学术性期刊进行他引影响因子分析，结果中最靠前的刊物，就是南大核心来源期刊。</p>
<ul>
<li><a href="http://kyc.blcu.edu.cn/module/download/downfile.jsp?classid=0&amp;filename=37af2a2170e5456e867c33965846c5cf.pdf" target="_blank" rel="noopener noreffer">CSSCI （2019-2020）来源期刊目录.pdf</a></li>
<li><a href="http://kyc.blcu.edu.cn/module/download/downfile.jsp?classid=0&amp;filename=aaa77412f7b548e58c198f1afb5c71ec.pdf" target="_blank" rel="noopener noreffer">CSSCI （2019-2020）扩展版目录.pdf</a></li>
</ul>
<p>统计源核心，也称科技核心，全称“中国科技论文统计源期刊”或“中国科技核心期刊”，由中国科技信息研究所每年通过《中国科技期刊引证报告》发布，</p>
<p>此外还有中国社会科学院文献信息中心发布的“中国人文社会科学核心期刊”和中国科学院文献情报中心发布的“中国科学引文数据库(CSCD)来源期刊”</p>
<h2 id="7-总结">7. 总结</h2>
<h3 id="71-期刊">7.1 期刊</h3>
<p>SCI的期刊索引目录以论文形式发布，下载地址为</p>
<ul>
<li><a href="https://www.researchgate.net/publication/321686910_SCI_Science_Citation_Indexed_Journal_List">https://www.researchgate.net/publication/321686910_SCI_Science_Citation_Indexed_Journal_List</a></li>
</ul>
<p>但查找多有不便，因此以中科院JCR为准，从LetPub查看期刊列表，选择大类为工程技术，小类为计算机的，链接如下：</p>
<ul>
<li><a href="http://www.letpub.com.cn/index.php?page=journalapp&amp;view=search">http://www.letpub.com.cn/index.php?page=journalapp&amp;view=search</a></li>
</ul>
<p>Engineering Village现归爱思唯尔所有，因此EI收录的期刊列表从Elsevier网址下载查看，其中将中文期刊单独列了一个表，同时也包含会议列表，便于查看</p>
<ul>
<li><a href="https://www.elsevier.com/solutions/engineering-village/content">https://www.elsevier.com/solutions/engineering-village/content</a></li>
</ul>
<p>北大核心以出版物形式出版，只能到图书馆查看，也可以在网上寻找，但不保证准确性</p>
<h3 id="72-会议">7.2 会议</h3>
<p>会议以CCF推荐会议列表，CPCI-S会议列表，和EI会议列表为准，但单纯查看列表无法获得更多有效信息，需要有一个网址可以查看即将召开的会议</p>
<ul>
<li>SCIEI Upcoming conferences： <a href="http://sciei.org/list-32-1.html">http://sciei.org/list-32-1.html</a></li>
<li>中国学术会议网： <a href="http://conf.cnki.net/">http://conf.cnki.net/</a></li>
<li>中科院国际会议服务平台： <a href="http://csp.escience.cn/dct/page/1">http://csp.escience.cn/dct/page/1</a></li>
<li>world conference alerts： <a href="https://www.worldconferencealerts.com/">https://www.worldconferencealerts.com/</a></li>
</ul>
<p>发布会议征稿通知的网站</p>
<ul>
<li><a href="http://www.wikicfp.com/cfp/home">http://www.wikicfp.com/cfp/home</a></li>
</ul>
<p>关于区块链的会议，上篇文章统计了已发表的区块链论文大多位于哪些会议上，这里根据这一会议列表，详细查看下一年它们的举办时间及征稿信息</p>
<h3 id="73-基金">7.3 基金</h3>
<p>从<a href="http://www.letpub.com.cn/index.php?page=grant" target="_blank" rel="noopener noreffer">LetPub</a>查询国家自然科学基金项目，获得所属学部、学科分类和项目类型，然后再按照这些信息从<a href="http://output.nsfc.gov.cn/" target="_blank" rel="noopener noreffer">科技成果信息系统</a>或者<a href="https://isisn.nsfc.gov.cn/egrantweb/" target="_blank" rel="noopener noreffer">科学基金网络信息系统</a>查询项目具体信息。</p>
<p>需要注意地一点是，无论是Letpub还是自然科学基金官网，都无法查看项目摘要，据说只有结题项目才会公布更详细地信息&hellip;</p>
<h2 id="参考文献">参考文献</h2>
<p>[1] 国际核心索引检索中心, 四大检索系统-SCI-ISTP检索-EI检索-ISR索引, 2012.04.27,  <a href="http://www.ei-istp.com/New_93.html">http://www.ei-istp.com/New_93.html</a></p>
<p>[2] CSDN, 学术期刊与会议的索引和分级, 2014.01.16,  <a href="https://blog.shengbin.me/posts/indexing-and-ranking-of-academic-journals-and-conferences">https://blog.shengbin.me/posts/indexing-and-ranking-of-academic-journals-and-conferences</a></p>
<p>[3] 百度文库, 什么是EI、SCI、收录、检索、出版商、全文收录，2018.07.02， <a href="https://wenku.baidu.com/view/b7ec3fafdd3383c4bb4cd295.html">https://wenku.baidu.com/view/b7ec3fafdd3383c4bb4cd295.html</a></p>
<p>[4] LetPub, 最新JCR期刊IF及分区情况(中科院SCI期刊分区表),  <a href="https://www.letpub.com.cn/index.php?page=2012-sci-13-top">https://www.letpub.com.cn/index.php?page=2012-sci-13-top</a></p>
<p>[5] 虎嗅, 学术出版为什么成了一门利润惊人的生意，2019.04.16,  <a href="https://www.huxiu.com/article/294575.html">https://www.huxiu.com/article/294575.html</a></p>
<p>[6] 百度文库, 什么是核心期刊，核心期刊有几种, 2018.05.22,  <a href="https://wenku.baidu.com/view/6ce3478d0342a8956bec0975f46527d3250ca612.html">https://wenku.baidu.com/view/6ce3478d0342a8956bec0975f46527d3250ca612.html</a></p>
]]></description></item></channel></rss>