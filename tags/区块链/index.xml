<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>区块链 - 标签 - Shuzang's Blog</title><link>https://shuzang.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/</link><description>区块链 - 标签 - Shuzang's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>lylw1996@qq.com (shuzang)</managingEditor><webMaster>lylw1996@qq.com (shuzang)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 04 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://shuzang.github.io/tags/%E5%8C%BA%E5%9D%97%E9%93%BE/" rel="self" type="application/rss+xml"/><item><title>交易池底层实现</title><link>https://shuzang.github.io/transaction-and-txpool/</link><pubDate>Fri, 04 Sep 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://shuzang.github.io/transaction-and-txpool/</guid><description><![CDATA[<p>起源于老师提出的一个问题：区块链是如何处理同时发起的多个请求的。想了想觉得核心是交易池机制，因此准备看一下交易池的原理和实现。</p>
<p>针对这个问题其实我们要找以下几个问题的答案：</p>
<ol>
<li>用户发起的交易请求（不论以何种方式）是如何转变为实际的交易的；</li>
<li>产生的交易如果不能被及时处理，是如何进入交易池的；</li>
<li>本地产生的交易和从网络中接收到的交易进入交易池是否有区别；</li>
<li>交易池的基本数据结构是怎么样的（优先队列？）</li>
<li>从交易池中提取交易进行打包时顺序是怎么样的（调度算法）</li>
</ol>
<p>入手主要是通过登链社区的 <a href="https://learnblockchain.cn/2019/06/03/eth-txpool/" target="_blank" rel="noopener noreffer">以太坊交易流程及交易池 Txpool 分析</a> 这篇文章，通过它快速找到了源码中的相关函数，因为主要使用的是 Quorum，所以看的是 Quorum 的源码。</p>
<p>注：网络中很多文章提到内存池，指的也是txpool</p>
<h2 id="1-交易形成">1. 交易形成</h2>
<p>我们的交易请求最终会赋值到 SendTxArgs 结构体的一个实例中</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">SendTxArgs</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">PrivateTxArgs</span> <span class="c1">// Quorum
</span><span class="c1"></span>
	<span class="nx">From</span>     <span class="nx">common</span><span class="p">.</span><span class="nx">Address</span>  <span class="s">`json:&#34;from&#34;`</span>
	<span class="nx">To</span>       <span class="o">*</span><span class="nx">common</span><span class="p">.</span><span class="nx">Address</span> <span class="s">`json:&#34;to&#34;`</span>
	<span class="nx">Gas</span>      <span class="o">*</span><span class="nx">hexutil</span><span class="p">.</span><span class="nx">Uint64</span> <span class="s">`json:&#34;gas&#34;`</span>
	<span class="nx">GasPrice</span> <span class="o">*</span><span class="nx">hexutil</span><span class="p">.</span><span class="nx">Big</span>    <span class="s">`json:&#34;gasPrice&#34;`</span>
	<span class="nx">Value</span>    <span class="o">*</span><span class="nx">hexutil</span><span class="p">.</span><span class="nx">Big</span>    <span class="s">`json:&#34;value&#34;`</span>
	<span class="nx">Nonce</span>    <span class="o">*</span><span class="nx">hexutil</span><span class="p">.</span><span class="nx">Uint64</span> <span class="s">`json:&#34;nonce&#34;`</span>
	<span class="nx">Data</span>  <span class="o">*</span><span class="nx">hexutil</span><span class="p">.</span><span class="nx">Bytes</span> <span class="s">`json:&#34;data&#34;`</span>
	<span class="nx">Input</span> <span class="o">*</span><span class="nx">hexutil</span><span class="p">.</span><span class="nx">Bytes</span> <span class="s">`json:&#34;input&#34;`</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这个实例被传递给 <code>quorum/internal/ethapi/api.go</code> 的 <code>SendTransaction</code> 函数用来创建一个交易。创建交易的过程如下</p>
<ol>
<li>根据 From 字段找到当前账户</li>
<li>设置交易默认参数</li>
<li>对交易进行序列化，变为可存储和传输的形式。</li>
<li>根据 To 字段决定是创建部署合约交易还是调用合约交易</li>
<li>对交易进行 RLP 编码并根据之前获得的账户密钥对交易进行签名</li>
<li>提交交易到交易池</li>
</ol>
<p>序列化主要处理 SendTxArgs 结构中的 Data 和 Input 字段，Data 字段主要用于向前兼容，应尽量使用 Input 字段。当部署合约的时候，Input 是合约代码，当发送交易的时候，Input 是交易的内容。</p>
<h2 id="2-交易添加到交易池">2. 交易添加到交易池</h2>
<p>SendTransaction 最后调用 <code>SubmitTransaction</code> 函数将交易提交到交易池，不过，更底层的调用是 <code>quourm/core/tx_pool.go</code> 的 AddLocals 函数，这里还应该提到，来自网络的交易会调用 AddRemotes 函数。</p>
<p>需要注意的是，调用这两个函数之前都应该验证交易的有效性。同时，这两个函数底层都调用 addTxs 函数，最终的调用是 add 函数。不过在介绍 add 函数前先了解一下交易池的结构。</p>
<p>交易池是一个非常复杂的结构体，但最核心的字段只有两个 <code>pending</code> 和 <code>queue</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">type</span> <span class="nx">TxPool</span> <span class="kd">struct</span> <span class="p">{</span>
    <span class="nx">pending</span> <span class="kd">map</span><span class="p">[</span><span class="nx">common</span><span class="p">.</span><span class="nx">Address</span><span class="p">]</span><span class="o">*</span><span class="nx">txList</span>   <span class="c1">// All currently processable transactions
</span><span class="c1"></span>	<span class="nx">queue</span>   <span class="kd">map</span><span class="p">[</span><span class="nx">common</span><span class="p">.</span><span class="nx">Address</span><span class="p">]</span><span class="o">*</span><span class="nx">txList</span>   <span class="c1">// Queued but non-processable transactions
</span><span class="c1"></span><span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p><a href="https://github.com/ConsenSys/quorum/blob/d51931173bde132243a87e7a2adadef4abe58470/core/tx_pool.go#L601" target="_blank" rel="noopener noreffer">add</a> 函数比较复杂，但添加交易到交易池的逻辑很简单</p>
<ol>
<li>验证交易的有效性</li>
<li>如果 nonce 已存在，且 pending 中旧交易的 price 没有新交易高，会被新交易替换掉</li>
<li>如果 nonce 不存在，不可以替换 pending 中的任何交易，此时将新的交易插入 queue 的末尾</li>
</ol>
<p>注：交易中的 nonce 指的是 from 账户发出交易的次数, 从0开始递增，同一账户的交易会被依次确认，所以同一个 nonce 代表是同一个交易，会优先选择 price 更高的交易。</p>
<h2 id="3-清理交易池">3. 清理交易池</h2>
<p>交易池是完全存在内存中的，因此有大小限制，每当超过一定的阈值就需要清理。实际实现时，pending 的缓冲区容量默认为 4096，queue 的缓冲区容量默认为 1024。</p>
<p>清理的时机是交易池满的时候，清理的原则是价格较低的最先清理</p>
<p>调用清理函数依然是在 add 函数中</p>
<h2 id="4-重构交易池">4. 重构交易池</h2>
<p>作为一个分布式系统，总是会出现一种情况：本地节点已经挑选好最优的交易，并准备好广播给整个网络，结果这个时候矿工已经打包好了一个区块，这时候本地节点的区块头就是旧的了，筛选好的交易也已经可能被打包，此时再广播这些交易就没了意义。</p>
<p>为了避免上述情况的发生，本地节点要随时监听是否有新区块产生，当监听到新区块产生这个事件后，无论是本地节点领先，还是网络上其它节点领先，都回退一个区块号，</p>
<p></p>
<p>本地节点回退时，把撤销的交易保持到 discarded 切片中，网络上其他节点的撤销交易保存在 <code>included</code> 切片中。</p>
<p>当区块号一致的时候，还需要进一步的比较区块的 <code>Hash</code> 来进一步确认区块里面的交易是否一致，如果不一致一致回退到区块 Hash 为止，回退撤销的交易依旧保存在 <code>discarded</code> 和 <code>included</code> 切片中。</p>
<p>等完全确认本地和网络的链没有分叉的时候，就需要比较 discarded 和 included 里面的交易，因为网络上区块的生成优先级高于本地，所以需要剔除 <code>discarded</code> 中 <code>inclueded</code> 的交易，生成 <code>reinject</code> 切片，剔除完以后还需要对 <code>TXpool</code> 按照网络新生成区块的信息设置世界状态等信息，设置完以后，重新将 <code>reinject</code> 加入 <code>TXpool</code>，加入以后在进行验证清理等流程。</p>
<h2 id="5-问题回答">5. 问题回答</h2>
<p>回答文章开头提出的几个问题</p>
<ol>
<li>
<p>用户发起的交易请求（不论以何种方式）是如何转变为实际的交易的；</p>
<p>所有与交易请求相关的参数被赋值到一个结构体中，然后进行序列化转变为可存储和传输的形式，最后生成交易并进行签名</p>
</li>
<li>
<p>产生的交易如果不能被及时处理，是如何进入交易池的</p>
<p>最终是调用一个 add 函数，添加到了一个队列里</p>
</li>
<li>
<p>本地产生的交易和从网络中接收到的交易进入交易池是否有区别；</p>
<p>没有区别，底层都是调用 add 函数</p>
</li>
<li>
<p>交易池的基本数据结构是怎么样的（优先队列？）</p>
<p>交易池是一个结构体，核心是 pending 和 queue 两个 map，map 的键是一个地址，值是一个交易链表形成的队列</p>
</li>
<li>
<p>从交易池中提取交易进行打包时顺序是怎么样的（调度算法）</p>
<p>price 越高优先级越大</p>
</li>
</ol>
<p>我们可以理解为区块链底层利用交易池对并发产生的请求做了异步化，交易产生的时刻和交易被打包的时刻是随机的。</p>
<p>这里面我们可以视作有一个排队论的问题，相关度比较高的论文有两篇</p>
<p>[1] J. Li, Y. Yuan, S. Wang and F. Wang, &ldquo;<a href="https://ieeexplore.ieee.org/document/8500403" target="_blank" rel="noopener noreffer">Transaction Queuing Game in Bitcoin BlockChain</a>,&rdquo; <em>2018 IEEE Intelligent Vehicles Symposium (IV)</em>, Changshu, 2018, pp. 114-119, doi: 10.1109/IVS.2018.8500403.</p>
<p>[2] Memon RA, Li JP, Ahmed J. <a href="https://www.mdpi.com/2079-9292/8/2/234#cite" target="_blank" rel="noopener noreffer">Simulation Model for Blockchain Systems Using Queuing Theory</a>. <em>Electronics</em>. 2019; 8(2):234.</p>
<p>后注1：在实现 TXpool 的时候为了保证数据的一致性会使用大量的锁</p>
<p>后注2：总结以下可以发现交易池中交易的顺序与以下几方面有关</p>
<ol>
<li>交易费</li>
<li>交易哈希（重构交易池时区块相同会进行比较）</li>
<li>在交易池中的时间（时间过长可能会被清除）</li>
</ol>
<h2 id="6-时间">6. 时间</h2>
<p>更全面的描述可以参考 <a href="https://learnblockchain.cn/books/geth/part2/txpool.html" target="_blank" rel="noopener noreffer">以太坊技术与实现：交易池</a></p>
<p>我们关心发起交易的时间和智能合约执行并返回结果的时间是否有区别</p>]]></description></item><item><title>面对疫情区块链可以做些什么</title><link>https://shuzang.github.io/what-can-blockchain-do-during-the-covid-19/</link><pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate><author>作者</author><guid>https://shuzang.github.io/what-can-blockchain-do-during-the-covid-19/</guid><description><![CDATA[<p>这场年初爆发的疫情在国内控制住以后，反而开始在全世界其它国家蔓延，如大数据、5G等技术均在当前这场疫情中产生了自己的作用，区块链能做些什么，可以引起我们的思考。本篇文章总结网上提到的和自己想到的一些方面，并作一些思考。</p>
<h2 id="1-疫情预警">1. 疫情预警</h2>
<p>据有关报道显示，新型冠状病毒在2019年12月其实就已经有迹可循了，但直到2020年1月中下旬才正式有公告通知，对于这种重要信息的滞后性，严重影响了相关病例的治疗和有关部门的防控工作。</p>
<p>我国早在2008年就开始建立了国家传染病自动预警机制，采用的是自下而上的数据回馈及分析方式，在上报过程中会经过多层核实，在面对突然爆发的传染类疾病时，会有严重的滞后性。同时，医院在保护病人隐私的前提下，难以做到完全的共享数据，对疾病的评估也会有一定的难度。</p>
<p>**区块链能解决的就是如何做到数据的同步更新，而不完全依赖于自下而上的现有预警机制，**利用目前已有的公共卫生数据交换平台作为每级数据的交换节点，形成实时自动化的数据交换机制。将医疗数据的上报下沉到各个环节，医疗机构上报初次传染病历；再由相关机构进行核实补充；最后由国家预警部门根据大数据预警，这就解决了多重审核的问题。同时构建出一个跨省、市、区等的医疗数据防疫链，上传的数据自动同步实时更新，也就解决了医院之间的数据孤岛问题。相较而言，疫情预警将会更快捷准时。</p>
<p>下面是来源于链上观的一份关于区块链+传染病自动预警系统优化升级的解决方案：</p>
<ol>
<li>以省级为单位，由当地疾控中心主导建立一条“疾控联盟链”，首批成员是当地省、市、区、县级的大小医院。疾控中心应设定一套奖惩制度补贴各个医院，鼓励医院积极地提交各类传染病性质的病例，包括已有传染病例和未知传染病例及疑似传染病例等。</li>
<li>每一次新数据提交后都会向全联盟链的各大医院发送广播，各个医院都设定专人负责审核上链。这么做可以对上链数据信息进行跨医院交叉验证。这样一来，医生不必担心组织体系内的上报压力，只负责呈现客观的临床数据，确保了上报数据的及时性和完整性。而且交叉验证过程需要由2/3以上的医院共同确认，极大地确保了数据的真实性。</li>
<li>一旦一项新数据上链成功后，就会被加以时间戳，之后新产生的上链数据，只要病例相似度高达95%以上（阀值仅供参考）就会自动归类成链。如果一个新病例上链后成为了孤块，可视为临床病例尚未形成较大传染性，仅做一定预防和监控即可。如果一个新病例上链后，很快就形成了一条数据链，可设定一个阈值，达到一定数量后，疾控中心可协调当地政府力量进行匹配的防控举措（听数据的调度）。</li>
<li>同理在地方联盟链之上，还会有一个以省级疾控中心为联盟链主体单位的国家级的疾控联盟链。地区在采集到异常数据并进行相应预防措施之后的同时应将当地的传染数据情况统一汇报给国家级疾控中心，并在链上进行广播，以便其他各省市地区能及早高度重视并做好预防防护工作。</li>
<li>初期疾控链上链上的数据初期只对联盟链的成员开放，一旦达到一定的传播阈值之后再接入权威媒体进行透明化披露展示，让公众享有充分的知情权，避免不必要的猜忌和恐慌情绪滋生。</li>
</ol>
<p>疫情初期的问题是确诊标准问题，本来以为这个问题不解决数据无法上链，区块链无法起到太大作用，但这套系统中直接将病例数据上链，自动判断相似度从而归类疾病，最后触发预警系统，很好的解决了现有问题。但和其它区块链项目相同，现在面临的难题依然是基础设施建设问题，没有完善的基础设施，各医院不参与，就无法建成这套系统。</p>
<h2 id="2-谣言防治">2. 谣言防治</h2>
<p>在疫情警报拉响之后，关于疫情状况就是全国人民最关心的问题了。在近一个月的时间里，我们能够在网络中看到各种各样关于疫情的消息，一旦某个现像激发了群众的慷慨激昂后往往就会爆出其实是谣言，这种状况对于控制舆论有很大的不利影响，那么我们对于疫情的知悉究竟怎样才不会落入散发谣言中呢？</p>
<p>关于普遍提到的流动人员追踪问题，因为涉及太多的隐私问题，我认为很难得到民众的认可，如果一个人的身份信息，所有出行、交往记录全部记载在区块链上，相当于将一个人完全公开在了网络上，而且这些数据还不可撤销，将会永久存在。即使这种作法确实对疫情防控有意义，但很难被大家接受，没有人希望自己的一举一动都被记录并被所有人随意阅览。</p>
<p>另一个方面是感染人数等疫情信息的公开，民众对疫情真实进度不了解、对医院公布的数据不信任催生了大量的网络谣言。目前，国务院面向民众信息公开接受瞒报举报，微信也开了谣言识别功能，官方媒体每天都对各种谣言进行甄别和公示。首先可以确定的是，如果使用区块链，可以防止医院主管领导等因为职位绩效，或者舆论压力而隐瞒或者更改统计数据，只要信息上链和审核足够及时，由于区块链的分布式特性，消息就能以足够快的速度散发出去，切断谣言的传播。但这建立在基于区块链的疫情公示系统拥有足够多受众的情况，因为很多人轻易的就能相信微信群里各种难辨真假的消息、科普和视频。</p>
<p>另外一个优点是上传到区块链平台的数据被权威节点确认后，可以一路追溯，追踪到消息的原始发布者，奖惩机制可以依赖这点起作用。</p>
<p>目前，山东、青岛、浙江、济南等多个省市的官方机构以及学术机构已陆续上线了基于区块链的防控平台，可以对疫情的上报信息实施可溯源的上链管理。</p>
<p></p>
<h2 id="3-公益捐赠">3. 公益捐赠</h2>
<p>武汉红十字会的情况使大家对现有公益体系产生了严重怀疑，如何使捐款及物资的流动透明，区块链能起到一定的作用。在这里基础设施依然非常重要，但我们不再提及，下面的描述都是在假设区块链已经铺设好正常运行之后可以达成什么样的目标。</p>
<p>万向区块链有一个慈善平台<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>是针对这种业务场景的，在疫情之下，也做了一场线上直播<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>来介绍他们的系统。</p>
<p>捐款及物资被用到哪里，什么时候用出去，用出去又经历了多少环节才用到需要帮助的人，每个环节上被损耗了多少，这些都是需要公开透明的信息。对捐赠人的服务中，由于各类文件有不可篡改的时间戳，此外如果捐赠人先后出具了多份意愿书，记录意愿的先后顺序，也可以避免纠纷的发生。因此区块链在公益捐赠中的核心作用有两个</p>
<ol>
<li>
<p>捐款、物资等捐赠信息的存证。</p>
</li>
<li>
<p>事务管理过程和财产管理、使用情况进行存证，锚定每笔钱和物资的去向。</p>
</li>
</ol>
<p>第二点很重要，需要去跟踪每分钱最终去哪儿了，中间损耗多少，只有用到最终受益人时，才成为可以支出的状态花出去，捐赠人很明确的想知道捐钱没问题，一些示例如</p>
<p></p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="https://mp.weixin.qq.com/s?__biz=MzI3MzYxNDg1Nw==&amp;mid=2247486486&amp;idx=1&amp;sn=2514b0769ecc92f9129300809f6cd042&amp;chksm=eb21dd70dc56546647a28e3e083a785ef4b629cc0fa6b59edc416b507bad55a9754aa0d5711c&amp;scene=21#wechat_redirect" target="_blank" rel="noopener noreffer">万向慈善信托账户管理平台</a> <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p><a href="https://mp.weixin.qq.com/s/RVmmg4iUni6BDNyMfXErgw" target="_blank" rel="noopener noreffer">疫情之下，区块链如何服务于慈善场景</a> <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></description></item><item><title>区块链方向有参考价值的文章收集</title><link>https://shuzang.github.io/articles-about-blockchain/</link><pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://shuzang.github.io/articles-about-blockchain/</guid><description><![CDATA[<p>很多区块链领域极有启发性的文章或者介绍极为详细的文章都很值得保存，以前直接将文章完整的转载过来，但最近发现这种方法占用空间而且毫无意义，因此专门开一篇博客用来收集和介绍这些文章，只记录它们的链接并作简单介绍。逆序排列，最新收集的文章在最前，同样，越往前序号越大。</p>
<h2 id="共识协议">共识协议</h2>
<p>时间：2020.01.06</p>
<p>文章链接：<a href="https://blockchain.intellectsoft.net/blog/consensus-protocols-that-meet-different-business-demands/" target="_blank" rel="noopener noreffer">Consensus Protocols That Meet Different Business Demands</a></p>
<p>一共两篇，详细介绍了常见的各种共识协议。</p>
<h2 id="区块链交易打包过程">区块链交易打包过程</h2>
<p>时间：2019.04.03</p>
<p>文章链接(唐霜的个人博客)：<a href="https://www.tangshuang.net/4097.html" target="_blank" rel="noopener noreffer">区块链中，交易被如何打包进区块</a></p>
<p>通过这篇文章要弄清楚的问题是：矿工优先打包交易费高的交易，会不会遗漏某些区块？</p>
<p>大部分材料都详细分析了挖矿过程，介绍了区块是如何产生的。然而，区块的产生并不是区块链的最终目的，保存交易信息才是区块链的最终目的。所以，更重要的一点是要理解，交易信息是如何被打包进区块链的。</p>
<h2 id="hyperledger搭建">Hyperledger搭建</h2>
<p>时间：2018.12.25</p>
<p>文章转自IBM，地址为：<a href="https://www.ibm.com/developerworks/cloud/library/cl-model-test-your-blockchain-network-with-hyperledger-composer-playground/index.html" target="_blank" rel="noopener noreffer">英文版</a> ,<a href="https://www.ibm.com/developerworks/cn/cloud/library/cl-model-test-your-blockchain-network-with-hyperledger-composer-playground/index.html?ca=drs-" target="_blank" rel="noopener noreffer">中文版</a></p>
<p>Introduction:</p>
<p>整个教程分三部分， 第1部分学习如何在 Hyperledger Composer Playground 的本地版本中建模并测试一个简单的业务网络，第 2 部分学习如何改进和部署区块链网络，第 3 部分学习如何在计算机上安装 Hyperledger Fabric，将业务网络部署到本地实例以及与示例网络区块链应用交互。</p>
<h2 id="比特币脚本">比特币脚本</h2>
<p>时间：2019.11.27</p>
<p>文章链接(来自CSDN)：<a href="https://blog.csdn.net/pony_maggie/article/details/73656597" target="_blank" rel="noopener noreffer">谈谈自己对比特币脚本的理解</a></p>
<p>Introduction：</p>
<p>比特币脚本存在的意义是自动化的验证交易的合法性，分为锁定脚本和解锁脚本两种。假设Alice要向 bob支付0.015比特币, Alice会用到一个UTXO(假设是单输入，单输出)，这个UTXO带有一个<strong>锁定脚本</strong>，为交易设置“障碍”。 bob如果要接收这笔比特币(另一种说法是bob可以引用该笔输出)，就要给出一个<strong>解锁脚本</strong>,然后解锁脚本和锁定脚本组合后执行的结果为真才能确认交易有效。  脚本是简单的堆栈语言，是非图灵完备的，这篇文章详细解释了锁定脚本与解锁脚本的运行机理。</p>
<h2 id="日蚀攻击">日蚀攻击</h2>
<p>时间：2019.04.08</p>
<p>文章链接(来自知乎)：<a href="https://zhuanlan.zhihu.com/p/42446193" target="_blank" rel="noopener noreffer">比特币点对点网络中的日蚀攻击</a></p>
<p>Introduction：</p>
<p>这篇文章是对同名论文<a href="https://www.usenix.org/system/files/conference/usenixsecurity15/sec15-paper-heilman.pdf" target="_blank" rel="noopener noreffer">Eclipse Attacks on Bitcoin&rsquo;s Peer-to-Peer Network</a>原理和思想的解释，实际上针对的还不是原论文，是论文作者的讲解视频。</p>
<h2 id="iot数据">IoT数据</h2>
<p>时间：2019.04.10</p>
<p>文章链接(来自IBM)：<a href="https://www.ibm.com/developerworks/cn/iot/library/iot-lp301-iot-manage-data/index.html" target="_blank" rel="noopener noreffer">了解IoT数据</a></p>
<p>Introduction：</p>
<p>随着越来越多的事物连接到物联网，与 IoT 设备相关联的数据量及其生成的数据量（包括设备状态、元数据和传感器读数）呈指数级增长。如果 IoT 解决方案要实现价值，那么管理和了解这些数据至关重要。这篇文章介绍一些处理 IoT 数据的方法，包括存储数据、处理和分析数据以及应用规则。讲解的相当深入。</p>
<h2 id="区块链改善学术界">区块链改善学术界</h2>
<p>时间：2019.02.26</p>
<p>英文原文(来自medium)：<a href="https://medium.com/@barmstrong/ideas-on-how-to-improve-scientific-research-9e2e56474132" target="_blank" rel="noopener noreffer">Ideas on how to improve scientific research</a></p>
<p>中译文(来自知乎)：<a href="https://zhuanlan.zhihu.com/p/57732457" target="_blank" rel="noopener noreffer">Coinbase CEO：区块链或可改善学术届，科研将变得像编程一样开放</a></p>
<p>Introduction：</p>
<p>科学论文之于人类持续进化的重要性不言而喻，每年，全世界范围有数百万篇论文会被发表，它们代表着人类智慧的最新成果，但其中只有一小部分真正带来了新的产品和服务，人们可真正从中获益。
然而，传统的学术环境在为人类带来创新的同时，也存在着大量的落后特性，我们不禁思考，能否改善学术界的环境，使得人类发展能够变得更快、更开放？
来自区块链独角兽公司Coinbase的首席执行官Brian Armstrong，为我们提供了一些非常棒的想法，我们或许可结合区块链token和市场上已存在的技术，使得学术研究变得像Github那样开放，人人都可参与学术研究和讨论，倘若实现这一想法，学术研究者们将变得不再苦逼，人类文明因此而将更好地发展……</p>
]]></description></item><item><title>Truffle框架安装使用</title><link>https://shuzang.github.io/truffle%E6%A1%86%E6%9E%B6%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</link><pubDate>Wed, 06 Nov 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://shuzang.github.io/truffle%E6%A1%86%E6%9E%B6%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/</guid><description><![CDATA[<p>Truffle和Ganache的安装使用</p>
<h3 id="1-安装truffle">1. 安装Truffle</h3>
<p>在Ubuntu18.04 下安装运行，要求Node.js版本高于v8.9.4</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo apt-get install npm
$ sudo npm install npm@latest -g
$ sudo npm install n -g
$ sudo n lts
</code></pre></td></tr></table>
</div>
</div><p>安装Truffle</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo npm install -g truffle
</code></pre></td></tr></table>
</div>
</div><h3 id="2-创建项目">2. 创建项目</h3>
<p>以<a href="https://www.trufflesuite.com/boxes" target="_blank" rel="noopener noreffer">Truffle Boxes</a>中的<a href="https://www.trufflesuite.com/boxes/metacoin" target="_blank" rel="noopener noreffer">MetaCoin</a>项目为例</p>
<p>首先为 Truffle 项目创建新目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ mkdir MetaCoin <span class="o">&amp;&amp;</span> <span class="nb">cd</span> MetaCoin
</code></pre></td></tr></table>
</div>
</div><p>下载MetaCoin box</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ truffle unbox metacoin

✔ Preparing to download
✔ Downloading
✔ Cleaning up temporary files
✔ Setting up box

Unbox successful. Sweet!

Commands:

  Compile contracts: truffle compile
  Migrate contracts: truffle migrate
  Test contracts:    truffle <span class="nb">test</span>
</code></pre></td></tr></table>
</div>
</div><p>下载完成后的项目目录如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ tree
.
├── contracts
│   ├── ConvertLib.sol
│   ├── MetaCoin.sol
│   └── Migrations.sol
├── LICENSE
├── migrations
│   ├── 1_initial_migration.js
│   └── 2_deploy_contracts.js
├── <span class="nb">test</span>
│   ├── metacoin.js
│   └── TestMetaCoin.sol
└── truffle-config.js

<span class="m">3</span> directories, <span class="m">9</span> files
</code></pre></td></tr></table>
</div>
</div><p><code>contracts</code>是solidity编写的合约存放的文件夹</p>
<ul>
<li><code>MetaCoin.sol</code>创建了一种简单的代币，它引用了<code>ConvertLib.sol</code>合约</li>
<li><code>Migrations.sol</code>是一个单独的合约文件，用来管理所部署合约的状态，每个Truffle项目中都有该文件，而且通常不需要更改</li>
</ul>
<p><code>migrations</code>是部署脚本存放的文件夹</p>
<ul>
<li><code>1_initial_migration.js</code>是<code>Migrations.sol</code>合约的迁移和部署脚本</li>
<li><code>2_deploy_contracts.js</code>是<code>MetaCoin.sol</code>合约的迁移和部署脚本</li>
<li>所有的脚本按文件名开头的序号按顺序执行</li>
</ul>
<p><code>test</code>是测试应用和合约的测试文件存放的目录</p>
<ul>
<li><code>TestMetaCoin.sol</code>是合约形式的测试文件</li>
<li><code>metacoin.js</code>是JS脚本形式的测试文件</li>
<li>两者的功能是一样的，只是使用了不同方式做测试</li>
</ul>
<p><code>truffle.js</code>是Truffle的配置文件，用于配置网络信息和其它项目相关的信息</p>
<h3 id="3-编译">3. 编译</h3>
<p>编译合约</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ truffle compile

Compiling your contracts...
<span class="o">===========================</span>
&gt; Compiling ./contracts/ConvertLib.sol
&gt; Compiling ./contracts/MetaCoin.sol
&gt; Compiling ./contracts/Migrations.sol
&gt; Artifacts written to /home/shuzang/MetaCoin/build/contracts
&gt; Compiled successfully using:
   - solc: 0.5.8+commit.23d335f2.Emscripten.clang
</code></pre></td></tr></table>
</div>
</div><h3 id="4-测试">4. 测试</h3>
<p>在终端中运行合约形式的测试文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ truffle <span class="nb">test</span> ./test/TestMetaCoin.sol

Compiling your contracts...
<span class="o">===========================</span>
&gt; Compiling ./contracts/ConvertLib.sol
&gt; Compiling ./contracts/MetaCoin.sol
&gt; Compiling ./contracts/Migrations.sol
&gt; Compiling ./test/TestMetaCoin.sol



  TestMetaCoin
    ✓ testInitialBalanceUsingDeployedContract <span class="o">(</span>83ms<span class="o">)</span>
    ✓ testInitialBalanceWithNewMetaCoin <span class="o">(</span>76ms<span class="o">)</span>


  <span class="m">2</span> passing <span class="o">(</span>6s<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><p>在终端中运行JS脚本形式的测试文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ truffle <span class="nb">test</span> ./test/metacoin.js

Compiling your contracts...
<span class="o">===========================</span>
&gt; Compiling ./contracts/ConvertLib.sol
&gt; Compiling ./contracts/MetaCoin.sol
&gt; Compiling ./contracts/Migrations.sol



  Contract: MetaCoin
    ✓ should put <span class="m">10000</span> MetaCoin in the first account
    ✓ should call a <span class="k">function</span> that depends on a linked library <span class="o">(</span>60ms<span class="o">)</span>
    ✓ should send coin correctly <span class="o">(</span>154ms<span class="o">)</span>


  <span class="m">3</span> passing <span class="o">(</span>271ms<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="5-与ganache关联使用">5. 与Ganache关联使用</h3>
<p>为了部署合约我们需要连到区块链，Truffle提供这方面的功能，但是目前我们使用Ganache来模拟区块链做部署测试</p>
<p>首先在<a href="https://github.com/trufflesuite/ganache/releases" target="_blank" rel="noopener noreffer">Download</a>页面下载对应操作系统的Ganache软件包，Linux系统下该软件包点击即可启动，无需安装</p>
<p>然后编辑<code>truffle-config.js</code>文件，替换为如下内容，这些配置参数将允许Ganache以默认参数连接</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
  <span class="nx">networks</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">development</span><span class="o">:</span> <span class="p">{</span>
      <span class="nx">host</span><span class="o">:</span> <span class="s2">&#34;127.0.0.1&#34;</span><span class="p">,</span>
      <span class="nx">port</span><span class="o">:</span> <span class="mi">7545</span><span class="p">,</span>
      <span class="nx">network_id</span><span class="o">:</span> <span class="s2">&#34;*&#34;</span>
    <span class="p">}</span>
  <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>保存并关闭文件，打开Ganache</p>
<p></p>
<p>执行迁移命令，将合约部署到Ganache创建的区块链</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ truffle migrate

Compiling your contracts...
<span class="o">===========================</span>
&gt; Everything is up to date, there is nothing to compile.



Starting migrations...
<span class="o">======================</span>
&gt; Network name:    <span class="s1">&#39;development&#39;</span>
&gt; Network id:      <span class="m">5777</span>
&gt; Block gas limit: 0x6691b7


1_initial_migration.js
<span class="o">======================</span>

   Deploying <span class="s1">&#39;Migrations&#39;</span>
   ----------------------
   &gt; transaction hash:    0x58a9f65031802c841183fc99a46d647870a99de5a717e27791f7ea13e9ccd47c
   &gt; Blocks: <span class="m">0</span>            Seconds: <span class="m">0</span>
   &gt; contract address:    0x03A587F157700FBdDff5195F22Eeab32c030424e
   &gt; block number:        <span class="m">1</span>
   &gt; block timestamp:     <span class="m">1573040253</span>
   &gt; account:             0x6c9d11d64bDC226d3d143b228d1019cB187c962d
   &gt; balance:             99.99477214
   &gt; gas used:            <span class="m">261393</span>
   &gt; gas price:           <span class="m">20</span> gwei
   &gt; value sent:          <span class="m">0</span> ETH
   &gt; total cost:          0.00522786 ETH


   &gt; Saving migration to chain.
   &gt; Saving artifacts
   -------------------------------------
   &gt; Total cost:          0.00522786 ETH


2_deploy_contracts.js
<span class="o">=====================</span>

   Deploying <span class="s1">&#39;ConvertLib&#39;</span>
   ----------------------
   &gt; transaction hash:    0x1685578d778d127196ce3b7d915b44e6433049f2a250e4384f836161cba8b75c
   &gt; Blocks: <span class="m">0</span>            Seconds: <span class="m">0</span>
   &gt; contract address:    0x741be30b7E4F5160026A0882f15763E623Fbcd66
   &gt; block number:        <span class="m">3</span>
   &gt; block timestamp:     <span class="m">1573040254</span>
   &gt; account:             0x6c9d11d64bDC226d3d143b228d1019cB187c962d
   &gt; balance:             99.99185922
   &gt; gas used:            <span class="m">103623</span>
   &gt; gas price:           <span class="m">20</span> gwei
   &gt; value sent:          <span class="m">0</span> ETH
   &gt; total cost:          0.00207246 ETH


   Linking
   -------
   * Contract: MetaCoin &lt;--&gt; Library: ConvertLib <span class="o">(</span>at address: 0x741be30b7E4F5160026A0882f15763E623Fbcd66<span class="o">)</span>

   Deploying <span class="s1">&#39;MetaCoin&#39;</span>
   --------------------
   &gt; transaction hash:    0x8800cc6fecf73a8d247fad63d5e739cccbd5e9f8dd350bbb709eb258396b96e4
   &gt; Blocks: <span class="m">0</span>            Seconds: <span class="m">0</span>
   &gt; contract address:    0xBfc5d417c17fc15E837aCA46063F6b5403ad469e
   &gt; block number:        <span class="m">4</span>
   &gt; block timestamp:     <span class="m">1573040254</span>
   &gt; account:             0x6c9d11d64bDC226d3d143b228d1019cB187c962d
   &gt; balance:             99.98509224
   &gt; gas used:            <span class="m">338349</span>
   &gt; gas price:           <span class="m">20</span> gwei
   &gt; value sent:          <span class="m">0</span> ETH
   &gt; total cost:          0.00676698 ETH


   &gt; Saving migration to chain.
   &gt; Saving artifacts
   -------------------------------------
   &gt; Total cost:          0.00883944 ETH


<span class="nv">Summary</span>
<span class="o">=======</span>
&gt; Total deployments:   <span class="m">3</span>
&gt; Final cost:          0.0140673 ETH
</code></pre></td></tr></table>
</div>
</div><p>输出记录中显示了交易ID，部署的合约地址，总花费，实时状态等诸多信息。</p>
<p>在Ganache中点击<code>Transactions</code>按钮可以看到执行的交易的详细信息。</p>
<p>之后，使用Truffle控制台还可以和合约交互</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ truffle console
truffle<span class="o">(</span>development<span class="o">)</span>&gt;
</code></pre></td></tr></table>
</div>
</div><h3 id="6-与合约交互">6. 与合约交互</h3>
<p>truffle v5以后，控制台支持使用<code>async</code>或<code>await</code>函数，以下是一些合约交互的示例</p>
<p>首先部署合约并获取账户地址</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">truffle</span><span class="p">(</span><span class="nx">development</span><span class="p">)</span><span class="o">&gt;</span> <span class="kd">let</span> <span class="nx">instance</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">MetaCoin</span><span class="p">.</span><span class="nx">deployed</span><span class="p">()</span>
<span class="nx">truffle</span><span class="p">(</span><span class="nx">development</span><span class="p">)</span><span class="o">&gt;</span> <span class="kd">let</span> <span class="nx">accounts</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">web3</span><span class="p">.</span><span class="nx">eth</span><span class="p">.</span><span class="nx">getAccounts</span><span class="p">()</span>
</code></pre></td></tr></table>
</div>
</div><p>检查部署合约的账户余额</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">truffle</span><span class="p">(</span><span class="nx">development</span><span class="p">)</span><span class="o">&gt;</span> <span class="kd">let</span> <span class="nx">balance</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">instance</span><span class="p">.</span><span class="nx">getBalance</span><span class="p">(</span><span class="nx">accounts</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="nx">truffle</span><span class="p">(</span><span class="nx">development</span><span class="p">)</span><span class="o">&gt;</span> <span class="nx">balance</span><span class="p">.</span><span class="nx">toNumber</span><span class="p">()</span>
<span class="mi">10000</span>
</code></pre></td></tr></table>
</div>
</div><p>检查余额值多少ether，合约定义1单位余额值2ether</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">truffle</span><span class="p">(</span><span class="nx">development</span><span class="p">)</span><span class="o">&gt;</span> <span class="kd">let</span> <span class="nx">ether</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">instance</span><span class="p">.</span><span class="nx">getBalanceInEth</span><span class="p">(</span><span class="nx">accounts</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="nx">truffle</span><span class="p">(</span><span class="nx">development</span><span class="p">)</span><span class="o">&gt;</span> <span class="nx">ether</span><span class="p">.</span><span class="nx">toNumber</span><span class="p">()</span>
<span class="mi">20000</span>
</code></pre></td></tr></table>
</div>
</div><p>向另一个账户发送货币</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">truffle</span><span class="p">(</span><span class="nx">development</span><span class="p">)</span><span class="o">&gt;</span> <span class="nx">instance</span><span class="p">.</span><span class="nx">sendCoin</span><span class="p">(</span><span class="nx">accounts</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="mi">500</span><span class="p">)</span>
<span class="p">{</span> <span class="nx">tx</span><span class="o">:</span>
   <span class="s1">&#39;0xf392891ee029f6bc6f970b9e5ae91cfd2e92baa4e141f0a94f6c6fbf5942c8a8&#39;</span><span class="p">,</span>
  <span class="nx">receipt</span><span class="o">:</span>
   <span class="p">{</span> <span class="nx">transactionHash</span><span class="o">:</span>
      <span class="s1">&#39;0xf392891ee029f6bc6f970b9e5ae91cfd2e92baa4e141f0a94f6c6fbf5942c8a8&#39;</span><span class="p">,</span>
     <span class="nx">transactionIndex</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
     <span class="nx">blockHash</span><span class="o">:</span>
      <span class="s1">&#39;0x14d49b375d485ae98860383d3483174995f019f349e9fdf5fd1d669be35a4791&#39;</span><span class="p">,</span>
     <span class="nx">blockNumber</span><span class="o">:</span> <span class="mi">6</span><span class="p">,</span>
     <span class="nx">from</span><span class="o">:</span> <span class="s1">&#39;0x6c9d11d64bdc226d3d143b228d1019cb187c962d&#39;</span><span class="p">,</span>
     <span class="nx">to</span><span class="o">:</span> <span class="s1">&#39;0xbfc5d417c17fc15e837aca46063f6b5403ad469e&#39;</span><span class="p">,</span>
     <span class="nx">gasUsed</span><span class="o">:</span> <span class="mi">51072</span><span class="p">,</span>
     <span class="nx">cumulativeGasUsed</span><span class="o">:</span> <span class="mi">51072</span><span class="p">,</span>
     <span class="nx">contractAddress</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
     <span class="nx">logs</span><span class="o">:</span> <span class="p">[</span> <span class="p">[</span><span class="nb">Object</span><span class="p">]</span> <span class="p">],</span>
     <span class="nx">status</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
     <span class="nx">logsBloom</span><span class="o">:</span>
      <span class="s1">&#39;0xspan><span class="p">,</span>
     <span class="nx">v</span><span class="o">:</span> <span class="s1">&#39;0x1b&#39;</span><span class="p">,</span>
     <span class="nx">r</span><span class="o">:</span>
      <span class="s1">&#39;0x6ad89e5e88194468c9d8f82891c7839b9c4d92ee01bd689ce080e35e99e74d1d&#39;</span><span class="p">,</span>
     <span class="nx">s</span><span class="o">:</span>
      <span class="s1">&#39;0x77f2bc1452799a94cfaec2a9400f85393794ff96b285447a3407371b2d991978&#39;</span><span class="p">,</span>
     <span class="nx">rawLogs</span><span class="o">:</span> <span class="p">[</span> <span class="p">[</span><span class="nb">Object</span><span class="p">]</span> <span class="p">]</span> <span class="p">},</span>
  <span class="nx">logs</span><span class="o">:</span>
   <span class="p">[</span> <span class="p">{</span> <span class="nx">logIndex</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
       <span class="nx">transactionIndex</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
       <span class="nx">transactionHash</span><span class="o">:</span>
        <span class="s1">&#39;0xf392891ee029f6bc6f970b9e5ae91cfd2e92baa4e141f0a94f6c6fbf5942c8a8&#39;</span><span class="p">,</span>
       <span class="nx">blockHash</span><span class="o">:</span>
        <span class="s1">&#39;0x14d49b375d485ae98860383d3483174995f019f349e9fdf5fd1d669be35a4791&#39;</span><span class="p">,</span>
       <span class="nx">blockNumber</span><span class="o">:</span> <span class="mi">6</span><span class="p">,</span>
       <span class="nx">address</span><span class="o">:</span> <span class="s1">&#39;0xBfc5d417c17fc15E837aCA46063F6b5403ad469e&#39;</span><span class="p">,</span>
       <span class="nx">type</span><span class="o">:</span> <span class="s1">&#39;mined&#39;</span><span class="p">,</span>
       <span class="nx">id</span><span class="o">:</span> <span class="s1">&#39;log_c14235e4&#39;</span><span class="p">,</span>
       <span class="nx">event</span><span class="o">:</span> <span class="s1">&#39;Transfer&#39;</span><span class="p">,</span>
       <span class="nx">args</span><span class="o">:</span> <span class="p">[</span><span class="nx">Result</span><span class="p">]</span> <span class="p">}</span> <span class="p">]</span> <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>检查接收账户的余额</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">truffle</span><span class="p">(</span><span class="nx">development</span><span class="p">)</span><span class="o">&gt;</span> <span class="kd">let</span> <span class="nx">received</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">instance</span><span class="p">.</span><span class="nx">getBalance</span><span class="p">(</span><span class="nx">accounts</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="nx">truffle</span><span class="p">(</span><span class="nx">development</span><span class="p">)</span><span class="o">&gt;</span> <span class="nx">received</span><span class="p">.</span><span class="nx">toNumber</span><span class="p">()</span>
<span class="mi">500</span>
</code></pre></td></tr></table>
</div>
</div><p>检查发送账户的余额</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">truffle</span><span class="p">(</span><span class="nx">development</span><span class="p">)</span><span class="o">&gt;</span> <span class="kd">let</span> <span class="nx">newBalance</span> <span class="o">=</span> <span class="kr">await</span> <span class="nx">instance</span><span class="p">.</span><span class="nx">getBalance</span><span class="p">(</span><span class="nx">accounts</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="nx">truffle</span><span class="p">(</span><span class="nx">development</span><span class="p">)</span><span class="o">&gt;</span> <span class="nx">newBalance</span><span class="p">.</span><span class="nx">toNumber</span><span class="p">()</span>
<span class="mi">9500</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="7-使用truffle-develop">7. 使用truffle develop</h3>
<p>之前部署合约使用了Ganache，也可以使用truffle develop。这一工具是Truffle内置的测试用私链，运行在本地。</p>
<p>运行truffle develop</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ truffle develop
Truffle Develop started at http://127.0.0.1:9545/

Accounts:
<span class="o">(</span>0<span class="o">)</span> 0xfc166345efd307d6c22bde2cc8f4e4e345c49495
<span class="o">(</span>1<span class="o">)</span> 0x7b06844a7accc66d34294557d98224c39c496c81
<span class="o">(</span>2<span class="o">)</span> 0x49bb2bd5e7506708b1c458d0b6331916180c091b
<span class="o">(</span>3<span class="o">)</span> 0x6ee54be55b95845c3c00cf1fb34cff053b619f44
<span class="o">(</span>4<span class="o">)</span> 0xeb259672501d8a16c954d09a8fdf84291d67cad2
<span class="o">(</span>5<span class="o">)</span> 0xb924f911ae293488043f6cc1d534654213db498f
<span class="o">(</span>6<span class="o">)</span> 0x02ce17094c74a5062ac6a2cd432a4948b7adba26
<span class="o">(</span>7<span class="o">)</span> 0x2e8e85efcefb3e96f09f2ca4d3d4342ef88a0b2c
<span class="o">(</span>8<span class="o">)</span> 0xd773abd9401ac8973cfcf5d8957bde6121347a92
<span class="o">(</span>9<span class="o">)</span> 0x0fcbde05930c09ecac70f9eeddb92d8b7ddec845

Private Keys:
<span class="o">(</span>0<span class="o">)</span> 328523fee9c143c97a93d27c2ef67a37e57143591e584bcbbdc6de71a0f92d8e
<span class="o">(</span>1<span class="o">)</span> 640e66ab0c0b9e775b32d5dfc00d71decc6c96006d71d6729abe336f88ef3c57
<span class="o">(</span>2<span class="o">)</span> c819551e120e1de0785f4476f7221d9d656a3b7c0e0fbce1de4eef986b2384bc
<span class="o">(</span>3<span class="o">)</span> 648892c4e7896ab4c1d26242ecda4de7f39a46cd2822451557c2910ce7b4be7f
<span class="o">(</span>4<span class="o">)</span> 8902380d9dd0dd8d6d97e59c694944a95829776db1dcb61406baec815649cb03
<span class="o">(</span>5<span class="o">)</span> f7d2341f7fbcde003d92e1a8ff3d3972fae00aff6a7568595e7bef03490efde9
<span class="o">(</span>6<span class="o">)</span> e4d11c8069bfaa777f666817d2d5f6b30a33dd75fb960b6e95abfd368286ef37
<span class="o">(</span>7<span class="o">)</span> 7af6c87f895b9c2a661748138a3bee82aff36439bcb43346f0285aa9dfb5aa04
<span class="o">(</span>8<span class="o">)</span> c810feb901d3bbeb57c9fadeba4e9da6bb61d61f1512fdabf5b0363264dd6336
<span class="o">(</span>9<span class="o">)</span> eb21927033d555614606e545e176c9584d8d673db404b70cc8fa4124cbee5438

Mnemonic: merry wrong fruit carry rifle phrase catalog describe mail traffic rate act

⚠️  Important ⚠️  : This mnemonic was created <span class="k">for</span> you by Truffle. It is not secure.
Ensure you <span class="k">do</span> not use it on production blockchains, or <span class="k">else</span> you risk losing funds.

truffle<span class="o">(</span>develop<span class="o">)</span>&gt; 
</code></pre></td></tr></table>
</div>
</div><p>以上显示了生成的十个账户和它们的私钥，可用于之后与区块链的交互。</p>
<p>在出现的<code>truffle(develop)&gt;</code>提示符下，可以省略<code>truffle</code>前缀而执行truffle的相关命令，依次执行编译和迁移命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span><span class="lnt">79
</span><span class="lnt">80
</span><span class="lnt">81
</span><span class="lnt">82
</span><span class="lnt">83
</span><span class="lnt">84
</span><span class="lnt">85
</span><span class="lnt">86
</span><span class="lnt">87
</span><span class="lnt">88
</span><span class="lnt">89
</span><span class="lnt">90
</span><span class="lnt">91
</span><span class="lnt">92
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">truffle<span class="o">(</span>develop<span class="o">)</span>&gt; compile

Compiling your contracts...
<span class="o">===========================</span>
&gt; Everything is up to date, there is nothing to compile.

truffle<span class="o">(</span>develop<span class="o">)</span>&gt; migrate

Compiling your contracts...
<span class="o">===========================</span>
&gt; Everything is up to date, there is nothing to compile.



Starting migrations...
<span class="o">======================</span>
&gt; Network name:    <span class="s1">&#39;develop&#39;</span>
&gt; Network id:      <span class="m">5777</span>
&gt; Block gas limit: 0x6691b7


1_initial_migration.js
<span class="o">======================</span>

   Replacing <span class="s1">&#39;Migrations&#39;</span>
   ----------------------
   &gt; transaction hash:    0x5cf8f2d9154c8c579535788af12bf153cba4dfe5f2e980b774f7a41cfe795089
   &gt; Blocks: <span class="m">0</span>            Seconds: <span class="m">0</span>
   &gt; contract address:    0x199Fb2370bb84f3eE5CacfF079D8478b67Cfba08
   &gt; block number:        <span class="m">1</span>
   &gt; block timestamp:     <span class="m">1573044347</span>
   &gt; account:             0xFc166345EFd307D6c22bdE2cC8f4e4E345c49495
   &gt; balance:             99.99477214
   &gt; gas used:            <span class="m">261393</span>
   &gt; gas price:           <span class="m">20</span> gwei
   &gt; value sent:          <span class="m">0</span> ETH
   &gt; total cost:          0.00522786 ETH


   &gt; Saving migration to chain.
   &gt; Saving artifacts
   -------------------------------------
   &gt; Total cost:          0.00522786 ETH


2_deploy_contracts.js
<span class="o">=====================</span>

   Replacing <span class="s1">&#39;ConvertLib&#39;</span>
   ----------------------
   &gt; transaction hash:    0x8bb95067ae3d85e519a37fa49feb0bca0b39ecd471f6626399b75c66592d5cb7
   &gt; Blocks: <span class="m">0</span>            Seconds: <span class="m">0</span>
   &gt; contract address:    0x3f2dF366aC8C3356516C53B14610DE53309F7CCA
   &gt; block number:        <span class="m">3</span>
   &gt; block timestamp:     <span class="m">1573044347</span>
   &gt; account:             0xFc166345EFd307D6c22bdE2cC8f4e4E345c49495
   &gt; balance:             99.99185922
   &gt; gas used:            <span class="m">103623</span>
   &gt; gas price:           <span class="m">20</span> gwei
   &gt; value sent:          <span class="m">0</span> ETH
   &gt; total cost:          0.00207246 ETH


   Linking
   -------
   * Contract: MetaCoin &lt;--&gt; Library: ConvertLib <span class="o">(</span>at address: 0x3f2dF366aC8C3356516C53B14610DE53309F7CCA<span class="o">)</span>

   Replacing <span class="s1">&#39;MetaCoin&#39;</span>
   --------------------
   &gt; transaction hash:    0x88213b424d793c5e8d04cce4f34789a38b5c318a3782da511eee51c73fc97da6
   &gt; Blocks: <span class="m">0</span>            Seconds: <span class="m">0</span>
   &gt; contract address:    0xBADc6F515922344a53675A348ccBEeec6A96a37a
   &gt; block number:        <span class="m">4</span>
   &gt; block timestamp:     <span class="m">1573044347</span>
   &gt; account:             0xFc166345EFd307D6c22bdE2cC8f4e4E345c49495
   &gt; balance:             99.98509224
   &gt; gas used:            <span class="m">338349</span>
   &gt; gas price:           <span class="m">20</span> gwei
   &gt; value sent:          <span class="m">0</span> ETH
   &gt; total cost:          0.00676698 ETH


   &gt; Saving migration to chain.
   &gt; Saving artifacts
   -------------------------------------
   &gt; Total cost:          0.00883944 ETH


<span class="nv">Summary</span>
<span class="o">=======</span>
&gt; Total deployments:   <span class="m">3</span>
&gt; Final cost:          0.0140673 ETH
</code></pre></td></tr></table>
</div>
</div><p>接下来同样可以在提示符下直接进行合约交互，而不必退出使用<code>truffle console</code></p>
<h3 id="8-truffle-develop和truffle-console">8. Truffle develop和Truffle console</h3>
<p>两者都可以用于测试合约交互和手动执行交易，但Truffle develop同时还可以用来发起一个区块链</p>
<p>两者的使用场景为</p>
<p>Truffle Console</p>
<ul>
<li>已经有正在使用的客户端，如Ganache或geth</li>
<li>想要部署到测试网络或以太坊主网络</li>
<li>想要使用具体的助记符或账户列表</li>
</ul>
<p>Truffle develop</p>
<ul>
<li>正在测试项目，该项目不会马上部署</li>
<li>不需要使用指定的账户，使用默认提供的账户足够</li>
<li>不想安装或管理额外的区块链客户端</li>
</ul>
<h3 id="参考">参考</h3>
<p>[1] Truffle Quickstart, <a href="https://www.trufflesuite.com/docs/truffle/quickstart">https://www.trufflesuite.com/docs/truffle/quickstart</a></p>
<p>[2] Using Truffle Develop and The Console, <a href="https://www.trufflesuite.com/docs/truffle/getting-started/using-truffle-develop-and-the-console#truffle-develop">https://www.trufflesuite.com/docs/truffle/getting-started/using-truffle-develop-and-the-console#truffle-develop</a></p>
]]></description></item><item><title>Istanbul Byzantine Fault Tolerance</title><link>https://shuzang.github.io/istanbul-byzantine-fault-tolerance/</link><pubDate>Tue, 29 Oct 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://shuzang.github.io/istanbul-byzantine-fault-tolerance/</guid><description><![CDATA[<p>AMIS公司提出的Istanbul Byzantine Fault Tolerance Consensus（简称IBFT或Istanbul BFT），是一个基于PBFT的交易一致性的共识。因为要考虑可能发生的异常，对共识的原始文档作一次通读，仔细理解一下。原始文档位于github <a href="https://github.com/ethereum/EIPs/issues/650" target="_blank" rel="noopener noreffer">ethereum/EIPs#650</a>，以下一边翻译一边阅读。</p>
<p>注：EIP，即Ethereum Improvement Proposal，以太坊改进建议</p>
<hr>
<p>这一工作深受Clique POA的启发，并在协议层中尽可能设计相同的机制，比如验证者投票。我们遵循EIP风格，将背景和原理放在所提出的共识协议的后面供开发者阅读。这一工作也受到Hyperledger&rsquo;s SBFT，Tendermint，HydraChain和NCCU BFT的启发。</p>
<h2 id="术语">术语</h2>
<ul>
<li>Validator：区块验证者</li>
<li>Proposer：一轮共识中被选举出打包新区块的验证者。</li>
<li>Round：共识轮数。一轮共识起始于Proposer打包一个新区块，结束于新区块提交或轮数改变（轮数改变可能由于验证不通过或区块更新）。</li>
<li>Proposal：共识正在处理的新打包的区块。</li>
<li>Sequence：新区块的序号（从创世区块起排列的一个顺序），这一数字应大于所有之前区块的序号。目前，每个区块的高度都是它的序号。</li>
<li>Backlog：将来的共识信息记录在这里面。</li>
<li>Round state：指定轮数和序号的共识信息，包括预准备信息、准备信息和提交信息。</li>
<li>Consensus proof：提交的区块签名，每个验证者验证后都会对区块签名，可以证明区块经历了整个共识过程。</li>
<li>Snapshot：验证者投票状态。</li>
</ul>
<h2 id="共识">共识</h2>
<p>Istanbul BFT基于 <a href="http://pmg.csail.mit.edu/papers/osdi99.pdf" target="_blank" rel="noopener noreffer">PBFT</a> 算法，然而，原始的PBFT需要做一些调整来适应区块链。首先，没有具体的发送请求和等待结果的<code>client</code>的概念，所有的 validator 都可以视作<code>clients</code>。其次，为了保证区块链的运行，需要在每一轮共识中持续不断的选举出 proposer 来打包新的区块，同样，每轮共识的结果是一个可验证的区块而不是文件系统的一组读写操作。</p>
<p>Istanbul BFT 继承了 PBFT 共识的三阶段：pre-prepare，prepare 和 commit，我们称之为预准备阶段、准备阶段和提交阶段。系统可以容忍 N 个 validator 节点的网络中F个节点错误，其中 N = 3F + 1。每一轮之前，validators会首先投票选出一个proposer，默认的选举方式是轮询。选出的proposer将会打包一个新的区块并附随 pre-prepare 消息广播出去，当接收到 pre-prepare 消息，validators 会进入 pre-prepared 状态，然后广播 prepare 消息。这一步是为了确认所有的 validators 在同一个 sequence 和同一个 round上工作。当接收到 2F + 1个 prepare 消息，validator 就会进入 prepared 状态并广播 commit 消息。这一步是为了通知其它节点它验证了新区块并且将会把新区块添加到了区块链中。最后，验证者们等待 2F + 1 个 commit 消息并进入 committed 状态，最后把区块添加到区块链末尾。</p>
<p>Istanbul BFT共识中的区块符合最终一致性，这也就是说所有的区块都必须位于主链中，区块链没有分叉。为了防止恶意节点生成一条和主链完全不同的链，每个验证者都要在将区块添加到区块链末尾之前附加 2F + 1 个收到的 commit 签名到区块头的 extraData 字段。因此，所有区块都是自验证的并且支持轻节点。然而，动态的 extraData字段可能造成区块哈希计算的相关问题，因为不同的验证者在同一轮共识中收到的一组 commit 消息可能不同，从而导致 extraData 字段不同，最终整个区块的哈希值不一致，为了应对这种情况，在计算区块哈希时会排除 commit 签名部分。因此，依然可以保持区块/区块哈希的一致性，并把一致性证明放在区块头。</p>
<h3 id="1-共识状态">1. 共识状态</h3>
<p>Istanbul BFT是一个状态机复制算法，每个验证者为了达成区块一致都维持一个状态机副本。</p>
<p>状态(States)：</p>
<ul>
<li>new round：proposer打包新区块，验证者等待 pre-prepare 消息</li>
<li>pre-prepared：验证者接收 pre-prepare 消息，广播 prepare 消息，然后等待 2F + 1 个 prepare 或 commit 消息</li>
<li>prepared：验证者收到了 2F + 1 个 prepare 消息并广播 commit 消息，然后等待 2F + 1 个commit消息</li>
<li>commited：验证者收到了 2F + 1 个 commit 消息，可以将新区块插入区块链末尾了</li>
<li>final commited：新区块成功插入区块链末尾，验证者准备下一轮</li>
<li>round change：验证者等待同一轮上的 2F + 1 个round change消息</li>
</ul>
<h3 id="2-状态转换">2. 状态转换</h3>
<p></p>
<ul>
<li>New round —&gt; Pre-prepared
<ul>
<li>proposer从交易池收集交易</li>
<li>proposer打包新区块并广播，然后进入 pre-prepared 状态</li>
<li>每个验证者收到pre-prepare消息后，若符合如下条件，进入pre-prepared状态
<ul>
<li>新区块来自有效的proposer</li>
<li>区块头有效</li>
<li>新区块的序号和轮数符合验证者状态</li>
</ul>
</li>
<li>验证者向其它验证者广播prepare消息</li>
</ul>
</li>
<li>Pre-prepared —&gt; Prepared
<ul>
<li>验证者收到 2F+1 个有效prepare消息后进入prepared状态，prepare消息有效是指符合如下条件
<ul>
<li>序号和轮数匹配</li>
<li>区块哈希匹配</li>
<li>消息来自已知验证者</li>
</ul>
</li>
<li>验证者进入prepared状态后广播commit消息</li>
</ul>
</li>
<li>Prepared —&gt; Committed
<ul>
<li>验证者收到 2F+1 个有效commit消息后进入committed状态，commit消息有效是指符合如下条件
<ul>
<li>序号和轮数匹配</li>
<li>区块哈希匹配</li>
<li>消息来自已知验证者</li>
</ul>
</li>
</ul>
</li>
<li>Commited —&gt; Final committed
<ul>
<li>验证者附加2F+1个提交签名到extraData字段，将区块插入区块链末尾</li>
<li>区块插入成功后验证者进入Final committed状态</li>
</ul>
</li>
<li>Final Commited —&gt; New round
<ul>
<li>验证者选举新的proposer并启动新一轮共识计时器</li>
</ul>
</li>
</ul>
<h3 id="3-round-change工作流">3. Round change工作流</h3>
<ul>
<li>以下三种情况将会触发 Round change
<ul>
<li>Round change 计时器超时</li>
<li>无效 prepared 消息</li>
<li>区块插入失败</li>
</ul>
</li>
<li>当一个验证者发现符合以上三种情况任一种时，就会将新的轮数附加到 round change消息上广播出去，然后等待来自其它验证者的 round change消息。附加的新的轮数根据以下条件确定
<ul>
<li>如果验证者收到来自其它节点的 round change 消息，它会从数量超过F+1个的轮数消息中选择最大的那个轮数</li>
<li>否则，将 当前轮数+1 作为新的轮数</li>
</ul>
</li>
<li>无论何时，验证者一旦收到同一个轮数上的F+1个 round change 消息，它就会比较收到的轮数和自己的轮数，如果收到的更大，验证者会以收到的轮数再次广播 round change 消息</li>
<li>一旦收到了同一个轮数上的 2F+1 个round change消息，验证者就会退出round change循环，选举新的proposer，然后进入new round状态</li>
<li>另一个验证者跳出轮数改变循环的情况是它通过节点同步收到了已验证的区块</li>
</ul>
<h3 id="4-proposer选择">4. Proposer选择</h3>
<p>当前支持两种策略：round robin和sticky proposer</p>
<ul>
<li>round robin：每一次区块和轮数更改都会换一个proposer</li>
<li>sticky proposer：只有轮数改变时才会更改proposer</li>
</ul>
<h3 id="5-验证者列表投票">5. 验证者列表投票</h3>
<p>IBFT使用一个和Clique相似的验证者投票机制，每个epoch交易都会重置验证者投票，这意味着当授权或取消授权投票过程正在进行，投票过程将中止。</p>
<p>对所有交易区块而言</p>
<ul>
<li>proposer可以投一票提议更改验证者列表</li>
</ul>
<p>未完待续</p>
<h2 id="问题">问题</h2>
<ul>
<li>
<p><a href="https://github.com/jpmorganchase/quorum/issues/305" target="_blank" rel="noopener noreffer">Istanbul BFT&rsquo;s design cannot successfully tolerate fail-stop failures #305</a></p>
</li>
<li>
<p><a href="https://arxiv.org/pdf/1901.07160.pdf" target="_blank" rel="noopener noreffer">Correctness Analysis of Istanbul Byzantine Fault Tolerance</a></p>
</li>
<li>
<p>没有激励机制</p>
</li>
</ul>
]]></description></item><item><title>区块链实验2-Quorum区块链实验平台搭建</title><link>https://shuzang.github.io/build-quorum-private-blockchain-network/</link><pubDate>Wed, 02 Oct 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://shuzang.github.io/build-quorum-private-blockchain-network/</guid><description><![CDATA[<p>上篇文章已经确定了使用 Quorum 区块链，本文记录搭建 Quorum 私有区块链网络的过程。</p>
<h2 id="1-设备整理">1. 设备整理</h2>
<p>首先整理下手头现有的设备，包括开发板、MCU或其它套件、传感器/执行器等的列表如下</p>
<table>
<thead>
<tr>
<th>名称</th>
<th>分类</th>
<th>数量</th>
<th>状态</th>
<th>实物图</th>
</tr>
</thead>
<tbody>
<tr>
<td>树莓派</td>
<td>开发板</td>
<td>2</td>
<td>已购买</td>
<td></td>
</tr>
<tr>
<td>BeagleBone Black</td>
<td>开发板</td>
<td>2</td>
<td>老师手里</td>
<td></td>
</tr>
<tr>
<td><a href="https://www.dragino.com/products/lora/item/106-lora-gps-hat.html" target="_blank" rel="noopener noreffer">LoRa/GPS Hat</a></td>
<td>扩展板</td>
<td>1</td>
<td>已购买</td>
<td></td>
</tr>
<tr>
<td><a href="http://www.ti.com/tool/LAUNCHXL-CC1350" target="_blank" rel="noopener noreffer">CC1350 LaunchPad</a></td>
<td>扩展版</td>
<td>2</td>
<td>老师手里</td>
<td></td>
</tr>
<tr>
<td><a href="http://wiki.seeedstudio.com/cn/Grove-XBee_Carrier/" target="_blank" rel="noopener noreffer">Grove XBee Carrier</a></td>
<td>扩展板</td>
<td>2</td>
<td>实验室抽屉</td>
<td></td>
</tr>
<tr>
<td><a href="http://wiki.seeedstudio.com/cn/RFbee_V1.1-Wireless_Arduino_compatible_node/" target="_blank" rel="noopener noreffer">RFBee</a></td>
<td>配套Xbee的部件</td>
<td>2</td>
<td>实验室抽屉</td>
<td></td>
</tr>
<tr>
<td><a href="http://wiki.seeedstudio.com/cn/UartSBee_v5/" target="_blank" rel="noopener noreffer">UartSBee v5</a></td>
<td>转换器</td>
<td>2</td>
<td>实验室抽屉</td>
<td></td>
</tr>
<tr>
<td><a href="http://wiki.seeedstudio.com/cn/Grove-Loudness_Sensor/" target="_blank" rel="noopener noreffer">Grove-Loudness Sensor</a></td>
<td>传感器</td>
<td>1</td>
<td>实验室抽屉</td>
<td></td>
</tr>
<tr>
<td><a href="http://wiki.seeedstudio.com/Grove-Dust_Sensor/" target="_blank" rel="noopener noreffer">Grove-Dust Sensor</a></td>
<td>传感器</td>
<td>1</td>
<td>实验室抽屉（损坏，不可用）</td>
<td></td>
</tr>
<tr>
<td><a href="http://wiki.seeedstudio.com/cn/Grove-Chainable_RGB_LED/" target="_blank" rel="noopener noreffer">Grove-Chainable RGB LED</a></td>
<td>执行器</td>
<td>1</td>
<td>实验室抽屉</td>
<td></td>
</tr>
</tbody>
</table>
<p>LoRa/GPS HAT，CC1350 LaunchPad都内置一个温度传感器，LoRa/GPS HAT除了支持LoRa通信，还可以收集并上传GPS数据</p>
<h2 id="2-设备选择与方案构思">2. 设备选择与方案构思</h2>
<p>主要考虑使用哪些设备，为了反映所设计的系统的基本结构，需要包括网关和终端IoT设备。有下面几种思路。</p>
<ol>
<li>
<p>有线直连，树莓派/BBB + 传感器/执行器</p>
<p>将传感器/执行器直接接到树莓派或BBB开发板上，在开发板中使用Python相关库从传感器/执行器读取相关数据并进行处理。工作量较小</p>
</li>
<li>
<p>有线直连，树莓派 + Arduino + 传感器/执行器</p>
<p>Arduino连接传感器/执行器，并通过串口与树莓派通信，在树莓派中使用Python相关库处理Arduino传过来的数据并进行处理。工作量较小，但目前没有Arduino。</p>
</li>
<li>
<p>无线通信，LoRa</p>
<p>Arduino连接传感器/执行器，同时连接LoRa模块作为LoRa节点，将收集自传感器的数据通过LoRa模块发送到网关。树莓派连接 LoRa/GPS Hat 作为 LoRa网关接受来自LoRa节点的数据，并提交到<a href="https://www.thethingsnetwork.org/" target="_blank" rel="noopener noreffer">The Things Network(TTN)</a> 网络，从TTN后台获取实时数据供区块链处理</p>
<p>目前没有Arduino，且缺少一个LoRa模块与LoRa/GPS HAT协作传输数据。</p>
<p>这一方式工作量较大。</p>
</li>
<li>
<p>无线通信，Sub 1GHz</p>
<p>CC1350 LaunchPad作为终端设备从传感器获取数据，通过Sub 1GHz发送给另一台作为收集器的CC1350，收集器与BeagleBone Black串口通信，网关运行在BBB上。</p>
<p>CC1350 LaunchPad 编程处理传感器工作量比Arduino大，不熟悉；如何从运行在BBB上的本地网关获取暂时数据也不清楚</p>
<p>这一方式工作量较大</p>
</li>
</ol>
<p>最后选择的方案是：使用两台树莓派，通过WiFi连接到电脑，终端 IoT 设备通过区块链账户表示，不连接实物。</p>
<h2 id="3-网络拓扑">3. 网络拓扑</h2>
<p>在正式开始本实验之前，已经尝试过使用两台电脑和两台树莓派搭建 Quorum 网络，主要使用的是虚拟机，但到最后由于网络质量的问题，共识协议无法正常运行，导致合约部署无法完成。估计主要原因是 PC 上的节点装在了虚拟机里，虚拟机又使用桥接模式，导致最后丢包率和延迟都比较高。因此这次对实验做一定的调整，主要有两点：</p>
<ol>
<li>撤销 laptop 的节点，只使用台式机，节点仍然安装在虚拟机中，但不使用桥接模式，而是通过外接无线网卡直接连到路由器的无线网络；</li>
<li>扩展节点数量到 6 个，虚拟机中设置 4 个验证者节点，以端口号区分，两台树莓派分别代表一个普通节点，在之后加入。</li>
</ol>
<p>最终使用了两台树莓派和一台计算机搭建完成 6 节点的 Quorum 网络，采用了 IBFT 共识，未启用隐私管理器。网络拓扑如下：</p>
<p></p>
<p>注意，当前虚拟机和树莓派都是通过无线网卡接入路由器共享的无线网络(网络名为 quorum)</p>
<h3 id="31-设备和操作系统选择">3.1 设备和操作系统选择</h3>
<p>实验平台共使用了一台台式电脑和两台树莓派。设备和操作系统的详细信息如下，台式电脑的内存和硬盘信息是虚拟机分配的容量。</p>
<table>
<thead>
<tr>
<th>设备</th>
<th>CPU</th>
<th>操作系统</th>
<th>内存</th>
<th>硬盘</th>
</tr>
</thead>
<tbody>
<tr>
<td>清华同方(台式电脑)</td>
<td>Intel Core i5-4460, 3.2GHz</td>
<td>Ubuntu 18.04 LTS(虚拟机)</td>
<td>2GB</td>
<td>50GB</td>
</tr>
<tr>
<td>Raspberry Pi 3 Model B Plus</td>
<td>quad-core ARM Cortex A53, 1.4GHz</td>
<td>Raspbian  Buster</td>
<td>1GB</td>
<td>32GB(microSD card)</td>
</tr>
<tr>
<td>Raspberry Pi 3 Model B</td>
<td>quad-core ARM Cortex A53, 1.2GHz</td>
<td>Raspbian Buster</td>
<td>1GB</td>
<td>16GB(microSD card)</td>
</tr>
</tbody>
</table>
<h3 id="32-静态ip分配">3.2 静态ip分配</h3>
<p>台式电脑的操作环境是在虚拟机上完成的，涉及到网络相关操作，这里事先对各设备进行静态ip的分配</p>
<table>
<thead>
<tr>
<th>设备</th>
<th>主机名</th>
<th>节点编号</th>
<th>IP地址</th>
<th>操作系统</th>
</tr>
</thead>
<tbody>
<tr>
<td>清华同方（PC）</td>
<td>validator</td>
<td>node0</td>
<td>192.168.191.2:30300</td>
<td>Ubuntu 18.04 LTS</td>
</tr>
<tr>
<td>清华同方（PC）</td>
<td>validator</td>
<td>node1</td>
<td>192.168.191.2:30301</td>
<td>Ubuntu 18.04 LTS</td>
</tr>
<tr>
<td>清华同方（PC）</td>
<td>validator</td>
<td>node2</td>
<td>192.168.191.2:30302</td>
<td>Ubuntu 18.04 LTS</td>
</tr>
<tr>
<td>清华同方（PC）</td>
<td>validator</td>
<td>node3</td>
<td>192.168.191.2:30303</td>
<td>Ubuntu 18.04 LTS</td>
</tr>
<tr>
<td>Pi 3B+</td>
<td>lightnode1</td>
<td>node4</td>
<td>192.168.191.3</td>
<td>Raspbian Buster</td>
</tr>
<tr>
<td>Pi 3B</td>
<td>lightnode2</td>
<td>node5</td>
<td>192.168.191.4</td>
<td>Raspbian Buster</td>
</tr>
</tbody>
</table>
<h2 id="4-主机设置">4. 主机设置</h2>
<p>在 VMware 中安装 Ubuntu 18.04 虚拟机，安装完成后完成如下基础配置。</p>
<h3 id="41-系统初始化">4.1 系统初始化</h3>
<p>更新源和系统</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo apt-get update
$ sudo apt-get upgrade
</code></pre></td></tr></table>
</div>
</div><p>调整系统时间</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 查看系统时区是否正确</span>
$ timedatectl
                      Local time: 五 2019-09-13 11:07:13 +08
                  Universal time: 五 2019-09-13 03:07:13 UTC
                        RTC time: 五 2019-09-13 03:07:13
                       Time zone: Asia/Ulaanbaatar <span class="o">(</span>+08, +0800<span class="o">)</span>
       System clock synchronized: yes
systemd-timesyncd.service active: yes
                 RTC in <span class="nb">local</span> TZ: no
<span class="c1"># 若不正确，使用下列命令设置时区，时区根据自己所处位置调整</span>
$ timedatectl set-timezone Asia/Shanghai
</code></pre></td></tr></table>
</div>
</div><p>设置主机名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo hostnamectl set-hostname validator
</code></pre></td></tr></table>
</div>
</div><p>重启终端查看新的主机名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ hostnamectl
   Static hostname: validator
         Icon name: computer-vm
           Chassis: vm
        Machine ID: fea6d1013b564af9ad3667732e5417fc
           Boot ID: 326e1f8c6fd04269803413d6ac7c6167
    Virtualization: vmware
  Operating System: Ubuntu 18.04.3 LTS
            Kernel: Linux 5.0.0-23-generic
      Architecture: x86-64
</code></pre></td></tr></table>
</div>
</div><h3 id="42-静态ip设置">4.2 静态ip设置</h3>
<p>执行<code>ifconfig</code>命令需要安装<code>net-tools</code>工具</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo apt-get install net-tools
</code></pre></td></tr></table>
</div>
</div><p>Ubuntu18.04 必须使用<a href="https://ubuntu.com/blog/ubuntu-bionic-netplan" target="_blank" rel="noopener noreffer">netplan</a>管理网络，但因为这里是 Desktop 版，可以可视化设置，所以暂时不需要理解。</p>
<p>在设置页面选择无线网络，然后点击网络连接的 quorum 网络的小齿轮图标，进入网络设置页面</p>
<p></p>
<p>点击<code>IPv4</code>选项卡，选择<code>Manual</code>，输入我们之前预先设计的IP<code>192.168.191.2</code>，子网掩码、网关和DNS都做相应的设置，然后点击应用。</p>
<p></p>
<p>查看设置好的网络地址</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ ifconfig
...
wlxb8de5e4dad9c: <span class="nv">flags</span><span class="o">=</span>4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="m">1500</span>
        inet 192.168.191.2  netmask 255.255.255.0  broadcast 192.168.191.255
        inet6 fe80::bfba:dc41:82e0:e788  prefixlen <span class="m">64</span>  scopeid 0x20&lt;link&gt;
        ether b8🇩🇪5e:4d:ad:9c  txqueuelen <span class="m">1000</span>  <span class="o">(</span>Ethernet<span class="o">)</span>
        RX packets <span class="m">238</span>  bytes <span class="m">190654</span> <span class="o">(</span>190.6 KB<span class="o">)</span>
        RX errors <span class="m">0</span>  dropped <span class="m">1</span>  overruns <span class="m">0</span>  frame <span class="m">0</span>
        TX packets <span class="m">261</span>  bytes <span class="m">36065</span> <span class="o">(</span>36.0 KB<span class="o">)</span>
        TX errors <span class="m">0</span>  dropped <span class="m">0</span> overruns <span class="m">0</span>  carrier <span class="m">0</span>  collisions <span class="m">0</span>
</code></pre></td></tr></table>
</div>
</div><p>最后取消有线网络的自动连接，确保网络连接处于<code>quorum</code>无线网络上，不过还需要在每次虚拟机启动时手动断开网卡和主机的连接，然后连到虚拟机上。</p>
<h3 id="43-软件编译安装">4.3 软件编译安装</h3>
<p>获取与安装go1.13</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ wget https://dl.google.com/go/go1.13.linux-amd64.tar.gz
$ sudo tar -xzf go1.13.linux-amd64.tar.gz -C /usr/local
$ rm go1.13.linux-amd64.tar.gz
<span class="c1"># 设置环境变量</span>
$ sudo nano /etc/profile
<span class="c1"># 在打开的文件末尾添加下列语句</span>
<span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/usr/local/go/bin
<span class="c1"># 更新的环境变量在下一次登录之前不会生效，但可以通过下面的命令使其直接生效</span>
$ <span class="nb">source</span> /etc/profile
<span class="c1"># 查看生效后的环境变量设置</span>
$ go version
go version go1.13 linux/amd64
<span class="c1"># 注：真正生效必须重启系统</span>
</code></pre></td></tr></table>
</div>
</div><p>安装geth for quorum</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 获取编译后的二进制包</span>
$ wget https://bintray.com/quorumengineering/quorum/download_file?file_path<span class="o">=</span>v2.2.5/geth_v2.2.5_linux_amd64.tar.gz
<span class="c1"># 解压缩并安装</span>
$ sudo tar -xzf download_file?file_path<span class="o">=</span>v2.2.5%2Fgeth_v2.2.5_linux_amd64.tar.gz -C /usr/local/bin
$ rm download_file?file_path<span class="o">=</span>v2.2.5%2Fgeth_v2.2.5_linux_amd64.tar.gz
<span class="c1"># 测试安装</span>
$ geth version
WARN <span class="o">[</span>10-11<span class="p">|</span>09:41:31.463<span class="o">]</span> Sanitizing cache to Go<span class="err">&#39;</span>s GC limits       <span class="nv">provided</span><span class="o">=</span><span class="m">1024</span> <span class="nv">updated</span><span class="o">=</span><span class="m">655</span>
Geth
Version: 1.8.18-stable
Git Commit: c894c2d70eacf30740d03b53ed2fb39e42641295
Quorum Version: 2.2.5
Architecture: amd64
Protocol Versions: <span class="o">[</span><span class="m">63</span> 62<span class="o">]</span>
Network Id: <span class="m">1337</span>
Go Version: go1.11.12
Operating System: linux
<span class="nv">GOPATH</span><span class="o">=</span>
<span class="nv">GOROOT</span><span class="o">=</span>/home/travis/.gimme/versions/go1.11.12.linux.amd64
</code></pre></td></tr></table>
</div>
</div><p>获取并编译istanbul-tools，该工具用来初始化 IBFT 共识网络及进行网络测试</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo apt-get install git
$ mkdir istanbul <span class="o">&amp;&amp;</span> <span class="nb">cd</span> istanbul
$ git clone https://github.com/jpmorganchase/istanbul-tools.git
$ <span class="nb">cd</span> istanbul-tools
<span class="c1"># 执行编译</span>
$ sudo apt-get install -y build-essential
$ make
<span class="c1"># 编译后的文件位于/build/bin目录下，执行测试</span>
$ ./build/bin/istanbul --version
istanbul version v1.0.1
</code></pre></td></tr></table>
</div>
</div><h2 id="5-树莓派启动及配置">5. 树莓派启动及配置</h2>
<p>以 Pi 3B+ 为例，Pi 3B 配置操作基本相同</p>
<h3 id="51-树莓派启动">5.1 树莓派启动</h3>
<p>将 Raspbian Buster 镜像写入准备好的 SD卡，重新加载在电脑中的 SD 卡会出现 boot 盘，同时也是树莓派的<code>/boot</code>目录。在 boot 盘根目录新建名为<code>ssh</code>的文件，开启 SSH 连接。同时新建<code>wpa_supplicant.conf</code>文件，编辑其内容如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nv">ctrl_interface</span><span class="o">=</span><span class="nv">DIR</span><span class="o">=</span>/var/run/wpa_supplicant <span class="nv">GROUP</span><span class="o">=</span>netdev
<span class="nv">update_config</span><span class="o">=</span><span class="m">1</span>
<span class="nv">country</span><span class="o">=</span>CN
 
<span class="nv">network</span><span class="o">={</span>
    <span class="nv">ssid</span><span class="o">=</span><span class="s2">&#34;WiFi名&#34;</span>
    <span class="nv">psk</span><span class="o">=</span><span class="s2">&#34;密码&#34;</span>
    <span class="nv">priority</span><span class="o">=</span><span class="m">10</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>将其中的 ssid 和 psk 更改为自己无线网络的网络名和密码。将配置好的 SD 卡卸载并插入树莓派，通电启动。使用 Advanced IP Scanner 扫描无线网络的网段，获取树莓派 ip，本实验无线网络网段为192.168.191.1-254。</p>
<p>使用扫描到的 ip 通过 Putty 利用 SSH 协议进行登录。</p>
<h3 id="52-树莓派基本配置">5.2 树莓派基本配置</h3>
<h4 id="a-更新源及系统">A. 更新源及系统</h4>
<p>编辑/etc/apt/sources.list文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo nano /etc/apt/sources.list
</code></pre></td></tr></table>
</div>
</div><p>注释掉原来的源，将源更新为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi
deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi
</code></pre></td></tr></table>
</div>
</div><p>保存退出，编辑/etc/apt/sources.list.d/raspi.list文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo nano /etc/apt/sources.list.d/raspi.list
</code></pre></td></tr></table>
</div>
</div><p>将源更新为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">deb http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui
deb-src http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui
</code></pre></td></tr></table>
</div>
</div><p>更新源文件列表，更新软件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo apt-get update
$ sudo apt-get upgrade
</code></pre></td></tr></table>
</div>
</div><h4 id="b-安装xrdp供远程连接">B. 安装xrdp供远程连接</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo apt-get install xrdp
<span class="c1"># 确认安装</span>
$ dpkg -l <span class="p">|</span> grep xrdp
ii  xorgxrdp                              1:0.2.9-1                             armhf        Remote Desktop Protocol <span class="o">(</span>RDP<span class="o">)</span> modules <span class="k">for</span> X.org
ii  xrdp                                  0.9.9-1                               armhf        Remote Desktop Protocol <span class="o">(</span>RDP<span class="o">)</span> server
</code></pre></td></tr></table>
</div>
</div><h4 id="c-开启ftp供文件传输">C. 开启ftp供文件传输</h4>
<p>安装vsftpd</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo apt-get install vsftpd
<span class="c1"># 确认安装</span>
$ dpkg -l <span class="p">|</span> grep vsftpd
ii  vsftpd                                3.0.3-12                              armhf        lightweight, efficient FTP server written <span class="k">for</span> security
</code></pre></td></tr></table>
</div>
</div><p>编辑配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo nano /etc/vsftpd.conf
</code></pre></td></tr></table>
</div>
</div><p>启用对树莓派的写入权限</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># Uncomment this to enable any form of FTP </span>
write command.write_enable<span class="o">=</span>YES
</code></pre></td></tr></table>
</div>
</div><p>保存退出，启用vsftpd</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo service vsftpd start
</code></pre></td></tr></table>
</div>
</div><h4 id="d-修改pi账户密码时区和主机名">D. 修改pi账户密码，时区和主机名</h4>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo raspi-config
</code></pre></td></tr></table>
</div>
</div><p>选择第一项<code>Change User Password</code>，键入新密码并确定，</p>
<p>选择第四项<code>Localisation Options</code>，选择<code>Change Timezone</code>，将时区更改为<code>Asia/Shanghai</code></p>
<p>全部设置完成后选择<code>Finish</code>退出，终端将看到如下输出</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">Current default <span class="nb">time</span> zone: <span class="s1">&#39;Asia/Shanghai&#39;</span>
Local <span class="nb">time</span> is now:      Fri Sep <span class="m">13</span> 18:40:56 CST 2019.
Universal Time is now:  Fri Sep <span class="m">13</span> 10:40:56 UTC 2019.

New password:
Retype new password:
passwd: password updated successfully
OK
</code></pre></td></tr></table>
</div>
</div><p>设置主机名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo hostnamectl set-hostname node5
</code></pre></td></tr></table>
</div>
</div><p>编辑/etc/hosts文件，将127.0.1.1对应的raspberry更改为node5</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">127.0.0.1       localhost
::1             localhost ip6-localhost ip6-loopback
ff02::1         ip6-allnodes
ff02::2         ip6-allrouters

127.0.1.1       node5
</code></pre></td></tr></table>
</div>
</div><p>退出终端并使用新密码重新登录，主机名将更改为node5。注意此时用户名仍为pi。</p>
<h4 id="e-设置静态ip">E. 设置静态ip</h4>
<p>编辑<code>/etc/dhcpcd.conf</code>文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo nano /etc/dhcpcd.conf
</code></pre></td></tr></table>
</div>
</div><p>在末尾添加如下内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">interface wlan0
 
static <span class="nv">ip_address</span><span class="o">=</span>192.168.191.3/24
static <span class="nv">routers</span><span class="o">=</span>192.168.191.1
static <span class="nv">domain_name_servers</span><span class="o">=</span>192.168.191.1
</code></pre></td></tr></table>
</div>
</div><p>重启并以新的ip登录树莓派。</p>
<h4 id="f-获取并安装geth">F. 获取并安装geth</h4>
<p>已经交叉编译过了，这里下载的是最后生成的文件，放到了Github上。交叉编译的过程可以参考本系列文章的两篇补充说明。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ git clone -b gethonly https://github.com/shuzang/quorum-raspbian.git
$ <span class="nb">cd</span> quorum-raspbian
$ sudo cp geth /usr/local/bin
$ sudo chmod +x /usr/local/bin/geth
</code></pre></td></tr></table>
</div>
</div><p>测试安装是否成功</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ geth version
WARN <span class="o">[</span>09-13<span class="p">|</span>19:51:40.051<span class="o">]</span> Sanitizing cache to Go<span class="err">&#39;</span>s GC limits       <span class="nv">provided</span><span class="o">=</span><span class="m">1024</span> <span class="nv">updated</span><span class="o">=</span><span class="m">308</span>
Geth
Version: 1.8.18-stable
Quorum Version: 2.2.5
Architecture: arm
Protocol Versions: <span class="o">[</span><span class="m">63</span> 62<span class="o">]</span>
Network Id: <span class="m">1337</span>
Go Version: go1.11.6
Operating System: linux
<span class="nv">GOPATH</span><span class="o">=</span>
<span class="nv">GOROOT</span><span class="o">=</span>/usr/lib/go-1.11
</code></pre></td></tr></table>
</div>
</div><h2 id="6-网络搭建及测试运行">6. 网络搭建及测试运行</h2>
<h3 id="61-主机">6.1 主机</h3>
<p>各节点数据和相关文件的前期生成都在台式电脑中由 istanbul-tools 工具完成。切换到台式电脑，在 istanbul 目录下创建各节点的工作目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">cd</span> ~/istanbul
$ mkdir node0 node1 node2 node3
</code></pre></td></tr></table>
</div>
</div><p>进入领导节点（这里是node0）目录，使用 istanbul-tools 工具为各节点生成文件，该命令会为所有的初始验证者节点生成 <code>static-nodes.json</code>, <code>genesis.json</code>和 nodekeys 三种文件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">cd</span> node0
$ ../istanbul-tools/build/bin/istanbul setup --num <span class="m">4</span> --nodes --quorum --save --verbose
</code></pre></td></tr></table>
</div>
</div><p>将输出生成的文件信息</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="err">validators</span>
<span class="p">{</span>
	<span class="nt">&#34;Address&#34;</span><span class="p">:</span> <span class="s2">&#34;0x7fec892a867a2da2e4f1ae1646c29e40d0d7a5c6&#34;</span><span class="p">,</span>
	<span class="nt">&#34;Nodekey&#34;</span><span class="p">:</span> <span class="s2">&#34;d698db367eeb7a43c6eb6c79213482ba6ca6f2781c03e8bc8b6d4d2b9bbfd7e5&#34;</span><span class="p">,</span>
	<span class="nt">&#34;NodeInfo&#34;</span><span class="p">:</span> <span class="s2">&#34;enode://7117f995cdb2d79eb90bc4a575c5f82bbe4aa6ac87f966b18e2e19bd29e728ba9ca85062a6af5c188bb159641392e2ac3559712d9a31e965220659412a4a8c3e@0.0.0.0:30303?discport=0&#34;</span>
<span class="p">}</span>
<span class="p">{</span>
	<span class="nt">&#34;Address&#34;</span><span class="p">:</span> <span class="s2">&#34;0x65cc0df8e88fa0fbda0337b3e0b10be9c27325c3&#34;</span><span class="p">,</span>
	<span class="nt">&#34;Nodekey&#34;</span><span class="p">:</span> <span class="s2">&#34;0010d6506fe219d1e0c35f481ee4bd1fc26cadb84c0510128f186e32d7be3f0f&#34;</span><span class="p">,</span>
	<span class="nt">&#34;NodeInfo&#34;</span><span class="p">:</span> <span class="s2">&#34;enode://cb790b57310d70bfb13e417e9dc22f3b0afc0065f4c5babc2f95e3ff75e99d343547585a0b2ad6be6f0497f401e93c16dadec5a68d820cb918fa0255696940f2@0.0.0.0:30303?discport=0&#34;</span>
<span class="p">}</span>
<span class="p">{</span>
	<span class="nt">&#34;Address&#34;</span><span class="p">:</span> <span class="s2">&#34;0x786083c93b12404fd4100ec497810b5cfa0a7191&#34;</span><span class="p">,</span>
	<span class="nt">&#34;Nodekey&#34;</span><span class="p">:</span> <span class="s2">&#34;51fbf8274352fe6d39dbe99be75b13a2a882af210e84ea16935a5b52aa68c662&#34;</span><span class="p">,</span>
	<span class="nt">&#34;NodeInfo&#34;</span><span class="p">:</span> <span class="s2">&#34;enode://0e6118122721993e84da84416cb9752a4b5c1b0077a915eb89d0cdff00862c3f13d9edc676c583997f6d9051245ba0f5587750d09d04482774a11f6d13a1c43b@0.0.0.0:30303?discport=0&#34;</span>
<span class="p">}</span>
<span class="p">{</span>
	<span class="nt">&#34;Address&#34;</span><span class="p">:</span> <span class="s2">&#34;0x28cd575468829f98dabe99f22fd6f3f09b658700&#34;</span><span class="p">,</span>
	<span class="nt">&#34;Nodekey&#34;</span><span class="p">:</span> <span class="s2">&#34;e2ebbcdb7a82c3cac3f0d25a14b57f21dd4a2616f6797a73ab51e8c10b522055&#34;</span><span class="p">,</span>
	<span class="nt">&#34;NodeInfo&#34;</span><span class="p">:</span> <span class="s2">&#34;enode://8d510973b1b245cb8cec8369948080b7e5adca90730112739307096ab445182415e92967de7096c013644f4b92025c7e29db23a145040cb3b9d46831fab0e8e2@0.0.0.0:30303?discport=0&#34;</span>
<span class="p">}</span>



<span class="err">static-nodes.json</span>
<span class="p">[</span>
	<span class="s2">&#34;enode://7117f995cdb2d79eb90bc4a575c5f82bbe4aa6ac87f966b18e2e19bd29e728ba9ca85062a6af5c188bb159641392e2ac3559712d9a31e965220659412a4a8c3e@0.0.0.0:30303?discport=0&#34;</span><span class="p">,</span>
	<span class="s2">&#34;enode://cb790b57310d70bfb13e417e9dc22f3b0afc0065f4c5babc2f95e3ff75e99d343547585a0b2ad6be6f0497f401e93c16dadec5a68d820cb918fa0255696940f2@0.0.0.0:30303?discport=0&#34;</span><span class="p">,</span>
	<span class="s2">&#34;enode://0e6118122721993e84da84416cb9752a4b5c1b0077a915eb89d0cdff00862c3f13d9edc676c583997f6d9051245ba0f5587750d09d04482774a11f6d13a1c43b@0.0.0.0:30303?discport=0&#34;</span><span class="p">,</span>
	<span class="s2">&#34;enode://8d510973b1b245cb8cec8369948080b7e5adca90730112739307096ab445182415e92967de7096c013644f4b92025c7e29db23a145040cb3b9d46831fab0e8e2@0.0.0.0:30303?discport=0&#34;</span>
<span class="p">]</span>

<span class="err">genesis.json</span>
<span class="p">{</span>
    <span class="nt">&#34;config&#34;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&#34;chainId&#34;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
        <span class="nt">&#34;homesteadBlock&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;eip150Block&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;eip150Hash&#34;</span><span class="p">:</span> <span class="s2">&#34;0x0000000000000000000000000000000000000000000000000000000000000000&#34;</span><span class="p">,</span>
        <span class="nt">&#34;eip155Block&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;eip158Block&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;byzantiumBlock&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;constantinopleBlock&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;istanbul&#34;</span><span class="p">:</span> <span class="p">{</span>
            <span class="nt">&#34;epoch&#34;</span><span class="p">:</span> <span class="mi">30000</span><span class="p">,</span>
            <span class="nt">&#34;policy&#34;</span><span class="p">:</span> <span class="mi">0</span>
        <span class="p">},</span>
        <span class="nt">&#34;txnSizeLimit&#34;</span><span class="p">:</span> <span class="mi">64</span><span class="p">,</span>
        <span class="nt">&#34;isQuorum&#34;</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">},</span>
    <span class="nt">&#34;nonce&#34;</span><span class="p">:</span> <span class="s2">&#34;0x0&#34;</span><span class="p">,</span>
    <span class="nt">&#34;timestamp&#34;</span><span class="p">:</span> <span class="s2">&#34;0x5e00998d&#34;</span><span class="p">,</span>
    <span class="nt">&#34;extraData&#34;</span><span class="p">:</span> <span class="s2">&#34;0x0000000000000000000000000000000000000000000000000000000000000000f89af854947fec892a867a2da2e4f1ae1646c29e40d0d7a5c69465cc0df8e88fa0fbda0337b3e0b10be9c27325c394786083c93b12404fd4100ec497810b5cfa0a71919428cd575468829f98dabe99f22fd6f3f09b658700b8410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0&#34;</span><span class="p">,</span>
    <span class="nt">&#34;gasLimit&#34;</span><span class="p">:</span> <span class="s2">&#34;0xe0000000&#34;</span><span class="p">,</span>
    <span class="nt">&#34;difficulty&#34;</span><span class="p">:</span> <span class="s2">&#34;0x1&#34;</span><span class="p">,</span>
    <span class="nt">&#34;mixHash&#34;</span><span class="p">:</span> <span class="s2">&#34;0x63746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365&#34;</span><span class="p">,</span>
    <span class="nt">&#34;coinbase&#34;</span><span class="p">:</span> <span class="s2">&#34;0x0000000000000000000000000000000000000000&#34;</span><span class="p">,</span>
    <span class="nt">&#34;alloc&#34;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&#34;28cd575468829f98dabe99f22fd6f3f09b658700&#34;</span><span class="p">:</span> <span class="p">{</span>
            <span class="nt">&#34;balance&#34;</span><span class="p">:</span> <span class="s2">&#34;0x446c3b15f9926687d2c40534fdb564000000000000&#34;</span>
        <span class="p">},</span>
        <span class="nt">&#34;65cc0df8e88fa0fbda0337b3e0b10be9c27325c3&#34;</span><span class="p">:</span> <span class="p">{</span>
            <span class="nt">&#34;balance&#34;</span><span class="p">:</span> <span class="s2">&#34;0x446c3b15f9926687d2c40534fdb564000000000000&#34;</span>
        <span class="p">},</span>
        <span class="nt">&#34;786083c93b12404fd4100ec497810b5cfa0a7191&#34;</span><span class="p">:</span> <span class="p">{</span>
            <span class="nt">&#34;balance&#34;</span><span class="p">:</span> <span class="s2">&#34;0x446c3b15f9926687d2c40534fdb564000000000000&#34;</span>
        <span class="p">},</span>
        <span class="nt">&#34;7fec892a867a2da2e4f1ae1646c29e40d0d7a5c6&#34;</span><span class="p">:</span> <span class="p">{</span>
            <span class="nt">&#34;balance&#34;</span><span class="p">:</span> <span class="s2">&#34;0x446c3b15f9926687d2c40534fdb564000000000000&#34;</span>
        <span class="p">}</span>
    <span class="p">},</span>
    <span class="nt">&#34;number&#34;</span><span class="p">:</span> <span class="s2">&#34;0x0&#34;</span><span class="p">,</span>
    <span class="nt">&#34;gasUsed&#34;</span><span class="p">:</span> <span class="s2">&#34;0x0&#34;</span><span class="p">,</span>
    <span class="nt">&#34;parentHash&#34;</span><span class="p">:</span> <span class="s2">&#34;0x0000000000000000000000000000000000000000000000000000000000000000&#34;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>查看生成的文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ ls -l
total <span class="m">24</span>
drwxr-xr-x <span class="m">2</span> shuzang shuzang <span class="m">4096</span> Dec <span class="m">23</span> 18:40 <span class="m">0</span>
drwxr-xr-x <span class="m">2</span> shuzang shuzang <span class="m">4096</span> Dec <span class="m">23</span> 18:40 <span class="m">1</span>
drwxr-xr-x <span class="m">2</span> shuzang shuzang <span class="m">4096</span> Dec <span class="m">23</span> 18:40 <span class="m">2</span>
drwxr-xr-x <span class="m">2</span> shuzang shuzang <span class="m">4096</span> Dec <span class="m">23</span> 18:40 <span class="m">3</span>
-rwxr-xr-x <span class="m">1</span> shuzang shuzang <span class="m">1792</span> Dec <span class="m">23</span> 18:40 genesis.json
-rwxr-xr-x <span class="m">1</span> shuzang shuzang  <span class="m">666</span> Dec <span class="m">23</span> 18:40 static-nodes.json
</code></pre></td></tr></table>
</div>
</div><p>使用预定的IP和端口号为所有验证者节点更新 <code>static-nodes.json</code> 文件。 在 <code>static-nodes.json</code>中，每个节点占据一行，按节点标号顺序排列</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ cat static-nodes.json
....更新ip和端口号如下
<span class="o">[</span>
	<span class="s2">&#34;enode://7117f995cdb2d79eb90bc4a575c5f82bbe4aa6ac87f966b18e2e19bd29e728ba9ca85062a6af5c188bb159641392e2ac3559712d9a31e965220659412a4a8c3e@192.168.191.2:30300?discport=0&#34;</span>,
	<span class="s2">&#34;enode://cb790b57310d70bfb13e417e9dc22f3b0afc0065f4c5babc2f95e3ff75e99d343547585a0b2ad6be6f0497f401e93c16dadec5a68d820cb918fa0255696940f2@192.168.191.2:30301?discport=0&#34;</span>,
	<span class="s2">&#34;enode://0e6118122721993e84da84416cb9752a4b5c1b0077a915eb89d0cdff00862c3f13d9edc676c583997f6d9051245ba0f5587750d09d04482774a11f6d13a1c43b@192.168.191.2:30302?discport=0&#34;</span>,
	<span class="s2">&#34;enode://8d510973b1b245cb8cec8369948080b7e5adca90730112739307096ab445182415e92967de7096c013644f4b92025c7e29db23a145040cb3b9d46831fab0e8e2@192.168.191.2:30303?discport=0&#34;</span>
<span class="o">]</span>
</code></pre></td></tr></table>
</div>
</div><p>在每个节点的工作目录创建名为<code>data</code>的数据目录，在<code>data</code>目录创建<code>geth</code>目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">cd</span> ..
$ mkdir -p node0/data/geth
$ mkdir -p node1/data/geth
$ mkdir -p node2/data/geth
$ mkdir -p node3/data/geth
</code></pre></td></tr></table>
</div>
</div><p>挑选部分节点，在各自节点的工作目录为其生成初始账户，账户地址会显示在终端，记住为每个节点账户所设的密码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ geth --datadir node0/data account new
WARN <span class="o">[</span>12-23<span class="p">|</span>18:45:02.029<span class="o">]</span> Sanitizing cache to Go<span class="s1">&#39;s GC limits       provided=1024 updated=655
</span><span class="s1">INFO [12-23|18:45:02.031] Maximum peer count                       ETH=25 LES=0 total=25
</span><span class="s1">Your new account is locked with a password. Please give a password. Do not forget this password.
</span><span class="s1">Passphrase: 
</span><span class="s1">Repeat passphrase: 
</span><span class="s1">Address: {bffe4ff0cbd0a7590fb71966d1e6bb1a4c2359e0}
</span><span class="s1">$ geth --datadir node1/data account new
</span><span class="s1">WARN [12-23|18:45:13.335] Sanitizing cache to Go&#39;</span>s GC limits       <span class="nv">provided</span><span class="o">=</span><span class="m">1024</span> <span class="nv">updated</span><span class="o">=</span><span class="m">655</span>
INFO <span class="o">[</span>12-23<span class="p">|</span>18:45:13.337<span class="o">]</span> Maximum peer count                       <span class="nv">ETH</span><span class="o">=</span><span class="m">25</span> <span class="nv">LES</span><span class="o">=</span><span class="m">0</span> <span class="nv">total</span><span class="o">=</span><span class="m">25</span>
Your new account is locked with a password. Please give a password. Do not forget this password.
Passphrase: 
Repeat passphrase: 
Address: <span class="o">{</span>dfb9cd6f474188fecbaafb9335d2905f08794612<span class="o">}</span>
$ geth --datadir node2/data account new
WARN <span class="o">[</span>12-23<span class="p">|</span>18:45:26.461<span class="o">]</span> Sanitizing cache to Go<span class="s1">&#39;s GC limits       provided=1024 updated=655
</span><span class="s1">INFO [12-23|18:45:26.462] Maximum peer count                       ETH=25 LES=0 total=25
</span><span class="s1">Your new account is locked with a password. Please give a password. Do not forget this password.
</span><span class="s1">Passphrase: 
</span><span class="s1">Repeat passphrase: 
</span><span class="s1">Address: {b7ce2bd1cb7232b92220f91aa44bfd48d0d4e806}
</span><span class="s1">$ geth --datadir node3/data account new
</span><span class="s1">WARN [12-23|18:45:35.615] Sanitizing cache to Go&#39;</span>s GC limits       <span class="nv">provided</span><span class="o">=</span><span class="m">1024</span> <span class="nv">updated</span><span class="o">=</span><span class="m">655</span>
INFO <span class="o">[</span>12-23<span class="p">|</span>18:45:35.616<span class="o">]</span> Maximum peer count                       <span class="nv">ETH</span><span class="o">=</span><span class="m">25</span> <span class="nv">LES</span><span class="o">=</span><span class="m">0</span> <span class="nv">total</span><span class="o">=</span><span class="m">25</span>
Your new account is locked with a password. Please give a password. Do not forget this password.
Passphrase: 
Repeat passphrase: 
Address: <span class="o">{</span>174ec46a6cda172678dfebe0ed8b0c7da685c9a4<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>为了添加账户到初始区块，使用上述产生的账户地址更新<code>genesis.json</code>文件的<code>alloc</code>字段内容。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ cat node0/genesis.json
<span class="o">{</span>
    <span class="s2">&#34;config&#34;</span>: <span class="o">{</span>
        <span class="s2">&#34;chainId&#34;</span>: 10,
        <span class="s2">&#34;homesteadBlock&#34;</span>: 0,
        <span class="s2">&#34;eip150Block&#34;</span>: 0,
        <span class="s2">&#34;eip150Hash&#34;</span>: <span class="s2">&#34;0x0000000000000000000000000000000000000000000000000000000000000000&#34;</span>,
        <span class="s2">&#34;eip155Block&#34;</span>: 0,
        <span class="s2">&#34;eip158Block&#34;</span>: 0,
        <span class="s2">&#34;byzantiumBlock&#34;</span>: 0,
        <span class="s2">&#34;constantinopleBlock&#34;</span>: 0,
        <span class="s2">&#34;istanbul&#34;</span>: <span class="o">{</span>
            <span class="s2">&#34;epoch&#34;</span>: 30000,
            <span class="s2">&#34;policy&#34;</span>: <span class="m">0</span>
        <span class="o">}</span>,
        <span class="s2">&#34;txnSizeLimit&#34;</span>: 64,
        <span class="s2">&#34;isQuorum&#34;</span>: <span class="nb">true</span>
    <span class="o">}</span>,
    <span class="s2">&#34;nonce&#34;</span>: <span class="s2">&#34;0x0&#34;</span>,
    <span class="s2">&#34;timestamp&#34;</span>: <span class="s2">&#34;0x5e00998d&#34;</span>,
    <span class="s2">&#34;extraData&#34;</span>: <span class="s2">&#34;0x0000000000000000000000000000000000000000000000000000000000000000f89af854947fec892a867a2da2e4f1ae1646c29e40d0d7a5c69465cc0df8e88fa0fbda0337b3e0b10be9c27325c394786083c93b12404fd4100ec497810b5cfa0a71919428cd575468829f98dabe99f22fd6f3f09b658700b8410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0&#34;</span>,
    <span class="s2">&#34;gasLimit&#34;</span>: <span class="s2">&#34;0xe0000000&#34;</span>,
    <span class="s2">&#34;difficulty&#34;</span>: <span class="s2">&#34;0x1&#34;</span>,
    <span class="s2">&#34;mixHash&#34;</span>: <span class="s2">&#34;0x63746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365&#34;</span>,
    <span class="s2">&#34;coinbase&#34;</span>: <span class="s2">&#34;0x0000000000000000000000000000000000000000&#34;</span>,
    <span class="s2">&#34;alloc&#34;</span>: <span class="o">{</span>
        <span class="s2">&#34;bffe4ff0cbd0a7590fb71966d1e6bb1a4c2359e0&#34;</span>: <span class="o">{</span>
            <span class="s2">&#34;balance&#34;</span>: <span class="s2">&#34;0x446c3b15f9926687d2c40534fdb564000000000000&#34;</span>
        <span class="o">}</span>,
        <span class="s2">&#34;dfb9cd6f474188fecbaafb9335d2905f08794612&#34;</span>: <span class="o">{</span>
            <span class="s2">&#34;balance&#34;</span>: <span class="s2">&#34;0x446c3b15f9926687d2c40534fdb564000000000000&#34;</span>
        <span class="o">}</span>,
        <span class="s2">&#34;b7ce2bd1cb7232b92220f91aa44bfd48d0d4e806&#34;</span>: <span class="o">{</span>
            <span class="s2">&#34;balance&#34;</span>: <span class="s2">&#34;0x446c3b15f9926687d2c40534fdb564000000000000&#34;</span>
        <span class="o">}</span>,
        <span class="s2">&#34;174ec46a6cda172678dfebe0ed8b0c7da685c9a4&#34;</span>: <span class="o">{</span>
            <span class="s2">&#34;balance&#34;</span>: <span class="s2">&#34;0x446c3b15f9926687d2c40534fdb564000000000000&#34;</span>
        <span class="o">}</span>
    <span class="o">}</span>,
    <span class="s2">&#34;number&#34;</span>: <span class="s2">&#34;0x0&#34;</span>,
    <span class="s2">&#34;gasUsed&#34;</span>: <span class="s2">&#34;0x0&#34;</span>,
    <span class="s2">&#34;parentHash&#34;</span>: <span class="s2">&#34;0x0000000000000000000000000000000000000000000000000000000000000000&#34;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>将之前步骤中产生的初始化文件移动到相应节点的工作目录。这些文件现在位于领导节点的工作目录。<code>genesis.json</code>放到每个节点的工作目录, <code>static-nodes.json</code>放到每个节点的<code>data</code>目录。<code>X/nodekey</code>放到对应节点的<code>data/geth</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ cp node0/genesis.json node1
$ cp node0/genesis.json node2
$ cp node0/genesis.json node3

$ cp node0/static-nodes.json node0/data/
$ cp node0/static-nodes.json node1/data/
$ cp node0/static-nodes.json node2/data/
$ cp node0/static-nodes.json node3/data/

$ cp node0/0/nodekey node0/data/geth
$ cp node0/1/nodekey node1/data/geth
$ cp node0/2/nodekey node2/data/geth
$ cp node0/3/nodekey node3/data/geth
</code></pre></td></tr></table>
</div>
</div><p>分别在各自节点工作目录执行节点初始化工作</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">cd</span> node0
$ geth --datadir data init genesis.json
WARN <span class="o">[</span>12-23<span class="p">|</span>18:52:30.425<span class="o">]</span> Sanitizing cache to Go<span class="s1">&#39;s GC limits       provided=1024 updated=655
</span><span class="s1">INFO [12-23|18:52:30.438] Maximum peer count                       ETH=25 LES=0 total=25
</span><span class="s1">INFO [12-23|18:52:30.439] Allocated cache and file handles         database=/home/shuzang/istanbul/node0/data/geth/chaindata cache=16 handles=16
</span><span class="s1">INFO [12-23|18:52:30.453] Writing custom genesis block 
</span><span class="s1">INFO [12-23|18:52:30.455] Persisted trie from memory database      nodes=5 size=819.00B time=76.952µs gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00B
</span><span class="s1">INFO [12-23|18:52:30.456] Successfully wrote genesis state         database=chaindata                                        hash=afaace…b46039
</span><span class="s1">INFO [12-23|18:52:30.456] Allocated cache and file handles         database=/home/shuzang/istanbul/node0/data/geth/lightchaindata cache=16 handles=16
</span><span class="s1">INFO [12-23|18:52:30.460] Writing custom genesis block 
</span><span class="s1">INFO [12-23|18:52:30.460] Persisted trie from memory database      nodes=5 size=819.00B time=47.175µs gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00B
</span><span class="s1">INFO [12-23|18:52:30.460] Successfully wrote genesis state         database=lightchaindata                                        hash=afaace…b46039
</span><span class="s1">
</span><span class="s1">$ cd ../node1
</span><span class="s1">$ geth --datadir data init genesis.json
</span><span class="s1">WARN [12-23|18:53:24.245] Sanitizing cache to Go&#39;</span>s GC limits       <span class="nv">provided</span><span class="o">=</span><span class="m">1024</span> <span class="nv">updated</span><span class="o">=</span><span class="m">655</span>
INFO <span class="o">[</span>12-23<span class="p">|</span>18:53:24.246<span class="o">]</span> Maximum peer count                       <span class="nv">ETH</span><span class="o">=</span><span class="m">25</span> <span class="nv">LES</span><span class="o">=</span><span class="m">0</span> <span class="nv">total</span><span class="o">=</span><span class="m">25</span>
INFO <span class="o">[</span>12-23<span class="p">|</span>18:53:24.247<span class="o">]</span> Allocated cache and file handles         <span class="nv">database</span><span class="o">=</span>/home/shuzang/istanbul/node1/data/geth/chaindata <span class="nv">cache</span><span class="o">=</span><span class="m">16</span> <span class="nv">handles</span><span class="o">=</span><span class="m">16</span>
INFO <span class="o">[</span>12-23<span class="p">|</span>18:53:24.251<span class="o">]</span> Writing custom genesis block 
INFO <span class="o">[</span>12-23<span class="p">|</span>18:53:24.252<span class="o">]</span> Persisted trie from memory database      <span class="nv">nodes</span><span class="o">=</span><span class="m">5</span> <span class="nv">size</span><span class="o">=</span>819.00B <span class="nv">time</span><span class="o">=</span>51.433µs <span class="nv">gcnodes</span><span class="o">=</span><span class="m">0</span> <span class="nv">gcsize</span><span class="o">=</span>0.00B <span class="nv">gctime</span><span class="o">=</span>0s <span class="nv">livenodes</span><span class="o">=</span><span class="m">1</span> <span class="nv">livesize</span><span class="o">=</span>0.00B
INFO <span class="o">[</span>12-23<span class="p">|</span>18:53:24.252<span class="o">]</span> Successfully wrote genesis state         <span class="nv">database</span><span class="o">=</span>chaindata                                        <span class="nv">hash</span><span class="o">=</span>afaace…b46039
INFO <span class="o">[</span>12-23<span class="p">|</span>18:53:24.252<span class="o">]</span> Allocated cache and file handles         <span class="nv">database</span><span class="o">=</span>/home/shuzang/istanbul/node1/data/geth/lightchaindata <span class="nv">cache</span><span class="o">=</span><span class="m">16</span> <span class="nv">handles</span><span class="o">=</span><span class="m">16</span>
INFO <span class="o">[</span>12-23<span class="p">|</span>18:53:24.255<span class="o">]</span> Writing custom genesis block 
INFO <span class="o">[</span>12-23<span class="p">|</span>18:53:24.255<span class="o">]</span> Persisted trie from memory database      <span class="nv">nodes</span><span class="o">=</span><span class="m">5</span> <span class="nv">size</span><span class="o">=</span>819.00B <span class="nv">time</span><span class="o">=</span>48.23µs  <span class="nv">gcnodes</span><span class="o">=</span><span class="m">0</span> <span class="nv">gcsize</span><span class="o">=</span>0.00B <span class="nv">gctime</span><span class="o">=</span>0s <span class="nv">livenodes</span><span class="o">=</span><span class="m">1</span> <span class="nv">livesize</span><span class="o">=</span>0.00B
INFO <span class="o">[</span>12-23<span class="p">|</span>18:53:24.255<span class="o">]</span> Successfully wrote genesis state         <span class="nv">database</span><span class="o">=</span>lightchaindata                                        <span class="nv">hash</span><span class="o">=</span>afaace…b46039


$ <span class="nb">cd</span> ../node2
$ geth --datadir data init genesis.json
WARN <span class="o">[</span>12-23<span class="p">|</span>18:53:52.025<span class="o">]</span> Sanitizing cache to Go<span class="s1">&#39;s GC limits       provided=1024 updated=655
</span><span class="s1">INFO [12-23|18:53:52.026] Maximum peer count                       ETH=25 LES=0 total=25
</span><span class="s1">INFO [12-23|18:53:52.027] Allocated cache and file handles         database=/home/shuzang/istanbul/node2/data/geth/chaindata cache=16 handles=16
</span><span class="s1">INFO [12-23|18:53:52.032] Writing custom genesis block 
</span><span class="s1">INFO [12-23|18:53:52.032] Persisted trie from memory database      nodes=5 size=819.00B time=76.54µs gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00B
</span><span class="s1">INFO [12-23|18:53:52.032] Successfully wrote genesis state         database=chaindata                                        hash=afaace…b46039
</span><span class="s1">INFO [12-23|18:53:52.032] Allocated cache and file handles         database=/home/shuzang/istanbul/node2/data/geth/lightchaindata cache=16 handles=16
</span><span class="s1">INFO [12-23|18:53:52.035] Writing custom genesis block 
</span><span class="s1">INFO [12-23|18:53:52.035] Persisted trie from memory database      nodes=5 size=819.00B time=44.94µs gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00B
</span><span class="s1">INFO [12-23|18:53:52.035] Successfully wrote genesis state         database=lightchaindata                                        hash=afaace…b46039
</span><span class="s1">
</span><span class="s1">
</span><span class="s1">$ cd ../node3
</span><span class="s1">$ geth --datadir data init genesis.json
</span><span class="s1">WARN [12-23|18:54:13.106] Sanitizing cache to Go&#39;</span>s GC limits       <span class="nv">provided</span><span class="o">=</span><span class="m">1024</span> <span class="nv">updated</span><span class="o">=</span><span class="m">655</span>
INFO <span class="o">[</span>12-23<span class="p">|</span>18:54:13.107<span class="o">]</span> Maximum peer count                       <span class="nv">ETH</span><span class="o">=</span><span class="m">25</span> <span class="nv">LES</span><span class="o">=</span><span class="m">0</span> <span class="nv">total</span><span class="o">=</span><span class="m">25</span>
INFO <span class="o">[</span>12-23<span class="p">|</span>18:54:13.108<span class="o">]</span> Allocated cache and file handles         <span class="nv">database</span><span class="o">=</span>/home/shuzang/istanbul/node3/data/geth/chaindata <span class="nv">cache</span><span class="o">=</span><span class="m">16</span> <span class="nv">handles</span><span class="o">=</span><span class="m">16</span>
INFO <span class="o">[</span>12-23<span class="p">|</span>18:54:13.115<span class="o">]</span> Writing custom genesis block 
INFO <span class="o">[</span>12-23<span class="p">|</span>18:54:13.122<span class="o">]</span> Persisted trie from memory database      <span class="nv">nodes</span><span class="o">=</span><span class="m">5</span> <span class="nv">size</span><span class="o">=</span>819.00B <span class="nv">time</span><span class="o">=</span>65.787µs <span class="nv">gcnodes</span><span class="o">=</span><span class="m">0</span> <span class="nv">gcsize</span><span class="o">=</span>0.00B <span class="nv">gctime</span><span class="o">=</span>0s <span class="nv">livenodes</span><span class="o">=</span><span class="m">1</span> <span class="nv">livesize</span><span class="o">=</span>0.00B
INFO <span class="o">[</span>12-23<span class="p">|</span>18:54:13.123<span class="o">]</span> Successfully wrote genesis state         <span class="nv">database</span><span class="o">=</span>chaindata                                        <span class="nv">hash</span><span class="o">=</span>afaace…b46039
INFO <span class="o">[</span>12-23<span class="p">|</span>18:54:13.123<span class="o">]</span> Allocated cache and file handles         <span class="nv">database</span><span class="o">=</span>/home/shuzang/istanbul/node3/data/geth/lightchaindata <span class="nv">cache</span><span class="o">=</span><span class="m">16</span> <span class="nv">handles</span><span class="o">=</span><span class="m">16</span>
INFO <span class="o">[</span>12-23<span class="p">|</span>18:54:13.126<span class="o">]</span> Writing custom genesis block 
INFO <span class="o">[</span>12-23<span class="p">|</span>18:54:13.127<span class="o">]</span> Persisted trie from memory database      <span class="nv">nodes</span><span class="o">=</span><span class="m">5</span> <span class="nv">size</span><span class="o">=</span>819.00B <span class="nv">time</span><span class="o">=</span>45.203µs <span class="nv">gcnodes</span><span class="o">=</span><span class="m">0</span> <span class="nv">gcsize</span><span class="o">=</span>0.00B <span class="nv">gctime</span><span class="o">=</span>0s <span class="nv">livenodes</span><span class="o">=</span><span class="m">1</span> <span class="nv">livesize</span><span class="o">=</span>0.00B
INFO <span class="o">[</span>12-23<span class="p">|</span>18:54:13.127<span class="o">]</span> Successfully wrote genesis state         <span class="nv">database</span><span class="o">=</span>lightchaindata                                        <span class="nv">hash</span><span class="o">=</span>afaace…b46039

</code></pre></td></tr></table>
</div>
</div><p>通过创建并运行脚本一次启动所有节点</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 当前位于node4目录下，先跳出</span>
$ <span class="nb">cd</span> ..
$ nano startall.sh
.... 粘贴以下内容，使端口号符合static-nodes.json中设置的端口号
<span class="c1">#!/bin/bash</span>
<span class="nb">cd</span> node0
<span class="nv">PRIVATE_CONFIG</span><span class="o">=</span>ignore nohup geth --datadir data --nodiscover --istanbul.blockperiod <span class="m">5</span> --syncmode full --mine --minerthreads <span class="m">1</span> --verbosity <span class="m">5</span> --networkid <span class="m">10</span> --rpc --rpcaddr 0.0.0.0 --rpcport <span class="m">22000</span> --rpcapi admin,db,eth,debug,miner,net,shh,txpool,personal,web3,quorum,istanbul --ws --wsorigins<span class="o">=</span><span class="s2">&#34;*&#34;</span> --wsaddr 0.0.0.0 --wsport <span class="m">8545</span> --emitcheckpoints --port <span class="m">30300</span> 2&gt;&gt;node.log <span class="p">&amp;</span>


<span class="nb">cd</span> ../node1
<span class="nv">PRIVATE_CONFIG</span><span class="o">=</span>ignore nohup geth --datadir data --nodiscover --istanbul.blockperiod <span class="m">5</span> --syncmode full --mine --minerthreads <span class="m">1</span> --verbosity <span class="m">5</span> --networkid <span class="m">10</span> --rpc --rpcaddr 0.0.0.0 --rpcport <span class="m">22001</span> --rpcapi admin,db,eth,debug,miner,net,shh,txpool,personal,web3,quorum,istanbul --ws --wsorigins<span class="o">=</span><span class="s2">&#34;*&#34;</span> --wsaddr 0.0.0.0 --wsport <span class="m">8546</span> --emitcheckpoints --port <span class="m">30301</span> 2&gt;&gt;node.log <span class="p">&amp;</span>

<span class="nb">cd</span> ../node2
<span class="nv">PRIVATE_CONFIG</span><span class="o">=</span>ignore nohup geth --datadir data --nodiscover --istanbul.blockperiod <span class="m">5</span> --syncmode full --mine --minerthreads <span class="m">1</span> --verbosity <span class="m">5</span> --networkid <span class="m">10</span> --rpc --rpcaddr 0.0.0.0 --rpcport <span class="m">22002</span> --rpcapi admin,db,eth,debug,miner,net,shh,txpool,personal,web3,quorum,istanbul --ws --wsorigins<span class="o">=</span><span class="s2">&#34;*&#34;</span> --wsaddr 0.0.0.0 --wsport <span class="m">8547</span> --emitcheckpoints --port <span class="m">30302</span> 2&gt;&gt;node.log <span class="p">&amp;</span>

<span class="nb">cd</span> ../node3
<span class="nv">PRIVATE_CONFIG</span><span class="o">=</span>ignore nohup geth --datadir data --nodiscover --istanbul.blockperiod <span class="m">5</span> --syncmode full --mine --minerthreads <span class="m">1</span> --verbosity <span class="m">5</span> --networkid <span class="m">10</span> --rpc --rpcaddr 0.0.0.0 --rpcport <span class="m">22003</span> --rpcapi admin,db,eth,debug,miner,net,shh,txpool,personal,web3,quorum,istanbul --ws --wsorigins<span class="o">=</span><span class="s2">&#34;*&#34;</span> --wsaddr 0.0.0.0 --wsport <span class="m">8548</span> --emitcheckpoints --port <span class="m">30303</span> 2&gt;&gt;node.log <span class="p">&amp;</span>

$
See <span class="k">if</span> the any geth nodes are running.
$ ps <span class="p">|</span> grep geth
Kill geth processes
$ killall -INT geth
$
$ chmod +x startall.sh
$ ./startall.sh
$ ps
   PID TTY          TIME CMD
  <span class="m">3740</span> pts/0    00:00:00 bash
  <span class="m">4057</span> pts/0    00:00:00 geth
  <span class="m">4058</span> pts/0    00:00:00 geth
  <span class="m">4059</span> pts/0    00:00:00 geth
  <span class="m">4060</span> pts/0    00:00:00 geth
  <span class="m">4119</span> pts/0    00:00:00 ps
</code></pre></td></tr></table>
</div>
</div><p>第一次启动不需要使用<code>ps</code>和<code>killall</code>命令，只有之后忘记客户端是否启动的时候才需要</p>
<h3 id="62-树莓派">6.2 树莓派</h3>
<p>以 raspberry pi 3B+ 为例，介绍添加节点到当前网络的操作，raspberry pi 3B 操作相似。</p>
<p>在台式电脑中创建节点工作目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ mkdir node4
</code></pre></td></tr></table>
</div>
</div><p>进入工作目录，生成相关文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">cd</span> node4
$ ../istanbul-tools/build/bin/istanbul setup --num <span class="m">1</span> --verbose --quorum --save
validators
<span class="o">{</span>
	<span class="s2">&#34;Address&#34;</span>: <span class="s2">&#34;0x93b770a0d6f1b4eb8a96daf8a3f1e9a2d860696c&#34;</span>,
	<span class="s2">&#34;Nodekey&#34;</span>: <span class="s2">&#34;244857df9699fab362c80864888a497caa5d98d48cd87a9cebd12696fcb0289b&#34;</span>,
	<span class="s2">&#34;NodeInfo&#34;</span>: <span class="s2">&#34;enode://195c4a09528db47ba3625cbb21de2c8f0f15cf1a821a95e2decd46837369e7b1d192a7108b627a3840ece306baba38ca6c11ab0dc236a3542bc56ab9204eb75e@0.0.0.0:30303?discport=0&#34;</span>
<span class="o">}</span>



genesis.json
<span class="o">{</span>
    <span class="s2">&#34;config&#34;</span>: <span class="o">{</span>
        <span class="s2">&#34;chainId&#34;</span>: 10,
        <span class="s2">&#34;homesteadBlock&#34;</span>: 0,
        <span class="s2">&#34;eip150Block&#34;</span>: 0,
        <span class="s2">&#34;eip150Hash&#34;</span>: <span class="s2">&#34;0x0000000000000000000000000000000000000000000000000000000000000000&#34;</span>,
        <span class="s2">&#34;eip155Block&#34;</span>: 0,
        <span class="s2">&#34;eip158Block&#34;</span>: 0,
        <span class="s2">&#34;byzantiumBlock&#34;</span>: 0,
        <span class="s2">&#34;constantinopleBlock&#34;</span>: 0,
        <span class="s2">&#34;istanbul&#34;</span>: <span class="o">{</span>
            <span class="s2">&#34;epoch&#34;</span>: 30000,
            <span class="s2">&#34;policy&#34;</span>: <span class="m">0</span>
        <span class="o">}</span>,
        <span class="s2">&#34;txnSizeLimit&#34;</span>: 64,
        <span class="s2">&#34;isQuorum&#34;</span>: <span class="nb">true</span>
    <span class="o">}</span>,
    <span class="s2">&#34;nonce&#34;</span>: <span class="s2">&#34;0x0&#34;</span>,
    <span class="s2">&#34;timestamp&#34;</span>: <span class="s2">&#34;0x5e00afc6&#34;</span>,
    <span class="s2">&#34;extraData&#34;</span>: <span class="s2">&#34;0x0000000000000000000000000000000000000000000000000000000000000000f85ad59493b770a0d6f1b4eb8a96daf8a3f1e9a2d860696cb8410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0&#34;</span>,
    <span class="s2">&#34;gasLimit&#34;</span>: <span class="s2">&#34;0xe0000000&#34;</span>,
    <span class="s2">&#34;difficulty&#34;</span>: <span class="s2">&#34;0x1&#34;</span>,
    <span class="s2">&#34;mixHash&#34;</span>: <span class="s2">&#34;0x63746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365&#34;</span>,
    <span class="s2">&#34;coinbase&#34;</span>: <span class="s2">&#34;0x0000000000000000000000000000000000000000&#34;</span>,
    <span class="s2">&#34;alloc&#34;</span>: <span class="o">{</span>
        <span class="s2">&#34;93b770a0d6f1b4eb8a96daf8a3f1e9a2d860696c&#34;</span>: <span class="o">{</span>
            <span class="s2">&#34;balance&#34;</span>: <span class="s2">&#34;0x446c3b15f9926687d2c40534fdb564000000000000&#34;</span>
        <span class="o">}</span>
    <span class="o">}</span>,
    <span class="s2">&#34;number&#34;</span>: <span class="s2">&#34;0x0&#34;</span>,
    <span class="s2">&#34;gasUsed&#34;</span>: <span class="s2">&#34;0x0&#34;</span>,
    <span class="s2">&#34;parentHash&#34;</span>: <span class="s2">&#34;0x0000000000000000000000000000000000000000000000000000000000000000&#34;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>将产生的节点信息添加到node0目录的<code>static-nodes.json</code>文件，设置 IP 地址和端口号</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="p">[</span>
	<span class="s2">&#34;enode://7117f995cdb2d79eb90bc4a575c5f82bbe4aa6ac87f966b18e2e19bd29e728ba9ca85062a6af5c188bb159641392e2ac3559712d9a31e965220659412a4a8c3e@192.168.191.2:30300?discport=0&#34;</span><span class="p">,</span>
	<span class="s2">&#34;enode://cb790b57310d70bfb13e417e9dc22f3b0afc0065f4c5babc2f95e3ff75e99d343547585a0b2ad6be6f0497f401e93c16dadec5a68d820cb918fa0255696940f2@192.168.191.2:30301?discport=0&#34;</span><span class="p">,</span>
	<span class="s2">&#34;enode://0e6118122721993e84da84416cb9752a4b5c1b0077a915eb89d0cdff00862c3f13d9edc676c583997f6d9051245ba0f5587750d09d04482774a11f6d13a1c43b@192.168.191.2:30302?discport=0&#34;</span><span class="p">,</span>
	<span class="s2">&#34;enode://8d510973b1b245cb8cec8369948080b7e5adca90730112739307096ab445182415e92967de7096c013644f4b92025c7e29db23a145040cb3b9d46831fab0e8e2@192.168.191.2:30303?discport=0&#34;</span><span class="p">,</span>
	<span class="s2">&#34;enode://195c4a09528db47ba3625cbb21de2c8f0f15cf1a821a95e2decd46837369e7b1d192a7108b627a3840ece306baba38ca6c11ab0dc236a3542bc56ab9204eb75e@192.168.191.3:30303?discport=0&#34;</span>
<span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><p>复制已运行区块链的<code>static-nodes.json</code>和<code>genesis.json</code>文件到当前节点相应目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ cp ../node0/genesis.json .
</code></pre></td></tr></table>
</div>
</div><p>复制新的<code>static-nodes.json</code>文件到所有节点的<code>data</code>目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ mkdir -p data/geth
$ cp ../node0/static-nodes.json data
$ <span class="nb">cd</span> ..
$ cp node0/static-nodes.json node0/data
$ cp node0/static-nodes.json node1/data
$ cp node0/static-nodes.json node2/data
$ cp node0/static-nodes.json node3/data
</code></pre></td></tr></table>
</div>
</div><p>复制之前生成的 nodekey 到新节点工作目录的geth目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">cd</span> node4
$ cp 0/nodekey data/geth
</code></pre></td></tr></table>
</div>
</div><p>利用 win10 的远程桌面连接(xrdp已安装)或者 ftp 等文件(vsftpd已安装)传输协议，将 node4 整个工作目录复制到 raspberry pi 3B+ 中</p>
<p>生成节点账户并记录账户地址</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">cd</span> node4
$ geth --datadir data account new
</code></pre></td></tr></table>
</div>
</div><p>初始化节点</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ geth --datadir data init genesis.json
</code></pre></td></tr></table>
</div>
</div><p>创建 start.sh 脚本用于启动节点，脚本基本内容如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sh" data-lang="sh"><span class="cp">#!/bin/bash
</span><span class="cp"></span><span class="nv">PRIVATE_CONFIG</span><span class="o">=</span>ignore nohup geth --datadir data --nodiscover --istanbul.blockperiod <span class="m">5</span> --syncmode full --verbosity <span class="m">5</span> --networkid <span class="m">10</span> --rpc --rpcaddr 0.0.0.0 --rpcport <span class="m">22000</span> --rpcapi admin,db,eth,debug,miner,net,shh,txpool,personal,web3,quorum,istanbul --ws --wsorigins<span class="o">=</span><span class="s2">&#34;*&#34;</span> --wsaddr 0.0.0.0 --wsport <span class="m">8545</span> --emitcheckpoints --port <span class="m">30303</span> 2&gt;&gt;node.log <span class="p">&amp;</span>
</code></pre></td></tr></table>
</div>
</div><p>授予 start.sh 脚本执行权限，执行该脚本</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">.... 跳转到脚本所在目录
$ sudo chmod +x start.sh
$ ./start.sh
</code></pre></td></tr></table>
</div>
</div><p>执行完后查找 geth 进程是否启动，并执行<code>geth attach</code>命令接入 geth 控制台</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ ps <span class="p">|</span> grep geth
 <span class="m">16877</span> pts/0    00:00:01 geth
</code></pre></td></tr></table>
</div>
</div><p>接下来可在任一设备的节点目录下通过 websocket 进行操作。</p>
<p>至此利用 Quorum 搭建私链网络完毕，用作之后的实验平台，接下来进行交易验证、合约部署和测试。</p>]]></description></item><item><title>利用虚拟机搭建实验平台</title><link>https://shuzang.github.io/%E5%88%A9%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BA%E5%AE%9E%E9%AA%8C%E5%B9%B3%E5%8F%B0/</link><pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://shuzang.github.io/%E5%88%A9%E7%94%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%90%AD%E5%BB%BA%E5%AE%9E%E9%AA%8C%E5%B9%B3%E5%8F%B0/</guid><description><![CDATA[<p>由于网络原因最后没有成功</p>
<p>先声明结论：最后由于网络原因没有成功</p>
<h3 id="一-前言">一. 前言</h3>
<p>为了设计一个对物联网的访问控制方案，首先利用两台树莓派和两台计算机搭建完成了一个quorum区块链实验平台，并采用了Istanbul-BFT共识算法，但未启用隐私管理器。之后将在该实验平台上部署编写的访问控制合约。实验平台的网络拓扑如下：</p>
<p></p>
<p>平台的搭建主要分为以下几步</p>
<ol>
<li>计算机环境配置</li>
<li>树莓派启动和环境配置</li>
<li>quorum私链网络搭建和测试运行</li>
</ol>
<h3 id="二-计算机环境配置">二. 计算机环境配置</h3>
<h4 id="1-设备和操作系统选择">1. 设备和操作系统选择</h4>
<p>实验平台共使用了两台计算机和两台树莓派。设备和操作系统的详细信息如下：</p>
<table>
<thead>
<tr>
<th>设备</th>
<th>CPU</th>
<th>操作系统</th>
<th>内存</th>
<th>硬盘</th>
</tr>
</thead>
<tbody>
<tr>
<td>清华同方</td>
<td>Intel Core i5-4460, 3.2GHz</td>
<td>Ubuntu 18.04 LTS(虚拟机)</td>
<td>2GB</td>
<td>50GB</td>
</tr>
<tr>
<td>华硕A550</td>
<td>Intel Core i5-4200, 2.8GHz</td>
<td>Ubuntu 18.04 LTS(虚拟机)</td>
<td>2GB</td>
<td>50GB</td>
</tr>
<tr>
<td>Raspberry Pi 3 Model B Plus</td>
<td>quad-core ARM Cortex A53, 1.4GHz</td>
<td>Raspbian  Buster</td>
<td>1GB</td>
<td>32GB(microSD card)</td>
</tr>
<tr>
<td>Raspberry Pi 3 Model B</td>
<td>quad-core ARM Cortex A53, 1.2GHz</td>
<td>Raspbian Buster</td>
<td>1GB</td>
<td>16GB(microSD card)</td>
</tr>
</tbody>
</table>
<h4 id="2-静态ip分配">2. 静态ip分配</h4>
<p>两台计算机的操作环境是在虚拟机上完成的，涉及到网络相关操作，这里事先对各设备进行静态ip的分配</p>
<table>
<thead>
<tr>
<th>设备</th>
<th>主机名</th>
<th>IP地址</th>
<th>操作系统</th>
</tr>
</thead>
<tbody>
<tr>
<td>清华同方（PC）</td>
<td>NodeA</td>
<td>192.168.191.2</td>
<td>Ubuntu 18.04 LTS</td>
</tr>
<tr>
<td>华硕（Laptop)</td>
<td>NodeB</td>
<td>192.168.191.3</td>
<td>Ubuntu 18.04 LTS</td>
</tr>
<tr>
<td>Pi 3B+</td>
<td>NodeC</td>
<td>192.168.191.4</td>
<td>Raspbian Buster</td>
</tr>
<tr>
<td>Pi 3B</td>
<td>NodeD</td>
<td>192.168.191.5</td>
<td>Raspbian Buster</td>
</tr>
</tbody>
</table>
<p>注：以下以PC为例进行相关配置，Laptop配置操作基本相同。</p>
<h4 id="3-操作系统设置">3. 操作系统设置</h4>
<p>在VM ware中安装Ubuntu 18.04虚拟机，安装完成后完成如下基础配置操作：</p>
<p><strong>(1) 更新源和系统</strong></p>
<blockquote>
<p>根据自己需要选择是否更换软件源，此处我使用了原生的源</p>
</blockquote>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo apt-get update
$ sudo apt-get upgrade
</code></pre></td></tr></table>
</div>
</div><p><strong>(2) 调整系统时间</strong></p>
<p>查看系统时区是否正确</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ timedatectl
                      Local time: 五 2019-09-13 11:07:13 +08
                  Universal time: 五 2019-09-13 03:07:13 UTC
                        RTC time: 五 2019-09-13 03:07:13
                       Time zone: Asia/Ulaanbaatar <span class="o">(</span>+08, +0800<span class="o">)</span>
       System clock synchronized: yes
systemd-timesyncd.service active: yes
                 RTC in <span class="nb">local</span> TZ: no
</code></pre></td></tr></table>
</div>
</div><p>若不正确，使用下列命令设置时区，时区根据自己所处位置调整</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ timedatectl set-timezone Asia/Shanghai
</code></pre></td></tr></table>
</div>
</div><p><strong>(3) 设置主机名</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo hostnamectl set-hostname NodeA
</code></pre></td></tr></table>
</div>
</div><p>重启终端查看新的主机名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ hostnamectl
   Static hostname: NodeA
         Icon name: computer-vm
           Chassis: vm
        Machine ID: d16107a02250422baa2e04fb10c98558
           Boot ID: ea8fbdb520774a52a205281b4034f8b0
    Virtualization: vmware
  Operating System: Ubuntu 18.04.3 LTS
            Kernel: Linux 4.15.0-20-generic
      Architecture: x86-64
</code></pre></td></tr></table>
</div>
</div><p><strong>(4) 设置静态ip</strong></p>
<p>安装<code>net-tools</code>工具</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo apt-get install net-tools
</code></pre></td></tr></table>
</div>
</div><p>设置虚拟机网络为桥接模式，桥接到无线网卡。在<code>/etc/netplan</code>目录下创建配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo nano /etc/netplan/02_config.yaml
</code></pre></td></tr></table>
</div>
</div><p>在配置文件中添加如下信息</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-yaml" data-lang="yaml"><span class="nt">network</span><span class="p">:</span><span class="w">
</span><span class="w"> </span><span class="nt">version</span><span class="p">:</span><span class="w"> </span><span class="m">2</span><span class="w">
</span><span class="w"> </span><span class="nt">renderer</span><span class="p">:</span><span class="w"> </span><span class="l">networkd</span><span class="w">
</span><span class="w"> </span><span class="nt">ethernets</span><span class="p">:</span><span class="w">
</span><span class="w">   </span><span class="nt">ens33</span><span class="p">:</span><span class="w">
</span><span class="w">     </span><span class="nt">addresses</span><span class="p">:</span><span class="w">
</span><span class="w">       </span>- <span class="m">192.168.191.2</span><span class="l">/24</span><span class="w">
</span><span class="w">     </span><span class="nt">gateway4</span><span class="p">:</span><span class="w"> </span><span class="m">192.168.191.1</span><span class="w">
</span><span class="w">     </span><span class="nt">nameservers</span><span class="p">:</span><span class="w">
</span><span class="w">         </span><span class="nt">search</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="l">mydomain, otherdomain]</span><span class="w">
</span><span class="w">         </span><span class="nt">addresses</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="m">1.1.1.1</span><span class="p">,</span><span class="w"> </span><span class="m">8.8.8.8</span><span class="p">]</span><span class="w">
</span></code></pre></td></tr></table>
</div>
</div><p><code>ens33</code>是网卡名，<code>addresses</code>下的内容为自定义的静态ip，<code>gateway4</code>为网关地址。保存退出，使用<code>netplan</code>启用设置，并查询更改后的ip地址</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo netplan apply
$ ifconfig
ens33: <span class="nv">flags</span><span class="o">=</span>4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu <span class="m">1500</span>
        inet 192.168.191.2  netmask 255.255.255.0  broadcast 192.168.191.255
        inet6 fe80::94ff:42f8:57d5:a20f  prefixlen <span class="m">64</span>  scopeid 0x20&lt;link&gt;
        ether 00:0c:29:09:08:33  txqueuelen <span class="m">1000</span>  <span class="o">(</span>以太网<span class="o">)</span>
        RX packets <span class="m">155321</span>  bytes <span class="m">207407688</span> <span class="o">(</span>207.4 MB<span class="o">)</span>
        RX errors <span class="m">0</span>  dropped <span class="m">0</span>  overruns <span class="m">0</span>  frame <span class="m">0</span>
        TX packets <span class="m">76320</span>  bytes <span class="m">4839627</span> <span class="o">(</span>4.8 MB<span class="o">)</span>
        TX errors <span class="m">0</span>  dropped <span class="m">0</span> overruns <span class="m">0</span>  carrier <span class="m">0</span>  collisions <span class="m">0</span>
lo: ...
</code></pre></td></tr></table>
</div>
</div><p><strong>(5) 重新安装VMware tools</strong></p>
<p>只有安装VMware tools之后，虚拟机界面才会自动调整，并且能在虚拟机和主机之间互传文件。</p>
<h4 id="4-区块链环境配置">4. 区块链环境配置</h4>
<p>使用的是Quorum区块链，共识是Istanbul BFT。</p>
<p><strong>(1) 安装golang</strong></p>
<p>获取与安装go1.13</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ wget https://dl.google.com/go/go1.13.linux-amd64.tar.gz
$ sudo tar -xzf go1.13.linux-amd64.tar.gz -C /usr/local
$ rm go1.13.linux-amd64.tar.gz
</code></pre></td></tr></table>
</div>
</div><p>设置环境变量</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo nano /etc/profile
<span class="c1"># 在打开的文件末尾添加下列语句</span>
<span class="nb">export</span> <span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:/usr/local/go/bin
</code></pre></td></tr></table>
</div>
</div><p>更新的环境变量在下一次登录之前不会生效，但可以通过下面的命令使其直接生效</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">source</span> /etc/profile
<span class="c1"># 查看生效后的环境变量设置</span>
$ go version
go version go1.13 linux/amd64
</code></pre></td></tr></table>
</div>
</div><p>注：真正生效必须重启系统</p>
<p><strong>(2) 安装geth for quorum</strong></p>
<p>获取编译后的二进制包</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ wget https://bintray.com/quorumengineering/quorum/download_file?file_path<span class="o">=</span>v2.2.5/geth_v2.2.5_linux_amd64.tar.gz
</code></pre></td></tr></table>
</div>
</div><p>解压缩并安装</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo tar -xzf download_file?file_path<span class="o">=</span>v2.2.5%2Fgeth_v2.2.5_linux_amd64.tar.gz -C /usr/local/bin
$ rm download_file?file_path<span class="o">=</span>v2.2.5%2Fgeth_v2.2.5_linux_amd64.tar.gz
</code></pre></td></tr></table>
</div>
</div><p>测试安装</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ geth version
WARN <span class="o">[</span>09-13<span class="p">|</span>16:03:38.966<span class="o">]</span> Sanitizing cache to Go<span class="err">&#39;</span>s GC limits       <span class="nv">provided</span><span class="o">=</span><span class="m">1024</span> <span class="nv">updated</span><span class="o">=</span><span class="m">655</span>
Geth
Version: 1.8.18-stable
Git Commit: c894c2d70eacf30740d03b53ed2fb39e42641295
Quorum Version: 2.2.5
Architecture: amd64
Protocol Versions: <span class="o">[</span><span class="m">63</span> 62<span class="o">]</span>
Network Id: <span class="m">1337</span>
Go Version: go1.11.12
Operating System: linux
<span class="nv">GOPATH</span><span class="o">=</span>
<span class="nv">GOROOT</span><span class="o">=</span>/home/travis/.gimme/versions/go1.11.12.linux.amd64
</code></pre></td></tr></table>
</div>
</div><p><strong>(3) 获取并编译istanbul-tools</strong></p>
<p>istanbul-tools用来初始化istanbul-BFT共识网络及进行网络测试</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo apt-get install git
$ mkdir istanbul <span class="o">&amp;&amp;</span> <span class="nb">cd</span> istanbul
$ git clone https://github.com/jpmorganchase/istanbul-tools.git
$ <span class="nb">cd</span> istanbul-tools
</code></pre></td></tr></table>
</div>
</div><p>执行编译</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo apt-get install -y build-essential
$ make
</code></pre></td></tr></table>
</div>
</div><p>编译后的文件位于/build/bin目录下，执行测试</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ ./build/bin/istanbul istanbul --version
istanbul version v1.0.1
</code></pre></td></tr></table>
</div>
</div><h3 id="三-树莓派启动及环境配置">三. 树莓派启动及环境配置</h3>
<p>以Pi 3B+为例，Pi3B配置操作基本相同</p>
<h4 id="1-树莓派启动">1. 树莓派启动</h4>
<p>将Raspbian Buster镜像写入准备好的SD卡，重新加载在电脑中的SD卡会出现boot盘，同时也是树莓派的<code>/boot</code>目录。在boot盘根目录新建名为<code>ssh</code>的文件，开启SSH连接。同时新建<code>wpa_supplicant.conf</code>文件，编辑其内容如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=CN
 
network={
    ssid=&#34;WiFi名&#34;
    psk=&#34;密码&#34;
    priority=10
}
</code></pre></td></tr></table>
</div>
</div><p>将其中的ssid和psk更改为自己无线网络的网络名和密码。将配置好的SD卡卸载并插入树莓派，通电启动。使用Advanced IP Scanner扫描无线网络的网段，获取树莓派ip，本实验无线网络网段为192.168.191.1-254。</p>
<p>使用扫描到的ip通过Putty利用SSH协议进行登录。</p>
<h4 id="2-树莓派基本配置">2. 树莓派基本配置</h4>
<p><strong>(1) 更新源及系统</strong></p>
<p>编辑/etc/apt/sources.list文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo nano /etc/apt/sources.list
</code></pre></td></tr></table>
</div>
</div><p>注释掉原来的源，将源更新为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi
deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi
</code></pre></td></tr></table>
</div>
</div><p>保存退出，编辑/etc/apt/sources.list.d/raspi.list文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo nano /etc/apt/sources.list.d/raspi.list
</code></pre></td></tr></table>
</div>
</div><p>将源更新为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">deb http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui
deb-src http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui
</code></pre></td></tr></table>
</div>
</div><p>更新源文件列表，更新软件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo apt-get update
$ sudo apt-get upgrade
</code></pre></td></tr></table>
</div>
</div><p><strong>(2) 安装xrdp供远程连接</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo apt-get install xrdp
</code></pre></td></tr></table>
</div>
</div><p><strong>(3) 开启ftp供文件传输</strong></p>
<p>安装vsftpd</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo apt-get install vsftpd
</code></pre></td></tr></table>
</div>
</div><p>编辑配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo nano /etc/vsftpd.conf
</code></pre></td></tr></table>
</div>
</div><p>启用对树莓派的写入权限</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># Uncomment this to enable any form of FTP </span>
write command.write_enable<span class="o">=</span>YES
</code></pre></td></tr></table>
</div>
</div><p>保存退出，启用vsftpd</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo service vsftpd start
</code></pre></td></tr></table>
</div>
</div><p><strong>(4) 修改pi账户密码，时区和主机名</strong></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo raspi-config
</code></pre></td></tr></table>
</div>
</div><p>选择第一项<code>Change User Password</code>，键入新密码并确定，</p>
<p>选择第四项<code>Localisation Options</code>，选择<code>Change Timezone</code>，将时区更改为<code>Asia/Shanghai</code></p>
<p>全部设置完成后选择<code>Finish</code>退出，终端将看到如下输出</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">Current default <span class="nb">time</span> zone: <span class="s1">&#39;Asia/Shanghai&#39;</span>
Local <span class="nb">time</span> is now:      Fri Sep <span class="m">13</span> 18:40:56 CST 2019.
Universal Time is now:  Fri Sep <span class="m">13</span> 10:40:56 UTC 2019.

New password:
Retype new password:
passwd: password updated successfully
OK
</code></pre></td></tr></table>
</div>
</div><p>设置主机名</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo hostnamectl set-hostname NodeC
</code></pre></td></tr></table>
</div>
</div><p>编辑/etc/hosts文件，将127.0.1.1对应的raspberry更改为NodeC</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">127.0.0.1       localhost
::1             localhost ip6-localhost ip6-loopback
ff02::1         ip6-allnodes
ff02::2         ip6-allrouters

127.0.1.1       NodeC
</code></pre></td></tr></table>
</div>
</div><p>退出终端并使用新密码重新登录，主机名将更改为NodeC。注意此时用户名仍为pi。</p>
<p><strong>(5) 设置静态ip</strong></p>
<p>编辑<code>/etc/dhcpcd.conf</code>文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo nano /etc/dhcpcd.conf
</code></pre></td></tr></table>
</div>
</div><p>在末尾添加如下内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">interface wlan0
 
static ip_address=192.168.191.4/24
static routers=192.168.191.1
static domain_name_servers=192.168.191.1
</code></pre></td></tr></table>
</div>
</div><p>重启并以新的ip登录树莓派。</p>
<p>(6) 获取并安装geth</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ git clone -b gethonly https://github.com/shuzang/quorum-raspbian.git
$ <span class="nb">cd</span> quorum-raspbian
$ sudo cp geth /usr/local/bin
$ sudo chmod +x /usr/local/bin/geth
</code></pre></td></tr></table>
</div>
</div><p>测试安装是否成功</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ geth version
WARN <span class="o">[</span>09-13<span class="p">|</span>19:51:40.051<span class="o">]</span> Sanitizing cache to Go<span class="err">&#39;</span>s GC limits       <span class="nv">provided</span><span class="o">=</span><span class="m">1024</span> <span class="nv">updated</span><span class="o">=</span><span class="m">308</span>
Geth
Version: 1.8.18-stable
Quorum Version: 2.2.5
Architecture: arm
Protocol Versions: <span class="o">[</span><span class="m">63</span> 62<span class="o">]</span>
Network Id: <span class="m">1337</span>
Go Version: go1.11.6
Operating System: linux
<span class="nv">GOPATH</span><span class="o">=</span>
<span class="nv">GOROOT</span><span class="o">=</span>/usr/lib/go-1.11

</code></pre></td></tr></table>
</div>
</div><h3 id="四-私链网络搭建及测试运行">四. 私链网络搭建及测试运行</h3>
<p>各节点数据和相关文件的前期生成都在NodeA中由istanbul-tools工具完成。切换到NodeA节点的PC，在istanbul目录下创建四个节点的工作目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">cd</span> ~/istanbul
$ mkdir NodeA NodeB NodeC NodeD
</code></pre></td></tr></table>
</div>
</div><p>进入领导节点（这里是NodeA）目录，使用istanbul-tools工具为四个节点生成安装玩家，该命令会为所有的初始验证者节点生成 <code>static-nodes.json</code>, <code>genesis.json</code>和 nodekeys三种文件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">cd</span> NodeA
$ ../istanbul-tools/build/bin/istanbul setup --num <span class="m">4</span> --nodes --quorum --save --verbose
</code></pre></td></tr></table>
</div>
</div><p>将输出生成的文件信息</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="err">validators</span>
<span class="p">{</span>
	<span class="nt">&#34;Address&#34;</span><span class="p">:</span> <span class="s2">&#34;0x93c20b1ffa9bf8738bf194d5203e3d2e2a48428d&#34;</span><span class="p">,</span>
	<span class="nt">&#34;Nodekey&#34;</span><span class="p">:</span> <span class="s2">&#34;6f17ec19de39281ea72a6d91d1e780bf5a0e35602f0e844e82dcc9d6a9ba7716&#34;</span><span class="p">,</span>
	<span class="nt">&#34;NodeInfo&#34;</span><span class="p">:</span> <span class="s2">&#34;enode://faa50654f681a890c28be2faeef9211afaf1563c08ddb8990f6b39c561e002ea687707be68c16363f65c0755f785cb16e3b7be84e5e4eb260b0d4a6f6f83ef87@0.0.0.0:30303?discport=0&#34;</span>
<span class="p">}</span>
<span class="p">{</span>
	<span class="nt">&#34;Address&#34;</span><span class="p">:</span> <span class="s2">&#34;0xff75bd429c43de6719c2983c1e991b0279909559&#34;</span><span class="p">,</span>
	<span class="nt">&#34;Nodekey&#34;</span><span class="p">:</span> <span class="s2">&#34;b7c11c512d33e3c1de97abd8a690cdbcfac9c6802a43a6ff850b244d90258908&#34;</span><span class="p">,</span>
	<span class="nt">&#34;NodeInfo&#34;</span><span class="p">:</span> <span class="s2">&#34;enode://c286de4e89f4f209a6b32284b31829251ccb23bf5ab3bbe57ba08754392635ae755848dd6c4f367c7d92284e54e4b9f0d1a896924309380eb947e3b8c6641392@0.0.0.0:30303?discport=0&#34;</span>
<span class="p">}</span>
<span class="p">{</span>
	<span class="nt">&#34;Address&#34;</span><span class="p">:</span> <span class="s2">&#34;0xf22670e572a42729a2c10fb26f57bba46cbc3a42&#34;</span><span class="p">,</span>
	<span class="nt">&#34;Nodekey&#34;</span><span class="p">:</span> <span class="s2">&#34;9b3740640431f0d6543f730308509fb9bc35307f826b1dd838b6812a6067f477&#34;</span><span class="p">,</span>
	<span class="nt">&#34;NodeInfo&#34;</span><span class="p">:</span> <span class="s2">&#34;enode://cb50baa67204df2246b143e2982e40a89b2924e5c19e2834876c34042f0a81a2e2604ab210d19a048762f5355258d9840932ba868227857d928495d398c04af0@0.0.0.0:30303?discport=0&#34;</span>
<span class="p">}</span>
<span class="p">{</span>
	<span class="nt">&#34;Address&#34;</span><span class="p">:</span> <span class="s2">&#34;0x350686ae7615e87a046fc4261fe58fda3872aa65&#34;</span><span class="p">,</span>
	<span class="nt">&#34;Nodekey&#34;</span><span class="p">:</span> <span class="s2">&#34;b6fd16bc88c8f96430b9ec0c4f6991c0f958e70026fce1abc959b295774f4e94&#34;</span><span class="p">,</span>
	<span class="nt">&#34;NodeInfo&#34;</span><span class="p">:</span> <span class="s2">&#34;enode://214dce3278a2b45fb0bf2a1d53c24eb213c5cbb08307e842feab0202cad4f685c5c62a4197d29318f07eb813bf4189db05096b551849039bf81fb74f0211320f@0.0.0.0:30303?discport=0&#34;</span>
<span class="p">}</span>



<span class="err">static-nodes.json</span>
<span class="p">[</span>
	<span class="s2">&#34;enode://faa50654f681a890c28be2faeef9211afaf1563c08ddb8990f6b39c561e002ea687707be68c16363f65c0755f785cb16e3b7be84e5e4eb260b0d4a6f6f83ef87@0.0.0.0:30303?discport=0&#34;</span><span class="p">,</span>
	<span class="s2">&#34;enode://c286de4e89f4f209a6b32284b31829251ccb23bf5ab3bbe57ba08754392635ae755848dd6c4f367c7d92284e54e4b9f0d1a896924309380eb947e3b8c6641392@0.0.0.0:30303?discport=0&#34;</span><span class="p">,</span>
	<span class="s2">&#34;enode://cb50baa67204df2246b143e2982e40a89b2924e5c19e2834876c34042f0a81a2e2604ab210d19a048762f5355258d9840932ba868227857d928495d398c04af0@0.0.0.0:30303?discport=0&#34;</span><span class="p">,</span>
	<span class="s2">&#34;enode://214dce3278a2b45fb0bf2a1d53c24eb213c5cbb08307e842feab0202cad4f685c5c62a4197d29318f07eb813bf4189db05096b551849039bf81fb74f0211320f@0.0.0.0:30303?discport=0&#34;</span>
<span class="p">]</span>



<span class="err">genesis.json</span>
<span class="p">{</span>
    <span class="nt">&#34;config&#34;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&#34;chainId&#34;</span><span class="p">:</span> <span class="mi">10</span><span class="p">,</span>
        <span class="nt">&#34;homesteadBlock&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;eip150Block&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;eip150Hash&#34;</span><span class="p">:</span> <span class="s2">&#34;0x0000000000000000000000000000000000000000000000000000000000000000&#34;</span><span class="p">,</span>
        <span class="nt">&#34;eip155Block&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;eip158Block&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;byzantiumBlock&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;constantinopleBlock&#34;</span><span class="p">:</span> <span class="mi">0</span><span class="p">,</span>
        <span class="nt">&#34;istanbul&#34;</span><span class="p">:</span> <span class="p">{</span>
            <span class="nt">&#34;epoch&#34;</span><span class="p">:</span> <span class="mi">30000</span><span class="p">,</span>
            <span class="nt">&#34;policy&#34;</span><span class="p">:</span> <span class="mi">0</span>
        <span class="p">},</span>
        <span class="nt">&#34;txnSizeLimit&#34;</span><span class="p">:</span> <span class="mi">64</span><span class="p">,</span>
        <span class="nt">&#34;isQuorum&#34;</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">},</span>
    <span class="nt">&#34;nonce&#34;</span><span class="p">:</span> <span class="s2">&#34;0x0&#34;</span><span class="p">,</span>
    <span class="nt">&#34;timestamp&#34;</span><span class="p">:</span> <span class="s2">&#34;0x5d7c4ae8&#34;</span><span class="p">,</span>
    <span class="nt">&#34;extraData&#34;</span><span class="p">:</span> <span class="s2">&#34;0x0000000000000000000000000000000000000000000000000000000000000000f89af8549493c20b1ffa9bf8738bf194d5203e3d2e2a48428d94ff75bd429c43de6719c2983c1e991b027990955994f22670e572a42729a2c10fb26f57bba46cbc3a4294350686ae7615e87a046fc4261fe58fda3872aa65b8410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0&#34;</span><span class="p">,</span>
    <span class="nt">&#34;gasLimit&#34;</span><span class="p">:</span> <span class="s2">&#34;0xe0000000&#34;</span><span class="p">,</span>
    <span class="nt">&#34;difficulty&#34;</span><span class="p">:</span> <span class="s2">&#34;0x1&#34;</span><span class="p">,</span>
    <span class="nt">&#34;mixHash&#34;</span><span class="p">:</span> <span class="s2">&#34;0x63746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365&#34;</span><span class="p">,</span>
    <span class="nt">&#34;coinbase&#34;</span><span class="p">:</span> <span class="s2">&#34;0x0000000000000000000000000000000000000000&#34;</span><span class="p">,</span>
    <span class="nt">&#34;alloc&#34;</span><span class="p">:</span> <span class="p">{</span>
        <span class="nt">&#34;350686ae7615e87a046fc4261fe58fda3872aa65&#34;</span><span class="p">:</span> <span class="p">{</span>
            <span class="nt">&#34;balance&#34;</span><span class="p">:</span> <span class="s2">&#34;0x446c3b15f9926687d2c40534fdb564000000000000&#34;</span>
        <span class="p">},</span>
        <span class="nt">&#34;93c20b1ffa9bf8738bf194d5203e3d2e2a48428d&#34;</span><span class="p">:</span> <span class="p">{</span>
            <span class="nt">&#34;balance&#34;</span><span class="p">:</span> <span class="s2">&#34;0x446c3b15f9926687d2c40534fdb564000000000000&#34;</span>
        <span class="p">},</span>
        <span class="nt">&#34;f22670e572a42729a2c10fb26f57bba46cbc3a42&#34;</span><span class="p">:</span> <span class="p">{</span>
            <span class="nt">&#34;balance&#34;</span><span class="p">:</span> <span class="s2">&#34;0x446c3b15f9926687d2c40534fdb564000000000000&#34;</span>
        <span class="p">},</span>
        <span class="nt">&#34;ff75bd429c43de6719c2983c1e991b0279909559&#34;</span><span class="p">:</span> <span class="p">{</span>
            <span class="nt">&#34;balance&#34;</span><span class="p">:</span> <span class="s2">&#34;0x446c3b15f9926687d2c40534fdb564000000000000&#34;</span>
        <span class="p">}</span>
    <span class="p">},</span>
    <span class="nt">&#34;number&#34;</span><span class="p">:</span> <span class="s2">&#34;0x0&#34;</span><span class="p">,</span>
    <span class="nt">&#34;gasUsed&#34;</span><span class="p">:</span> <span class="s2">&#34;0x0&#34;</span><span class="p">,</span>
    <span class="nt">&#34;parentHash&#34;</span><span class="p">:</span> <span class="s2">&#34;0x0000000000000000000000000000000000000000000000000000000000000000&#34;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>查看生成的文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ ls -l
total <span class="m">24</span>
drwxr-xr-x <span class="m">2</span> shuzang shuzang <span class="m">4096</span> Sep <span class="m">14</span> 10:05 <span class="m">0</span>
drwxr-xr-x <span class="m">2</span> shuzang shuzang <span class="m">4096</span> Sep <span class="m">14</span> 10:05 <span class="m">1</span>
drwxr-xr-x <span class="m">2</span> shuzang shuzang <span class="m">4096</span> Sep <span class="m">14</span> 10:05 <span class="m">2</span>
drwxr-xr-x <span class="m">2</span> shuzang shuzang <span class="m">4096</span> Sep <span class="m">14</span> 10:05 <span class="m">3</span>
-rwxr-xr-x <span class="m">1</span> shuzang shuzang <span class="m">1792</span> Sep <span class="m">14</span> 10:05 genesis.json
-rwxr-xr-x <span class="m">1</span> shuzang shuzang  <span class="m">666</span> Sep <span class="m">14</span> 10:05 static-nodes.json
</code></pre></td></tr></table>
</div>
</div><p>使用预定的IP(端口号不改，使用默认的30303即可）为所有验证者节点更新 <code>static-nodes.json</code> 文件。 在 <code>static-nodes.json</code>中，每个节点占据一行，第几行即代表第几个节点。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ cat static-nodes.json
....更新ip如下
<span class="o">[</span>	<span class="s2">&#34;enode://faa50654f681a890c28be2faeef9211afaf1563c08ddb8990f6b39c561e002ea687707be68c16363f65c0755f785cb16e3b7be84e5e4eb260b0d4a6f6f83ef87@192.168.191.2:30303?discport=0&#34;</span>,
	<span class="s2">&#34;enode://c286de4e89f4f209a6b32284b31829251ccb23bf5ab3bbe57ba08754392635ae755848dd6c4f367c7d92284e54e4b9f0d1a896924309380eb947e3b8c6641392@192.168.191.3:30303?discport=0&#34;</span>,
	<span class="s2">&#34;enode://cb50baa67204df2246b143e2982e40a89b2924e5c19e2834876c34042f0a81a2e2604ab210d19a048762f5355258d9840932ba868227857d928495d398c04af0@192.168.191.4:30303?discport=0&#34;</span>,
	<span class="s2">&#34;enode://214dce3278a2b45fb0bf2a1d53c24eb213c5cbb08307e842feab0202cad4f685c5c62a4197d29318f07eb813bf4189db05096b551849039bf81fb74f0211320f@192.168.191.5:30303?discport=0&#34;</span>
<span class="o">]</span>
</code></pre></td></tr></table>
</div>
</div><p>在每个节点的工作目录创建名为<code>data</code>的数据目录，在<code>data</code>目录创建<code>geth</code>目录</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">cd</span> ..
$ mkdir -p NodeA/data/geth
$ mkdir -p NodeB/data/geth
$ mkdir -p NodeC/data/geth
$ mkdir -p NodeD/data/geth
</code></pre></td></tr></table>
</div>
</div><p>在四个节点的工作目录中分别为各自节点生成初始账户，账户地址会显示在终端，记住为每个节点账户所设的密码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ geth --datadir NodeA/data account new
WARN <span class="o">[</span>09-14<span class="p">|</span>10:18:26.738<span class="o">]</span> Sanitizing cache to Go<span class="s1">&#39;s GC limits       provided=1024 updated=655
</span><span class="s1">INFO [09-14|10:18:26.748] Maximum peer count                       ETH=25 LES=0 total=25
</span><span class="s1">Your new account is locked with a password. Please give a password. Do not forget this password.
</span><span class="s1">Passphrase: 
</span><span class="s1">Repeat passphrase: 
</span><span class="s1">Address: {b619ead9d3d72b675a471b3d8ff67673de8ae7f4}
</span><span class="s1">$ geth --datadir NodeB/data account new
</span><span class="s1">WARN [09-14|10:18:41.953] Sanitizing cache to Go&#39;</span>s GC limits       <span class="nv">provided</span><span class="o">=</span><span class="m">1024</span> <span class="nv">updated</span><span class="o">=</span><span class="m">655</span>
INFO <span class="o">[</span>09-14<span class="p">|</span>10:18:41.954<span class="o">]</span> Maximum peer count                       <span class="nv">ETH</span><span class="o">=</span><span class="m">25</span> <span class="nv">LES</span><span class="o">=</span><span class="m">0</span> <span class="nv">total</span><span class="o">=</span><span class="m">25</span>
Your new account is locked with a password. Please give a password. Do not forget this password.
Passphrase: 
Repeat passphrase: 
Address: <span class="o">{</span>4cd5ae20dba37c96717f328dc6c02e1c1927be1c<span class="o">}</span>
$ geth --datadir NodeC/data account new
WARN <span class="o">[</span>09-14<span class="p">|</span>10:18:56.231<span class="o">]</span> Sanitizing cache to Go<span class="s1">&#39;s GC limits       provided=1024 updated=655
</span><span class="s1">INFO [09-14|10:18:56.232] Maximum peer count                       ETH=25 LES=0 total=25
</span><span class="s1">Your new account is locked with a password. Please give a password. Do not forget this password.
</span><span class="s1">Passphrase: 
</span><span class="s1">Repeat passphrase: 
</span><span class="s1">Address: {461d9bc69d4a32cb599310843bf5bf88342cc03c}
</span><span class="s1">$ geth --datadir NodeD/data account new
</span><span class="s1">WARN [09-14|10:19:09.591] Sanitizing cache to Go&#39;</span>s GC limits       <span class="nv">provided</span><span class="o">=</span><span class="m">1024</span> <span class="nv">updated</span><span class="o">=</span><span class="m">655</span>
INFO <span class="o">[</span>09-14<span class="p">|</span>10:19:09.592<span class="o">]</span> Maximum peer count                       <span class="nv">ETH</span><span class="o">=</span><span class="m">25</span> <span class="nv">LES</span><span class="o">=</span><span class="m">0</span> <span class="nv">total</span><span class="o">=</span><span class="m">25</span>
Your new account is locked with a password. Please give a password. Do not forget this password.
Passphrase: 
Repeat passphrase: 
Address: <span class="o">{</span>51ef0c6536e69e2ea46f5ec5e150da423305c63d<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>为了添加账户到初始区块，使用上述产生的账户地址更新<code>genesis.json</code>文件的<code>alloc</code>字段内容。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ cat NodeA/genesis.json
<span class="o">{</span>
    <span class="s2">&#34;config&#34;</span>: <span class="o">{</span>
        <span class="s2">&#34;chainId&#34;</span>: 10,
        <span class="s2">&#34;homesteadBlock&#34;</span>: 0,
        <span class="s2">&#34;eip150Block&#34;</span>: 0,
        <span class="s2">&#34;eip150Hash&#34;</span>: <span class="s2">&#34;0x0000000000000000000000000000000000000000000000000000000000000000&#34;</span>,
        <span class="s2">&#34;eip155Block&#34;</span>: 0,
        <span class="s2">&#34;eip158Block&#34;</span>: 0,
        <span class="s2">&#34;byzantiumBlock&#34;</span>: 0,
        <span class="s2">&#34;constantinopleBlock&#34;</span>: 0,
        <span class="s2">&#34;istanbul&#34;</span>: <span class="o">{</span>
            <span class="s2">&#34;epoch&#34;</span>: 30000,
            <span class="s2">&#34;policy&#34;</span>: <span class="m">0</span>
        <span class="o">}</span>,
        <span class="s2">&#34;txnSizeLimit&#34;</span>: 64,
        <span class="s2">&#34;isQuorum&#34;</span>: <span class="nb">true</span>
    <span class="o">}</span>,
    <span class="s2">&#34;nonce&#34;</span>: <span class="s2">&#34;0x0&#34;</span>,
    <span class="s2">&#34;timestamp&#34;</span>: <span class="s2">&#34;0x5d7c4ae8&#34;</span>,
    <span class="s2">&#34;extraData&#34;</span>: <span class="s2">&#34;0x0000000000000000000000000000000000000000000000000000000000000000f89af8549493c20b1ffa9bf8738bf194d5203e3d2e2a48428d94ff75bd429c43de6719c2983c1e991b027990955994f22670e572a42729a2c10fb26f57bba46cbc3a4294350686ae7615e87a046fc4261fe58fda3872aa65b8410000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c0&#34;</span>,
    <span class="s2">&#34;gasLimit&#34;</span>: <span class="s2">&#34;0xe0000000&#34;</span>,
    <span class="s2">&#34;difficulty&#34;</span>: <span class="s2">&#34;0x1&#34;</span>,
    <span class="s2">&#34;mixHash&#34;</span>: <span class="s2">&#34;0x63746963616c2062797a616e74696e65206661756c7420746f6c6572616e6365&#34;</span>,
    <span class="s2">&#34;coinbase&#34;</span>: <span class="s2">&#34;0x0000000000000000000000000000000000000000&#34;</span>,
    <span class="s2">&#34;alloc&#34;</span>: <span class="o">{</span>
        <span class="s2">&#34;b619ead9d3d72b675a471b3d8ff67673de8ae7f4&#34;</span>: <span class="o">{</span>
            <span class="s2">&#34;balance&#34;</span>: <span class="s2">&#34;0x446c3b15f9926687d2c40534fdb564000000000000&#34;</span>
        <span class="o">}</span>,
        <span class="s2">&#34;4cd5ae20dba37c96717f328dc6c02e1c1927be1c&#34;</span>: <span class="o">{</span>
            <span class="s2">&#34;balance&#34;</span>: <span class="s2">&#34;0x446c3b15f9926687d2c40534fdb564000000000000&#34;</span>
        <span class="o">}</span>,
        <span class="s2">&#34;461d9bc69d4a32cb599310843bf5bf88342cc03c&#34;</span>: <span class="o">{</span>
            <span class="s2">&#34;balance&#34;</span>: <span class="s2">&#34;0x446c3b15f9926687d2c40534fdb564000000000000&#34;</span>
        <span class="o">}</span>,
        <span class="s2">&#34;51ef0c6536e69e2ea46f5ec5e150da423305c63d&#34;</span>: <span class="o">{</span>
            <span class="s2">&#34;balance&#34;</span>: <span class="s2">&#34;0x446c3b15f9926687d2c40534fdb564000000000000&#34;</span>
        <span class="o">}</span>
    <span class="o">}</span>,
    <span class="s2">&#34;number&#34;</span>: <span class="s2">&#34;0x0&#34;</span>,
    <span class="s2">&#34;gasUsed&#34;</span>: <span class="s2">&#34;0x0&#34;</span>,
    <span class="s2">&#34;parentHash&#34;</span>: <span class="s2">&#34;0x0000000000000000000000000000000000000000000000000000000000000000&#34;</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>将之前步骤中产生的初始化文件移动到相应节点的工作目录。这些文件现在位于领导节点的工作目录。<code>genesis.json</code>放到每个节点的工作目录, <code>static-nodes.json</code>放到每个节点的<code>data</code>目录。<code>X/nodekey</code>放到对应节点的<code>data/geth</code></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ cp NodeA/genesis.json NodeB
$ cp NodeA/genesis.json NodeC
$ cp NodeA/genesis.json NodeD
$ cp NodeA/static-nodes.json NodeA/data/
$ cp NodeA/static-nodes.json NodeB/data/
$ cp NodeA/static-nodes.json NodeC/data/
$ cp NodeA/static-nodes.json NodeD/data/
$ cp NodeA/0/nodekey NodeA/data/geth
$ cp NodeA/1/nodekey NodeB/data/geth
$ cp NodeA/2/nodekey NodeC/data/geth
$ cp NodeA/3/nodekey NodeD/data/geth
</code></pre></td></tr></table>
</div>
</div><p>将NodeB，NodeC，NodeD文件夹使用ftp文件传输协议分别移动到对应的三个设备的用户主目录下，使用的软件是FileZilla。</p>
<p>分别在各自设备的迁移过去的Node文件夹根目录执行节点初始化工作</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># 在NodeA设备</span>
$ <span class="nb">cd</span> NodeA
$ geth --datadir data init genesis.json
WARN <span class="o">[</span>09-14<span class="p">|</span>10:42:06.033<span class="o">]</span> Sanitizing cache to Go<span class="s1">&#39;s GC limits       provided=1024 updated=655
</span><span class="s1">INFO [09-14|10:42:06.049] Maximum peer count                       ETH=25 LES=0 total=25
</span><span class="s1">INFO [09-14|10:42:06.056] Allocated cache and file handles         database=/home/shuzang/istanbul/NodeA/data/geth/chaindata cache=16 handles=16
</span><span class="s1">INFO [09-14|10:42:06.079] Writing custom genesis block 
</span><span class="s1">INFO [09-14|10:42:06.088] Persisted trie from memory database      nodes=5 size=819.00B time=224.043µs gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00B
</span><span class="s1">INFO [09-14|10:42:06.088] Successfully wrote genesis state         database=chaindata                                        hash=7d00b6…27b2d4
</span><span class="s1">INFO [09-14|10:42:06.088] Allocated cache and file handles         database=/home/shuzang/istanbul/NodeA/data/geth/lightchaindata cache=16 handles=16
</span><span class="s1">INFO [09-14|10:42:06.091] Writing custom genesis block 
</span><span class="s1">INFO [09-14|10:42:06.091] Persisted trie from memory database      nodes=5 size=819.00B time=48.242µs  gcnodes=0 gcsize=0.00B gctime=0s livenodes=1 livesize=0.00B
</span><span class="s1">INFO [09-14|10:42:06.091] Successfully wrote genesis state         database=lightchaindata                                        hash=7d00b6…27b2d4
</span><span class="s1">
</span><span class="s1"># 在NodeB设备
</span><span class="s1">$ cd ~/NodeB
</span><span class="s1">$ geth --datadir data init genesis.json
</span><span class="s1">
</span><span class="s1">
</span><span class="s1"># 在NodeC设备
</span><span class="s1">$ cd ~/NodeC
</span><span class="s1">$ geth --datadir data init genesis.json
</span><span class="s1">WARN [09-14|10:44:13.570] Sanitizing cache to Go&#39;</span>s GC limits       <span class="nv">provided</span><span class="o">=</span><span class="m">1024</span> <span class="nv">updated</span><span class="o">=</span><span class="m">308</span>
INFO <span class="o">[</span>09-14<span class="p">|</span>10:44:13.594<span class="o">]</span> Maximum peer count                       <span class="nv">ETH</span><span class="o">=</span><span class="m">25</span> <span class="nv">LES</span><span class="o">=</span><span class="m">0</span> <span class="nv">total</span><span class="o">=</span><span class="m">25</span>
INFO <span class="o">[</span>09-14<span class="p">|</span>10:44:13.607<span class="o">]</span> Allocated cache and file handles         <span class="nv">database</span><span class="o">=</span>/home/pi/NodeC/data/geth/chaindata <span class="nv">cache</span><span class="o">=</span><span class="m">16</span> <span class="nv">handles</span><span class="o">=</span><span class="m">16</span>
INFO <span class="o">[</span>09-14<span class="p">|</span>10:44:13.659<span class="o">]</span> Writing custom genesis block
INFO <span class="o">[</span>09-14<span class="p">|</span>10:44:13.663<span class="o">]</span> Persisted trie from memory database      <span class="nv">nodes</span><span class="o">=</span><span class="m">5</span> <span class="nv">size</span><span class="o">=</span>819.00B <span class="nv">time</span><span class="o">=</span>679.667µs <span class="nv">gcnodes</span><span class="o">=</span><span class="m">0</span> <span class="nv">gcsize</span><span class="o">=</span>0.00B <span class="nv">gctime</span><span class="o">=</span>0s <span class="nv">livenodes</span><span class="o">=</span><span class="m">1</span> <span class="nv">livesize</span><span class="o">=</span>0.00B
INFO <span class="o">[</span>09-14<span class="p">|</span>10:44:13.666<span class="o">]</span> Successfully wrote genesis state         <span class="nv">database</span><span class="o">=</span>chaindata                          <span class="nv">hash</span><span class="o">=</span>7d00b6…27b2d4
INFO <span class="o">[</span>09-14<span class="p">|</span>10:44:13.666<span class="o">]</span> Allocated cache and file handles         <span class="nv">database</span><span class="o">=</span>/home/pi/NodeC/data/geth/lightchaindata <span class="nv">cache</span><span class="o">=</span><span class="m">16</span> <span class="nv">handles</span><span class="o">=</span><span class="m">16</span>
INFO <span class="o">[</span>09-14<span class="p">|</span>10:44:13.694<span class="o">]</span> Writing custom genesis block
INFO <span class="o">[</span>09-14<span class="p">|</span>10:44:13.697<span class="o">]</span> Persisted trie from memory database      <span class="nv">nodes</span><span class="o">=</span><span class="m">5</span> <span class="nv">size</span><span class="o">=</span>819.00B <span class="nv">time</span><span class="o">=</span>573.516µs <span class="nv">gcnodes</span><span class="o">=</span><span class="m">0</span> <span class="nv">gcsize</span><span class="o">=</span>0.00B <span class="nv">gctime</span><span class="o">=</span>0s <span class="nv">livenodes</span><span class="o">=</span><span class="m">1</span> <span class="nv">livesize</span><span class="o">=</span>0.00B
INFO <span class="o">[</span>09-14<span class="p">|</span>10:44:13.699<span class="o">]</span> Successfully wrote genesis state         <span class="nv">database</span><span class="o">=</span>lightchaindata                          <span class="nv">hash</span><span class="o">=</span>7d00b6…27b2d4

<span class="c1"># 在NodeD设备</span>
$ <span class="nb">cd</span> ~/NodeD
$ geth --datadir data init genesis.json
WARN <span class="o">[</span>09-14<span class="p">|</span>10:45:59.139<span class="o">]</span> Sanitizing cache to Go<span class="err">&#39;</span>s GC limits       <span class="nv">provided</span><span class="o">=</span><span class="m">1024</span> <span class="nv">updated</span><span class="o">=</span><span class="m">308</span>
INFO <span class="o">[</span>09-14<span class="p">|</span>10:45:59.155<span class="o">]</span> Maximum peer count                       <span class="nv">ETH</span><span class="o">=</span><span class="m">25</span> <span class="nv">LES</span><span class="o">=</span><span class="m">0</span> <span class="nv">total</span><span class="o">=</span><span class="m">25</span>
INFO <span class="o">[</span>09-14<span class="p">|</span>10:45:59.166<span class="o">]</span> Allocated cache and file handles         <span class="nv">database</span><span class="o">=</span>/home/pi/NodeD/data/geth/chaindata <span class="nv">cache</span><span class="o">=</span><span class="m">16</span> <span class="nv">handles</span><span class="o">=</span><span class="m">16</span>
INFO <span class="o">[</span>09-14<span class="p">|</span>10:45:59.215<span class="o">]</span> Writing custom genesis block 
INFO <span class="o">[</span>09-14<span class="p">|</span>10:45:59.234<span class="o">]</span> Persisted trie from memory database      <span class="nv">nodes</span><span class="o">=</span><span class="m">5</span> <span class="nv">size</span><span class="o">=</span>819.00B <span class="nv">time</span><span class="o">=</span>16.193125ms <span class="nv">gcnodes</span><span class="o">=</span><span class="m">0</span> <span class="nv">gcsize</span><span class="o">=</span>0.00B <span class="nv">gctime</span><span class="o">=</span>0s <span class="nv">livenodes</span><span class="o">=</span><span class="m">1</span> <span class="nv">livesize</span><span class="o">=</span>0.00B
INFO <span class="o">[</span>09-14<span class="p">|</span>10:45:59.239<span class="o">]</span> Successfully wrote genesis state         <span class="nv">database</span><span class="o">=</span>chaindata                          <span class="nv">hash</span><span class="o">=</span>7d00b6…27b2d4
INFO <span class="o">[</span>09-14<span class="p">|</span>10:45:59.240<span class="o">]</span> Allocated cache and file handles         <span class="nv">database</span><span class="o">=</span>/home/pi/NodeD/data/geth/lightchaindata <span class="nv">cache</span><span class="o">=</span><span class="m">16</span> <span class="nv">handles</span><span class="o">=</span><span class="m">16</span>
INFO <span class="o">[</span>09-14<span class="p">|</span>10:45:59.265<span class="o">]</span> Writing custom genesis block 
INFO <span class="o">[</span>09-14<span class="p">|</span>10:45:59.269<span class="o">]</span> Persisted trie from memory database      <span class="nv">nodes</span><span class="o">=</span><span class="m">5</span> <span class="nv">size</span><span class="o">=</span>819.00B <span class="nv">time</span><span class="o">=</span>596.146µs   <span class="nv">gcnodes</span><span class="o">=</span><span class="m">0</span> <span class="nv">gcsize</span><span class="o">=</span>0.00B <span class="nv">gctime</span><span class="o">=</span>0s <span class="nv">livenodes</span><span class="o">=</span><span class="m">1</span> <span class="nv">livesize</span><span class="o">=</span>0.00B
INFO <span class="o">[</span>09-14<span class="p">|</span>10:45:59.271<span class="o">]</span> Successfully wrote genesis state         <span class="nv">database</span><span class="o">=</span>lightchaindata                          <span class="nv">hash</span><span class="o">=</span>7d00b6…27b2d4
</code></pre></td></tr></table>
</div>
</div><p><strong>以下步骤在四个设备上都要执行</strong></p>
<p>在各自设备Node目录下创建start.sh脚本用于启动节点，脚本基本内容如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-sh" data-lang="sh"><span class="cp">#!/bin/bash
</span><span class="cp"></span><span class="nv">PRIVATE_CONFIG</span><span class="o">=</span>ignore nohup geth --datadir data --nodiscover --istanbul.blockperiod <span class="m">5</span> --syncmode full --mine --minerthreads <span class="m">1</span> --verbosity <span class="m">5</span> --networkid <span class="m">10</span> --rpc --rpcaddr 0.0.0.0 --rpcapi admin,db,eth,debug,miner,net,shh,txpool,personal,web3,quorum,istanbul --ws --wsorigins<span class="o">=</span><span class="s2">&#34;*&#34;</span> --wsaddr 0.0.0.0 --emitcheckpoints --port <span class="m">30303</span> 2&gt;&gt;node.log <span class="p">&amp;</span>
</code></pre></td></tr></table>
</div>
</div><p>查找是否有残留启动的geth进程，若有，杀掉该进程</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">See <span class="k">if</span> the any geth nodes are running.
$ ps <span class="p">|</span> grep geth
Kill geth processes
$ killall -INT geth
</code></pre></td></tr></table>
</div>
</div><p>授予start.sh脚本执行权限，执行该脚本</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">.... 跳转到脚本所在目录
$ chmod +x start.sh
$ ./start.sh
</code></pre></td></tr></table>
</div>
</div><p>执行完后查找geth进程是否启动，并执行<code>geth attach</code>命令接入geth控制台</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ ps <span class="p">|</span> grep geth
 <span class="m">16877</span> pts/0    00:00:01 geth
</code></pre></td></tr></table>
</div>
</div><p>接下来可在任一设备的节点目录下使用<code>geth attach</code>命令接入geth控制台执行操作</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ geth attach data/geth.ipc
WARN <span class="o">[</span>09-14<span class="p">|</span>11:00:13.142<span class="o">]</span> Sanitizing cache to Go<span class="err">&#39;</span>s GC limits       <span class="nv">provided</span><span class="o">=</span><span class="m">1024</span> <span class="nv">updated</span><span class="o">=</span><span class="m">655</span>
Welcome to the Geth JavaScript console!

instance: Geth/v1.8.18-stable-c894c2d7<span class="o">(</span>quorum-v2.2.5<span class="o">)</span>/linux-amd64/go1.11.12
coinbase: 0x93c20b1ffa9bf8738bf194d5203e3d2e2a48428d
at block: <span class="m">0</span> <span class="o">(</span>Sat, <span class="m">14</span> Sep <span class="m">2019</span> 10:05:28 CST<span class="o">)</span>
 datadir: /home/shuzang/istanbul/NodeA/data
 modules: admin:1.0 debug:1.0 eth:1.0 istanbul:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0

&gt; 
</code></pre></td></tr></table>
</div>
</div><p>在NodeA的geth控制台使用<code>admin.peers</code>命令查看已连接节点，可以看到NodeC和NodeD都已接入。NodeB设备此时未启动，所以没有接入。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="err">&gt;</span> <span class="err">admin.peers</span>
<span class="p">[{</span>
    <span class="err">caps:</span> <span class="err">[</span><span class="nt">&#34;istanbul/64&#34;</span><span class="err">]</span><span class="p">,</span>
    <span class="err">enode:</span> <span class="nt">&#34;enode://214dce3278a2b45fb0bf2a1d53c24eb213c5cbb08307e842feab0202cad4f685c5c62a4197d29318f07eb813bf4189db05096b551849039bf81fb74f0211320f@192.168.191.5:45822&#34;</span><span class="p">,</span>
    <span class="err">id:</span> <span class="nt">&#34;5e62fd3b39e5ae259d604f90350686ae7615e87a046fc4261fe58fda3872aa65&#34;</span><span class="p">,</span>
    <span class="err">name:</span> <span class="nt">&#34;Geth/v1.8.18-stable(quorum-v2.2.5)/linux-arm/go1.11.6&#34;</span><span class="p">,</span>
    <span class="err">network:</span> <span class="err">{</span>
      <span class="err">inbound:</span> <span class="err">true,</span>
      <span class="err">localAddress:</span> <span class="nt">&#34;192.168.191.2:30303&#34;</span><span class="p">,</span>
      <span class="err">remoteAddress:</span> <span class="nt">&#34;192.168.191.5:45822&#34;</span><span class="p">,</span>
      <span class="err">static:</span> <span class="err">false,</span>
      <span class="err">trusted:</span> <span class="err">false</span>
    <span class="p">},</span>
    <span class="err">protocols:</span> <span class="p">{</span>
      <span class="err">istanbul:</span> <span class="err">{</span>
        <span class="err">difficulty:</span> <span class="err">1,</span>
        <span class="err">head:</span> <span class="nt">&#34;0x7d00b604f84c3962821cecbf007d8cf0c3e185d6c3b12a901ec4d996d927b2d4&#34;</span><span class="p">,</span>
        <span class="err">version:</span> <span class="err">64</span>
      <span class="p">}</span>
    <span class="err">}</span>
<span class="err">}</span><span class="p">,</span> <span class="p">{</span>
    <span class="err">caps:</span> <span class="err">[</span><span class="nt">&#34;istanbul/64&#34;</span><span class="err">]</span><span class="p">,</span>
    <span class="err">enode:</span> <span class="nt">&#34;enode://cb50baa67204df2246b143e2982e40a89b2924e5c19e2834876c34042f0a81a2e2604ab210d19a048762f5355258d9840932ba868227857d928495d398c04af0@192.168.191.4:47390&#34;</span><span class="p">,</span>
    <span class="err">id:</span> <span class="nt">&#34;c31b4abe77e8a91a1a03d06ff22670e572a42729a2c10fb26f57bba46cbc3a42&#34;</span><span class="p">,</span>
    <span class="err">name:</span> <span class="nt">&#34;Geth/v1.8.18-stable(quorum-v2.2.5)/linux-arm/go1.11.6&#34;</span><span class="p">,</span>
    <span class="err">network:</span> <span class="err">{</span>
      <span class="err">inbound:</span> <span class="err">true,</span>
      <span class="err">localAddress:</span> <span class="nt">&#34;192.168.191.2:30303&#34;</span><span class="p">,</span>
      <span class="err">remoteAddress:</span> <span class="nt">&#34;192.168.191.4:47390&#34;</span><span class="p">,</span>
      <span class="err">static:</span> <span class="err">false,</span>
      <span class="err">trusted:</span> <span class="err">false</span>
    <span class="p">},</span>
    <span class="err">protocols:</span> <span class="p">{</span>
      <span class="err">istanbul:</span> <span class="err">{</span>
        <span class="err">difficulty:</span> <span class="err">1,</span>
        <span class="err">head:</span> <span class="nt">&#34;0x7d00b604f84c3962821cecbf007d8cf0c3e185d6c3b12a901ec4d996d927b2d4&#34;</span><span class="p">,</span>
        <span class="err">version:</span> <span class="err">64</span>
      <span class="p">}</span>
    <span class="err">}</span>
<span class="err">}</span><span class="p">]</span>
</code></pre></td></tr></table>
</div>
</div><p>至此私链网络搭建完毕，之后交易和合约部署都可通过geth控制台进行</p>
<h3 id="五总结">五、总结</h3>
<p>由于网络质量问题，区块链共识无法正常运行，合约部署无法完成。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">INFO <span class="o">[</span>09-14<span class="p">|</span>10:56:00.419<span class="o">]</span> Commit new mining work                   <span class="nv">number</span><span class="o">=</span><span class="m">1</span> <span class="nv">sealhash</span><span class="o">=</span>1305ae…019d90 <span class="nv">uncles</span><span class="o">=</span><span class="m">0</span> <span class="nv">txs</span><span class="o">=</span><span class="m">0</span> <span class="nv">gas</span><span class="o">=</span><span class="m">0</span> <span class="nv">fees</span><span class="o">=</span><span class="m">0</span> <span class="nv">elapsed</span><span class="o">=</span>556.954µs
TRACE<span class="o">[</span>09-14<span class="p">|</span>10:56:00.420<span class="o">]</span> Dial error                               <span class="nv">task</span><span class="o">=</span><span class="s2">&#34;staticdial 5e62fd3b39e5ae25 192.168.191.5:30303&#34;</span> <span class="nv">err</span><span class="o">=</span><span class="s2">&#34;dial tcp 192.168.191.5:30303: connect: connection refused&#34;</span>
DEBUG<span class="o">[</span>09-14<span class="p">|</span>10:56:00.421<span class="o">]</span> Can<span class="err">&#39;</span>t resolve node                       <span class="nv">id</span><span class="o">=</span>0x8e6a40         <span class="nv">err</span><span class="o">=</span><span class="s2">&#34;discovery is disabled&#34;</span>
TRACE<span class="o">[</span>09-14<span class="p">|</span>10:56:00.421<span class="o">]</span> Dial task <span class="k">done</span>                           <span class="nv">task</span><span class="o">=</span><span class="s2">&#34;staticdial 5e62fd3b39e5ae25 192.168.191.5:30303&#34;</span>
TRACE<span class="o">[</span>09-14<span class="p">|</span>10:56:00.420<span class="o">]</span> handleRequest                            <span class="nv">address</span><span class="o">=</span>0x93C20b1ffA9BF8738BF194d5203e3D2E2A48428d <span class="nv">state</span><span class="o">=</span><span class="s2">&#34;Accept request&#34;</span> <span class="nv">seq</span><span class="o">=</span><span class="m">1</span> <span class="nv">number</span><span class="o">=</span><span class="m">1</span> <span class="nv">hash</span><span class="o">=</span>23cc4d…b11876
TRACE<span class="o">[</span>09-14<span class="p">|</span>10:56:00.422<span class="o">]</span> Dial error                               <span class="nv">task</span><span class="o">=</span><span class="s2">&#34;staticdial c31b4abe77e8a91a 192.168.191.4:30303&#34;</span> <span class="nv">err</span><span class="o">=</span><span class="s2">&#34;dial tcp 192.168.191.4:30303: connect: connection refused&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>主要原因估计是PC上的节点装在了虚拟机里，虚拟机又使用桥接模式，导致最后丢包率和延迟都比较高。</p>
<p><a href="https://www.ywlib.com/archives/109.html" target="_blank" rel="noopener noreffer">解决Hyper-V内虚拟机网络延迟高的问题(ping延时大)</a></p>
]]></description></item><item><title>树莓派安装quorum节点</title><link>https://shuzang.github.io/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85quorum%E8%8A%82%E7%82%B9/</link><pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://shuzang.github.io/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85quorum%E8%8A%82%E7%82%B9/</guid><description><![CDATA[<p>在熟悉了树莓派并和虚拟机顺利组网以后，首要面临的事情就是在树莓派中安装quorum节点，由于暂时不使用隐私保护功能，不安装隐私管理器<code>Tessera</code>或<code>Constellation</code>。需要安装的只包括：</p>
<ul>
<li>quorum的客户端geth</li>
<li>Istanbul BFT共识配置工具istanbul-tool</li>
</ul>
<h3 id="交叉编译20190909">交叉编译（2019.09.09）</h3>
<p><a href="https://github.com/jpmorganchase/quorum" target="_blank" rel="noopener noreffer">quorum项目</a>没有提供可用于arm架构的二进制包，只能自己编译。然而，在树莓派中直接进行编译存在两个问题</p>
<ol>
<li>会占用很多不必要的空间，quorum项目文件编译后大小在360M以上</li>
<li>编译istanbul-tool依赖于golang的某些包，需要访问google，很多ip无法访问。</li>
</ol>
<p>因此，最终选择了在PC中进行交叉编译，幸运的是，由于quorum的源项目ethereum可以交叉编译，quorum继承了交叉编译的功能。文档仍然需要看<a href="https://github.com/ethereum/go-ethereum/wiki/Cross-compiling-Ethereum" target="_blank" rel="noopener noreffer">Cross compiling Ethereum</a>。交叉编译依赖于名为<code>xgo</code>的包，而这个包依赖于Docker和Go，因此，交叉编译之前需要先安装它们。</p>
<p><em>注：交叉编译在Ubuntu18.04系统下进行。</em></p>
<p>安装golang</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo snap install go --classic
$ go version
</code></pre></td></tr></table>
</div>
</div><p><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener noreffer">安装docker(使用脚本)</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ curl -fsSL https://get.docker.com -o get-docker.sh
$ sudo sh get-docker.sh

&lt;output truncated&gt;
<span class="c1"># 想在非root用户下运行，需要将用户添加到docker group。执行如下命令</span>
$ sudo usermod -aG docker your-user
</code></pre></td></tr></table>
</div>
</div><p>下载quorum</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ git clone https://github.com/jpmorganchase/quorum.git
</code></pre></td></tr></table>
</div>
</div><p>执行交叉编译</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">cd</span> quorum
$ make geth-linux-arm-7
$ <span class="nb">cd</span> build/bin
<span class="c1"># 在该目录下可以找到编译后的geth文件</span>
</code></pre></td></tr></table>
</div>
</div><p>心态爆炸，交叉编译后的geth在树莓派中无法执行，Ubuntu18.04下原本编译完直接放到/usr/local/bin下面即可使用，raspbian中当我放到同样的目录下不起作用，也不知道是交叉编译失败了还是raspbian系统不支持。考虑到raspbian基于Debian，现在不知道Debian应该把可执行文件放在哪里，网上找了很久没找到相关资料。(交叉编译其实可以，直接跳到文章最后可看到方法)</p>
<h3 id="ubuntu-mate0910-am">Ubuntu mate（09.10 am）</h3>
<p>quorum的issue中有个项目组的<a href="https://github.com/jpmorganchase/quorum/issues/661" target="_blank" rel="noopener noreffer">回答</a>，其中说quorum运行在树莓派中是肯定可以的，这一点终于可以放心，还推荐用Ubuntu，那就试试。</p>
<blockquote>
<p>“Yes. Whilst I haven&rsquo;t tried it, I&rsquo;m aware that folks have done this and you can find articles on the internet describing how to do it for Ethereum (Quorum will be the same). My suggestion would be to install Ubuntu on the Rasberry and follow the normal steps for building Quorum.”</p>
</blockquote>
<p><a href="https://www.raspberrypi.org/downloads/" target="_blank" rel="noopener noreffer">树莓派官网</a>提供的Ubuntu可用镜像有三种：Ubuntu Mate，Ubuntu Core，Ubuntu Server。看到Ubuntu Mate的种种特性，我动心了，看起来好像是专门定制的。</p>
<p><a href="https://ubuntu-mate.org/raspberry-pi/" target="_blank" rel="noopener noreffer">Ubuntu Mate说明及下载</a>，选择的镜像是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">Raspberry Pi(recommended)
For aarch32(ARMv7)computers,like:
- Raspberry Pi Model B 2
- Raspberry Pi Model B 3
- Raspberry Pi Model B 3+
</code></pre></td></tr></table>
</div>
</div><p>下载，镜像写入，根目录预先建立<code>ssh</code>和<code>wpa_supplicant.conf</code>文件，插入树莓派，启动运行，扫描不到ip，看起来WiFi没法自动联网。通过网线接到PC上共享网络，ssh访问被拒，接到路由器上一样不行。找资料，关于Ubuntu mate的资料比较少，最终在<a href="https://ubuntu-mate.org/raspberry-pi/" target="_blank" rel="noopener noreffer">官方下载页-Additional feature</a>找到一个对特性的说明，称Ubuntu mate没有像raspbian的pi账户一样预定义的用户账户，所有的配置需要在第一次启动时手动完成，ssh预先也没有安装，需要启动后自己安装<code>openssh-server</code>并启用。完了，彻底崩溃，本来没有用户账户就无法登录，连ssh都没有，第一次必须得用屏幕了。屏幕，我没有。。。</p>
<p>考虑到笔记本电脑上有个HDMI接口，买线总比买屏幕便宜，跑到商店买了根双头HDMI线。回来一试，没用，网上说是因为笔记本的HDMI只能输出信号，没法输入，因此不能作为HDMI屏幕使用。转眼又看到了VGA接口，这个怎么样，结果一查，HDMI转VGA也没用，笔记本的VGA同样只有输出功能，平板，手机全都不行，不能作为显示设备，最多只能用ssh连接。</p>
<p>台式机的显示器总行了吧，资料上说要自带电源，怕烧坏树莓派。没事，台式的显示器本来就接电源线。又去店里换一个HDMI转VGA的线，是店里唯一的线，结果是坏的，把线接到树莓派上没有反应，提示<code>请检查线缆</code>而不是<code>无信号输入</code>，拿笔记本试了一下，果然不行，完全检测不到第二屏幕。换！店里没线了怎么办，本来想换HDMI转DVI的，因为显示器后面还有个DVI接口，但店员小哥不推荐，说是用DVI的少，最后拿了HDMI转VGA母口的线，又多买了一根双头VGA线，亏到爆。</p>
<p>不过，总算好使了。</p>
<p>当在显示器上看到Ubuntu mate的界面时我是激动的，太不容易了。初始配置之后还需要进行系统安装，怪不得没法直接进入。但是路由器的WiFi接入不了，或者连接后没法上网，完全没有头绪，只好先用手机开了热点，这倒是没问题。</p>
<p>把之前交叉编译的<code>geth</code>文件拷贝到了Ubuntu mate，放到<code>/usr/local/bin</code>目录下，运行<code>geth version</code>测试，倒是可以了，可惜屏幕打印的文本乱码。重新启动了一下树莓派，结果无限循环启动。初始界面提示如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">Driver &#39;sdhost-bcm2835&#39; already registered, aborting...
</code></pre></td></tr></table>
</div>
</div><p>论坛上也有人遇到了这个<a href="https://ubuntu-mate.community/t/raspberry-pi-3-model-b-plus-ubuntu-mate-installation-error-driver-sdhost-bcm2835-already-registered-aborting/19300" target="_blank" rel="noopener noreffer">问题</a>，但从去年11月到今年5月，回帖的所有人都遇到同样的问题而没有办法解决，我已经放弃了。</p>
<h3 id="raspbian下自编译quorum0910-pm">Raspbian下自编译quorum(09.10 pm)</h3>
<p>树莓派上编译使用quorum的人不多，但编译ethereum的人绝对不少，现在想起来，终于意识到一件事，大部分人还是在raspbian系统下编译使用的，既然ethereum的<code>geth</code>客户端可以，quorum没道理不行。有可能不是系统的问题，因为raspbian和ubuntu其实都属于基于Debian的发行版，那就是交叉编译问题了。找不到哪里出的错，干脆直接在Raspbian下编译一次quorum吧，空间占用多一点就多一点，还是足够的，唯一的问题只有翻墙，但这是没办法的事情，而且<code>geth</code>的编译暂时还不需要，<code>istanbul-tool</code>才需要。</p>
<blockquote>
<p>注：其实raspbian下翻墙试过了，我有surfshark的账号，官方也给了步骤，<a href="https://support.surfshark.com/hc/en-us/articles/360013425373-How-to-set-up-Surfshark-VPN-on-Raspberry-Pi" target="_blank" rel="noopener noreffer">How to set up Surfshark VPN on Raspberry Pi</a>，但最后一步连接总是出错，错误提示为</p>
<p>TLS Error: TLS handshake failed</p>
<p>网上关于这个Error的问题不少，但都没起作用，就放弃了。</p>
</blockquote>
<p>重新写入了之前备份的raspbian镜像（备份真的很有用，能省好多事儿）。启动树莓派，使用预定义的静态ip登录，安装go，下载github上的quorum项目(主要是这里直接下载比<code>git clone</code>快多了)。执行编译，注意使用<code>sudo make all</code>，因为编译需要分配存储空间，不给权限过不了。</p>
<p>树莓派卡死了。。。</p>
<p>重启了一次，第二次又卡死了，看来不是意外，应该是编译出了问题，果然，等了很久后，编译退出，系统正常了，但出现了错误提示，是一个存储问题。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback"> running gcc failed: fork/exec /usr/bin/gcc: cannot allocate memory
</code></pre></td></tr></table>
</div>
</div><p>Ethereum的论坛有人在编译时遇到了同样的问题，<a href="https://ethereum.stackexchange.com/questions/12222/installing-geth-on-raspberry-pi-3-cannot-allocate-memory-error" target="_blank" rel="noopener noreffer">Installing geth on Raspberry Pi 3 - cannot allocate memory error</a>，回帖提到是因为编译所需的内存不够的缘故，建议杀掉内存占用大而且不用的进程。使用<code>free -h</code>查看</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">              total        used        free      shared  buff/cache   available
Mem:          926Mi       119Mi       575Mi       7.0Mi       231Mi       744Mi
Swap:          99Mi          0B        99Mi
</code></pre></td></tr></table>
</div>
</div><p>不算少啊，700多M呢，再用<code>top</code>命令看进程，并按<code>M</code>键按内存占用排序，发现杀哪个进程都不合适。回帖中还有人提到可以调整交换空间大小，就是第二行的Swap，树莓派默认100M，可以调大点，问题的说明及解决方案见<a href="https://raspberrypi.stackexchange.com/questions/70/how-to-set-up-swap-space" target="_blank" rel="noopener noreffer">How to set up swap space</a>。</p>
<p>树莓派使用<code>dphys-swapfile</code>文件定义交换空间大小，打开配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ sudo nano /etc/dphys-swapfile
</code></pre></td></tr></table>
</div>
</div><p>启用内容只有一行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">CONF_SWAPSIZE=100
</code></pre></td></tr></table>
</div>
</div><p>代表默认100M交换空间大小，把数值改成合适的内容，我直接改了1024。然后重新启用新的配置文件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ sudo /etc/init.d/dphys-swapfile restart
</code></pre></td></tr></table>
</div>
</div><p>完成后再用<code>free -h</code>命令查看交换空间大小就变了，此时重新编译，编译速度会大大加快，等待一段时间后，编译顺利执行完毕。将编译得到的文件复制到/usr/local/bin目录下。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo cp build/bin/geth /usr/local/bin
$ sudo cp build/bin/bootnode /usr/local/bin
<span class="c1"># 验证</span>
$ geth version
</code></pre></td></tr></table>
</div>
</div><p>成功。</p>
<h3 id="istantul-tool0911-am">istantul-tool(09.11 am)</h3>
<p>istantul-tool的编译毫无办法，编译过程要访问google，有些ip无法访问，但既然这里编译没有指明针对arm架构，明天把虚拟机编译好的文件拿过来试试。</p>
<p>Linux编译得到的istanbul文件在树莓派中无法执行，错误提示为</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">-bash: ./istanbul: cannot execute binary file: Exec format error
</code></pre></td></tr></table>
</div>
</div><p>使用<code>file istanbul</code>命令查看文件信息</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">istanbul: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64                                                                                                                        .so.2, for GNU/Linux 3.2.0, Go BuildID=Whu77pcg5_4qdJyzC6lH/RiHbDbxGfs3BFqYFYhdk/Uvgfkwy9en1ShuGpCcPB/qCr7Qg3bewybrm4                                                                                                                        vmE3B, BuildID[sha1]=588353ce35513ef4a2d9695f458a338e226093b1, not stripped
</code></pre></td></tr></table>
</div>
</div><p>x86-64的，看来还是架构相关，项目本身没有提供对arm的编译功能，没有办法了。不过有可能不需要在树莓派中运行，我们只需要在作为主节点的虚拟机利用它生成各节点数据，然后拷贝到树莓派中就行。</p>
<h3 id="运行geth文件0911-am">运行geth文件（09.11 am）</h3>
<p>直接拷贝编译的geth文件到另一个树莓派，并使用<code>cp</code>命令复制到/usr/local/bin目录无法执行，提示</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">-bash: /usr/local/bin/geth: Permission denied
</code></pre></td></tr></table>
</div>
</div><p>是因为没有执行权限，使用<code>chmod</code>命令授予权限即可顺利执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">cd</span> quorum
$ sudo cp build/bin/geth /usr/local/bin
$ sudo chmod +x /usr/local/bin/geth
$ geth version
WARN <span class="o">[</span>09-11<span class="p">|</span>03:13:38.840<span class="o">]</span> Sanitizing cache to Go<span class="err">&#39;</span>s GC limits       <span class="nv">provided</span><span class="o">=</span><span class="m">1024</span> <span class="nv">updated</span><span class="o">=</span><span class="m">308</span>
Geth
Version: 1.8.18-stable
Quorum Version: 2.2.5
Architecture: arm
Protocol Versions: <span class="o">[</span><span class="m">63</span> 62<span class="o">]</span>
Network Id: <span class="m">1337</span>
Go Version: go1.11.6
Operating System: linux
<span class="nv">GOPATH</span><span class="o">=</span>
<span class="nv">GOROOT</span><span class="o">=</span>/usr/lib/go-1.11
</code></pre></td></tr></table>
</div>
</div><p>这样看来，交叉编译的结果也不是因为系统不支持，应该也是没有执行权限，下面是使用geth version命令测试交叉编译的geth的结果。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">WARN <span class="o">[</span>09-11<span class="p">|</span>03:27:52.671<span class="o">]</span> Sanitizing cache to Go<span class="err">&#39;</span>s GC limits       <span class="nv">provided</span><span class="o">=</span><span class="m">1024</span>                                      <span class="nv">updated</span><span class="o">=</span><span class="m">308</span>
Geth
Version: 1.8.18-stable
Git Commit: 7e87e403407fcb3b3c417739eef2fe1dae923add
Quorum Version: 2.2.5
Architecture: arm
Protocol Versions: <span class="o">[</span><span class="m">63</span> 62<span class="o">]</span>
Network Id: <span class="m">1337</span>
Go Version: go1.12
Operating System: linux
<span class="nv">GOPATH</span><span class="o">=</span>
<span class="nv">GOROOT</span><span class="o">=</span>/usr/local/go
</code></pre></td></tr></table>
</div>
</div><p>走了好多弯路。。。原来一开始的结果就可以。</p>
]]></description></item><item><title>提取以太坊的区块产生时间</title><link>https://shuzang.github.io/extract-the-block-generation-time-of-ethereum/</link><pubDate>Fri, 05 Apr 2019 21:35:00 +0800</pubDate><author>作者</author><guid>https://shuzang.github.io/extract-the-block-generation-time-of-ethereum/</guid><description><![CDATA[<h2 id="前言">前言</h2>
<p>目的是提取以太坊的区块产生时间形成数据集，初步的思路有两种：</p>
<ul>
<li>爬取以太坊区块浏览器中的时间数据，然后格式化形成数据集输出</li>
<li>同步以太坊的所有区块（头），利用以太坊本身提供的接口提取每个区块的时间戳信息，然后将时间戳转换为真实的日期格式形成数据集输出，<a href="https://tool.lu/timestamp/" target="_blank" rel="noopener noreffer">时间戳转换在线工具</a></li>
</ul>
<p>查询资料过程中，了解到谷歌已提供以太坊的区块信息数据集<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>。虽然数据集本身没有时间信息，但可以导出时间戳进行转换，了解到谷歌使用的工具是<a href="https://github.com/blockchain-etl/ethereum-etl#blockscsv" target="_blank" rel="noopener noreffer">ethereum-etl</a>，故最终的解决方案是：使用ethereum-etl导出时间戳，编写Python程序转换时间戳并导出数据集。</p>
<h2 id="区块时间戳信息导出">区块时间戳信息导出</h2>
<p>系统环境为Ubuntu18.04，已安装python环境。安装Ethereum ETL：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ pip3 install ethereum-etl
</code></pre></td></tr></table>
</div>
</div><p>安装依赖模块</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ pip3 install mythril
$ pip3 install pyetherchain
</code></pre></td></tr></table>
</div>
</div><p>导出区块信息，导出速度和国家有关，国内较慢。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ ethereumetl export_blocks_and_transactions -s <span class="m">1</span> -e <span class="m">200000</span> -p https://mainnet.infura.io -b <span class="m">100</span> -w <span class="m">3</span> --blocks-output blocks.csv
</code></pre></td></tr></table>
</div>
</div><p>所有的参数使用可以通过<code>-h</code>参数查看，更多信息详见<a href="https://github.com/blockchain-etl/ethereum-etl#blockscsv" target="_blank" rel="noopener noreffer">ethereum-etl</a>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">&gt; ethereumetl export_blocks_and_transactions -h

Usage: ethereumetl export_blocks_and_transactions <span class="o">[</span>OPTIONS<span class="o">]</span>

  Export blocks and transactions.

Options:
  -s, --start-block INTEGER   Start block
  -e, --end-block INTEGER     End block  <span class="o">[</span>required<span class="o">]</span>
  -b, --batch-size INTEGER    The number of blocks to <span class="nb">export</span> at a time.
  -p, --provider-uri TEXT     The URI of the web3 provider e.g.
                              file://<span class="nv">$HOME</span>/Library/Ethereum/geth.ipc or
                              https://mainnet.infura.io
  -w, --max-workers INTEGER   The maximum number of workers.
  --blocks-output TEXT        The output file <span class="k">for</span> blocks. If not provided
                              blocks will not be exported. Use <span class="s2">&#34;-&#34;</span> <span class="k">for</span> stdout
  --transactions-output TEXT  The output file <span class="k">for</span> transactions. If not
                              provided transactions will not be exported. Use
                              <span class="s2">&#34;-&#34;</span> <span class="k">for</span> stdout
  -h, --help                  Show this message and exit.
</code></pre></td></tr></table>
</div>
</div><p>导出的<code>blocks.csv</code>数据集格式如下</p>
<table>
<thead>
<tr>
<th>Column</th>
<th>Type</th>
</tr>
</thead>
<tbody>
<tr>
<td>number</td>
<td>bigint</td>
</tr>
<tr>
<td>hash</td>
<td>hex_string</td>
</tr>
<tr>
<td>parent_hash</td>
<td>hex_string</td>
</tr>
<tr>
<td>nonce</td>
<td>hex_string</td>
</tr>
<tr>
<td>sha3_uncles</td>
<td>hex_string</td>
</tr>
<tr>
<td>logs_bloom</td>
<td>hex_string</td>
</tr>
<tr>
<td>transactions_root</td>
<td>hex_string</td>
</tr>
<tr>
<td>state_root</td>
<td>hex_string</td>
</tr>
<tr>
<td>receipts_root</td>
<td>hex_string</td>
</tr>
<tr>
<td>miner</td>
<td>address</td>
</tr>
<tr>
<td>difficulty</td>
<td>numeric</td>
</tr>
<tr>
<td>total_difficulty</td>
<td>numeric</td>
</tr>
<tr>
<td>size</td>
<td>bigint</td>
</tr>
<tr>
<td>extra_data</td>
<td>hex_string</td>
</tr>
<tr>
<td>gas_limit</td>
<td>bigint</td>
</tr>
<tr>
<td>gas_used</td>
<td>bigint</td>
</tr>
<tr>
<td>timestamp</td>
<td>bigint</td>
</tr>
<tr>
<td>transaction_count</td>
<td>bigint</td>
</tr>
</tbody>
</table>
<p>打开<code>blocks.csv</code>文件，删除无关项，保留<code>number</code>和<code>timestamp</code>两项。</p>
<h2 id="时间戳转换及数据集生成">时间戳转换及数据集生成</h2>
<p>利用csv模块进行数据集逐行读取，利用time模块进行时间戳转换，利用numpy模块进行数据集重新写入，代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">csv</span><span class="o">,</span><span class="nn">time</span>
<span class="kn">import</span> <span class="nn">numpy</span>

<span class="n">filename</span> <span class="o">=</span> <span class="s1">&#39;F:/blocks.csv&#39;</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">reader</span> <span class="o">=</span> <span class="n">csv</span><span class="o">.</span><span class="n">reader</span><span class="p">(</span><span class="n">f</span><span class="p">)</span>
    <span class="n">header_row</span> <span class="o">=</span> <span class="nb">next</span><span class="p">(</span><span class="n">reader</span><span class="p">)</span>
    <span class="n">date</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">rowNumber</span> <span class="o">=</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="n">reader</span><span class="p">:</span>
        <span class="n">date</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">row</span><span class="p">)</span>
        <span class="n">rowNumber</span> <span class="o">=</span> <span class="n">rowNumber</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">rowNumber</span><span class="o">-</span><span class="mi">1</span><span class="p">:</span>
        <span class="n">timeStamp</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">date</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span>
        <span class="n">timeArray</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">localtime</span><span class="p">(</span><span class="n">timeStamp</span><span class="p">)</span>
        <span class="n">otherStyleTime</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s2">&#34;%Y-%m-</span><span class="si">%d</span><span class="s2"> %H:%M:%S&#34;</span><span class="p">,</span><span class="n">timeArray</span><span class="p">)</span>
        <span class="n">date</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">otherStyleTime</span><span class="p">)</span>
        <span class="k">print</span><span class="p">(</span><span class="n">date</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">2</span><span class="p">])</span>
        <span class="n">i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="n">numpy</span><span class="o">.</span><span class="n">savetxt</span><span class="p">(</span><span class="s1">&#39;blocks.csv&#39;</span><span class="p">,</span> <span class="n">date</span><span class="p">,</span> <span class="n">delimiter</span> <span class="o">=</span> <span class="s1">&#39;,&#39;</span><span class="p">,</span><span class="n">fmt</span> <span class="o">=</span> <span class="s1">&#39;</span><span class="si">%s</span><span class="s1">&#39;</span><span class="p">)</span>
</code></pre></td></tr></table>
</div>
</div><p>生成的数据集格式如下，第一列为区块号，第二列为时间戳，第三列为转换后的时间信息，以逗号分隔，共20万条数据。在第一行手动添加表头。</p>
<p>注：此时的以太坊主链总区块数在750万个左右。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">Number,Timestamp,Block generation <span class="nb">time</span>
1,1438269988,2015-07-30 23:26:28
2,1438270017,2015-07-30 23:26:57
3,1438270048,2015-07-30 23:27:28
4,1438270077,2015-07-30 23:27:57
5,1438270083,2015-07-30 23:28:03
6,1438270107,2015-07-30 23:28:27
7,1438270110,2015-07-30 23:28:30
8,1438270112,2015-07-30 23:28:32
9,1438270115,2015-07-30 23:28:35
10,1438270128,2015-07-30 23:28:48
11,1438270136,2015-07-30 23:28:56
12,1438270144,2015-07-30 23:29:04
13,1438270158,2015-07-30 23:29:18
14,1438270161,2015-07-30 23:29:21
15,1438270168,2015-07-30 23:29:28
16,1438270174,2015-07-30 23:29:34
</code></pre></td></tr></table>
</div>
</div><p>也可以直接利用谷歌 BigQuery 获取和分析以太坊数据，见<a href="https://www.jianshu.com/p/b611dbb526cd" target="_blank" rel="noopener noreffer">使用谷歌 BigQuery 分析以太坊数据</a></p>
<h2 id="参考文献">参考文献</h2>
<p><a href="https://medium.com/validitylabs/how-to-interact-with-the-ethereum-blockchain-and-create-a-database-with-python-and-sql-3dcbd579b3c0" target="_blank" rel="noopener noreffer">How to interact with the Ethereum blockchain and create a database with Python and SQL</a></p>
<p><a href="https://ethereum.stackovernet.com/cn/q/5558" target="_blank" rel="noopener noreffer">How do you work with Date and time on Ethereum platform</a></p>
<p><a href="https://cloud.google.com/blog/products/data-analytics/ethereum-bigquery-public-dataset-smart-contract-analytics" target="_blank" rel="noopener noreffer">Google Cloud-Ethereum in BigQuery</a></p>
<p><a href="https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types" target="_blank" rel="noopener noreffer">Google Cloud数据库操作</a></p>
<p><a href="https://googleapis.github.io/google-cloud-python/latest/bigquery/usage/queries.html" target="_blank" rel="noopener noreffer">Google Cloud文档</a></p>
<p><a href="https://www.kaggle.com/docs/datasets" target="_blank" rel="noopener noreffer">How to use Kaggle</a></p>
<p><a href="https://www.kaggle.com/bigquery/ethereum-blockchain" target="_blank" rel="noopener noreffer">Kaggle调用BigQuery</a></p>
<p><a href="https://www.kaggle.com/sohier/beyond-queries-exploring-the-bigquery-api" target="_blank" rel="noopener noreffer">Kaggle-Beyond Queries: Exploring the BigQuery API</a></p>
<p><a href="https://www.kaggle.com/mrisdal/visualizing-average-ether-costs-over-time/data" target="_blank" rel="noopener noreffer">Kaggle-Visualizing average Ether costs over time</a></p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="https://www.infoq.cn/article/ethereum-bigquery-public-dataset-smart-contract-analytics" target="_blank" rel="noopener noreffer">谷歌宣布其 BigQuery 服务已支持以太坊区块链数据分析</a> <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>]]></description></item><item><title>swarm网络搭建</title><link>https://shuzang.github.io/swarm%E7%BD%91%E7%BB%9C%E6%90%AD%E5%BB%BA/</link><pubDate>Thu, 28 Mar 2019 19:59:00 +0800</pubDate><author>作者</author><guid>https://shuzang.github.io/swarm%E7%BD%91%E7%BB%9C%E6%90%AD%E5%BB%BA/</guid><description><![CDATA[<p>说实话，swarm的资料比较难找，倒是IPFS的比较多一点。最后只在<a href="http://medium.com/" target="_blank" rel="noopener noreffer">Medium</a>找到了一些，本篇文章就是在实践其中的一些项目，并通过这样来学习swarm。</p>
<p>参考链接：<a href="https://swarm-gateways.net/bzz:/theswarm.eth/" target="_blank" rel="noopener noreffer">swarm官网</a>，<a href="https://swarm-guide.readthedocs.io/en/latest/introduction.html" target="_blank" rel="noopener noreffer">swarm文档</a>，<a href="https://github.com/ethersphere" target="_blank" rel="noopener noreffer">github项目</a></p>
<p>还有一些帮助理解的资料：</p>
<ul>
<li>
<p><a href="https://ethereum.stackexchange.com/questions/55027/swarm-in-a-private-network" target="_blank" rel="noopener noreffer">关于swarm的三个理解上的问题</a></p>
</li>
<li>
<p><a href="https://github.com/ethersphere/go-ethereum/wiki/IPFS-&amp;-SWARM" target="_blank" rel="noopener noreffer">swarm和ipfs的比较</a></p>
</li>
</ul>
<h2 id="1-ethereum-swarm是什么">1. Ethereum Swarm是什么</h2>
<p>Ethereum swarm是一个分布式文件存储系统，开发这个项目是因为区块链中的数据存储是昂贵的，它的不同之处在于它会激励一部分参与者提供他们的存储资源，以此来维持存储网络的稳定运行，当然，目前激励机制还没有上线。</p>
<p>撰写本文时，找到的最新版本是POC3（Proof-of-Concept Release 3)，发布于June 21, 2018。关于该版本和该项目的详细信息见：</p>
<p><a href="https://blog.ethereum.org/2018/06/21/announcing-swarm-proof-of-concept-release-3/" target="_blank" rel="noopener noreffer">Announcing Swarm Proof-of-Concept Release 3</a></p>
<p><a href="https://blog.ethereum.org/2016/12/15/swarm-alpha-public-pilot-basics-swarm/" target="_blank" rel="noopener noreffer">Swarm alpha public pilot and the basics of Swarm</a></p>
<h2 id="2-安装swarm">2. 安装Swarm</h2>
<p>详细的安装方式见<a href="https://swarm-guide.readthedocs.io/en/latest/installation.html" target="_blank" rel="noopener noreffer">这里</a>，这里只介绍在Ubuntu上通过PPA安装，虽然这种方式安装的是stable版本，但版本号同样在0.3，所以就不使用更麻烦的自编译源码安装了。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo add-apt-repository -y ppa:ethereum/ethereum
$ sudo apt-get update
$ sudo apt-get install ethereum-swarm
</code></pre></td></tr></table>
</div>
</div><p>安装完成后查看swarm版本</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ swarm version
Swarm
Version: 0.3.11-stable
Git Commit: c942700427557e3ff6de3aaf6b916e2f056c1ec2
Go Version: go1.10.4
OS: linux
</code></pre></td></tr></table>
</div>
</div><h2 id="3-配置swarm网络">3. 配置Swarm网络</h2>
<h3 id="31-第一个swarm节点">3.1 第一个swarm节点</h3>
<p>运行swarm需要以太坊账户，我们通过geth命令来创建账户，需要已经进行过<a href="https://github.com/ethereum/go-ethereum/wiki/Installing-Geth" target="_blank" rel="noopener noreffer">geth安装</a>。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ mkdir swarmNode1
$ geth --datadir swarmNode1/ account new
$ <span class="nb">export</span> <span class="nv">BZZKEY1</span><span class="o">=</span><span class="s2">&#34;your new account address&#34;</span>
</code></pre></td></tr></table>
</div>
</div><p>将返回的账户地址设置为环境变量<code>BZZKEY1</code>，然后启动第一个节点。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ swarm --bzzaccount <span class="nv">$BZZKEY1</span> --datadir swarmNode1/ --keystore swarmNode1/keystore --ens-api <span class="s2">&#34;&#34;</span> --bzzport <span class="m">5000</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li><strong>bzzaccount</strong>：设置节点账户地址</li>
<li><strong>datadir</strong>：设置swarm节点存储数据的文件目录</li>
<li><strong>keystore</strong>：账户密钥所在文件目录，设置该选项后就可以使用密码来解锁账户</li>
<li><strong>ens-api</strong>：将此项设置为空，swarm将不会连接到区块链，并在无区块链环境下运行</li>
<li><strong>bzzport</strong>：设置用来上传和下载的端口地址</li>
</ul>
<p>运行单节点的话以上设置已经足够了，但是运行多节点的话还需要其它一些设置，并不能简单的重复第一个节点的配置过程。</p>
<h3 id="32-更多swarm节点">3.2 更多swarm节点</h3>
<p>启动多个节点的时候不能仅仅改动<code>--bzzport</code>参数，还需要改动UDP端口号，这一点文档中没有提到，启动第二个节点的示例如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ mkdir swarmNode2
$ geth --datadir swarmNode2/ account new
$ <span class="nb">export</span> <span class="nv">BZZKEY2</span><span class="o">=</span><span class="s2">&#34;your new account address&#34;</span>
$ swarm --bzzaccount <span class="nv">$BZZKEY2</span> --datadir swarmNode2/ --keystore swarmNode2/keystore --ens-api <span class="s2">&#34;&#34;</span> --bzzport <span class="m">5500</span> --port <span class="m">9000</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="33-连接swarm节点">3.3 连接swarm节点</h3>
<p>现在节点都已经启动，我们需要把它们连接起来以完成彼此通信。为了完成这一点，我们需要手动地将swarmNode2的引导节点连接到swarmNode1。</p>
<p>首先寻找swarmNode2的引导节点地址，运行如下命令。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ geth --exec <span class="s2">&#34;console.log(admin.nodeInfo.enode)&#34;</span> attach swarmNode2/bzzd.ipc
enode://4ae5ee37b365e316b1d2b3d07e5cb1f620919ff39b89f5640b461e64bb92cf8a2caa399548a292387c3f31741ff0e886231258a66707ce51ba5f85856790faac@127.0.0.1:9800?discport<span class="o">=</span><span class="m">0</span>
</code></pre></td></tr></table>
</div>
</div><ul>
<li><strong>exec</strong>：执行JavaScript语句(只能结合console/attach使用)</li>
<li><strong>bzzd.ipc</strong>：运行swarmNode2生成的文件，结束运行该文件消失</li>
</ul>
<p>复制结果并添加到如下命令，连接两个节点</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ geth --exec<span class="o">=</span><span class="s1">&#39;admin.addPeer(&#34;your enode address&#34;)&#39;</span> attach swarmNode1/bzzd.ipc
</code></pre></td></tr></table>
</div>
</div><p><code>your enode address</code>即我们上面得到的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">enode://4ae5ee37b365e316b1d2b3d07e5cb1f620919ff39b89f5640b461e64bb92cf8a2caa399548a292387c3f31741ff0e886231258a66707ce51ba5f85856790faac@127.0.0.1:9800
</code></pre></td></tr></table>
</div>
</div><p>使用的时候需要去掉<code>?discport=0</code></p>
<h2 id="4-测试网络连接">4. 测试网络连接</h2>
<p>现在我们来测试两个节点是否已连接。使用如下命令从swarmNode1上传文件<code>fileToUpload.txt</code>，文件内容为<code>test file</code>，上传成功将返回文件哈希</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ swarm --bzzapi <span class="s2">&#34;http://localhost:5000&#34;</span> up fileToUpload.txt
82c5c438f80dc81730ab9d8aeaa8fc433b3d719590f6729872e42c6c0eed59c5
</code></pre></td></tr></table>
</div>
</div><p>复制该哈希作为地址从swarmNode2查询</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ curl http://localhost:5500/bzz:/your <span class="nb">hash</span> comes here/
</code></pre></td></tr></table>
</div>
</div><p>该条命令将返回哈希对应的文件内容<code>test file</code></p>
<br>
<p>可查看<a href="https://swarm-guide.readthedocs.io/en/latest/introduction.html" target="_blank" rel="noopener noreffer">swarm文档</a>阅读更多细节</p>]]></description></item></channel></rss>