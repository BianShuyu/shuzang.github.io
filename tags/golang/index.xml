<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on Shuzang's Blog</title><link>https://shuzang.github.io/tags/golang/</link><description>Recent content in Golang on Shuzang's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 13 Jun 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://shuzang.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang运行时</title><link>https://shuzang.github.io/2020/06/golang-runtime/</link><pubDate>Sat, 13 Jun 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/06/golang-runtime/</guid><description>先放参考文献，之后慢慢写这篇 说说Golang的runtime The Go scheduler ，以及这篇文章的中译版 The Journey of Go&amp;rsquo;s Garbage Collector</description></item><item><title>Golang日志系统</title><link>https://shuzang.github.io/2020/06/golang-log-system/</link><pubDate>Sun, 07 Jun 2020 09:48:00 +0800</pubDate><guid>https://shuzang.github.io/2020/06/golang-log-system/</guid><description>&lt;p>日志是一个系统必不可少的部分，本篇介绍Golang中的日志系统。&lt;/p></description></item><item><title>Golang设置与使用cookie</title><link>https://shuzang.github.io/2020/06/golang-set-and-use-cookie/</link><pubDate>Mon, 01 Jun 2020 20:11:00 +0800</pubDate><guid>https://shuzang.github.io/2020/06/golang-set-and-use-cookie/</guid><description>&lt;p>关于 Cookie 的使用是 Web 编程中的重要一部分，本篇介绍 Cookie 的基本知识和 Golang 中使用的方法。&lt;/p></description></item><item><title>Golang模板</title><link>https://shuzang.github.io/2020/05/golang-template/</link><pubDate>Fri, 29 May 2020 17:08:00 +0800</pubDate><guid>https://shuzang.github.io/2020/05/golang-template/</guid><description>&lt;p>模板就是在写动态页面时不变的部分，服务端程序渲染可变部分生成动态网页，Go 语言提供了 html/template 包来支持模板渲染。&lt;/p></description></item><item><title>Golang使用gorilla/mux包</title><link>https://shuzang.github.io/2020/05/golang-use-gorilla/mux-package/</link><pubDate>Fri, 29 May 2020 13:38:00 +0800</pubDate><guid>https://shuzang.github.io/2020/05/golang-use-gorilla/mux-package/</guid><description>&lt;p>本文介绍 &lt;a href="https://github.com/gorilla/mux" target="_blank">gorilla/mux&lt;/a>
包的使用。&lt;/p></description></item><item><title>Golang启动HTTP服务器</title><link>https://shuzang.github.io/2020/05/golang-start-http-server/</link><pubDate>Fri, 29 May 2020 09:32:00 +0800</pubDate><guid>https://shuzang.github.io/2020/05/golang-start-http-server/</guid><description>&lt;p>本文介绍 HTTP 协议及 Golang 如何实现 HTTP 服务端及客户端。&lt;/p></description></item><item><title>Golang密码学算法</title><link>https://shuzang.github.io/2020/05/golang-cryptographic-algorithm/</link><pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/05/golang-cryptographic-algorithm/</guid><description>&lt;p>在 Go 中，加密是很重要的一部分，本文对此进行介绍。&lt;/p></description></item><item><title>Golang数据库编程</title><link>https://shuzang.github.io/2020/05/golang-interact-with-mysql/</link><pubDate>Tue, 26 May 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/05/golang-interact-with-mysql/</guid><description>Go 官方提供了database 包，database 包下有 sql/driver。该包用来定义操作数据库的接口，这保证了无论使用哪种数据库，操作方</description></item><item><title>Golang语法基础12-测试</title><link>https://shuzang.github.io/2019/12/golang-syntax-12-test/</link><pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/12/golang-syntax-12-test/</guid><description>实际开发中对代码进行测试是不可缺少的工作，在go中可以通过testing包来进行代码的测试。testing包和go test命令相互配合，能够</description></item><item><title>Golang语法基础11-错误处理</title><link>https://shuzang.github.io/2019/12/golang-syntax-11-error-and-panic/</link><pubDate>Fri, 20 Dec 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/12/golang-syntax-11-error-and-panic/</guid><description>Go中有两套错误处理的方式 普通错误： 在函数和方法中返回错误对象作为它们的唯一或最后一个返回值 ，如果返回nil，表示没有错误 异常：使用pani</description></item><item><title>Golang语法基础10-协程与通道</title><link>https://shuzang.github.io/2019/12/golang-syntax-10-goroutine-and-channel/</link><pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/12/golang-syntax-10-goroutine-and-channel/</guid><description>首先来回顾在操作系统中学过的一些概念。进程(processes)是程序执行的基本单位，运行在一个独立的内存地址空间中；一个进程由多个线程(t</description></item><item><title>Golang语法基础8-结构体与方法</title><link>https://shuzang.github.io/2019/11/golang-syntax-8-struct-and-method/</link><pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/11/golang-syntax-8-struct-and-method/</guid><description>Go中结构体的概念和C相同，甚至声明用的关键字也是struct，因为Go中没有类的概念，因此结构体的地位比较重要。 1. 定义与初始化 简单的结构体</description></item><item><title>Golang语法基础9-接口与反射</title><link>https://shuzang.github.io/2019/11/golang-syntax-9-interface-and-reflect/</link><pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/11/golang-syntax-9-interface-and-reflect/</guid><description>&lt;p>本篇介绍 Golang 中的接口与反射。&lt;/p></description></item><item><title>Golang语法基础7-函数</title><link>https://shuzang.github.io/2019/11/golang-syntax-7-function/</link><pubDate>Mon, 25 Nov 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/11/golang-syntax-7-function/</guid><description>1. 函数声明与定义 Go中有三种类型的函数： 普通的带有名字的函数 匿名函数 方法（Methods，在结构体部分介绍） 普通函数声明的基本格式为 1 func functionName(param1 type1,</description></item><item><title>Golang语法基础6-数组、切片与映射</title><link>https://shuzang.github.io/2019/11/golang-syntax-6-array-slice-and-map/</link><pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/11/golang-syntax-6-array-slice-and-map/</guid><description>只有基本的数据类型无法适应所有的情况，当需要存储和处理大量数据时，通常会使用数组、映射、链表等数据结构，称之为容器(container)。在</description></item><item><title>Golang语法基础5-字符串操作与输入输出</title><link>https://shuzang.github.io/2019/11/golang-syntax-5-string-input-and-output/</link><pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/11/golang-syntax-5-string-input-and-output/</guid><description>本篇介绍字符串的相关操作，涉及string和strconv两个标准库，以及介绍输入输出的基本方法，涉及fmt和bufio两个标准库。 1. 字符串</description></item><item><title>Golang语法基础4-运算符与流程控制</title><link>https://shuzang.github.io/2019/10/golang-syntax-4-operators-and-flow-control/</link><pubDate>Tue, 29 Oct 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/10/golang-syntax-4-operators-and-flow-control/</guid><description>&lt;p>本文介绍 Golang 中的运算符和流程控制&lt;/p></description></item><item><title>Golang语法基础3-常量变量与基本数据类型</title><link>https://shuzang.github.io/2019/10/golang-syntax-3-constants-variables-and-elementary-types/</link><pubDate>Tue, 22 Oct 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/10/golang-syntax-3-constants-variables-and-elementary-types/</guid><description>&lt;p>本文介绍 Golang 中的常量、变量和基本数据类型。&lt;/p></description></item><item><title>Golang语法基础2-命令、包与模块</title><link>https://shuzang.github.io/2019/09/golang-basic-grammer-2-command-package-module/</link><pubDate>Thu, 19 Sep 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/09/golang-basic-grammer-2-command-package-module/</guid><description>本篇介绍Go中的基础命令，包和模块。 1. 命令 Go 在安装后自带一个命令行工具，名为 go，用来下载、编译、安装、测试 Go 的包和源文件，关于 Go CLI 的发展历</description></item><item><title>Golang语法基础1-背景与初探</title><link>https://shuzang.github.io/2019/09/golang-basic-grammar-1-background-and-preliminary-exploration/</link><pubDate>Fri, 13 Sep 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/09/golang-basic-grammar-1-background-and-preliminary-exploration/</guid><description>1. 起源与发展 Go/Golang 起源于2007年，并于2009年正式对外发布，是一个完全开源的项目，背后的支持者是谷歌公司，核心设计者是三位著名IT工程师：K</description></item><item><title>Golang查漏补缺 按指定长度构造二维切片</title><link>https://shuzang.github.io/2019/09/golang%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA-%E6%8C%89%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6%E6%9E%84%E9%80%A0%E4%BA%8C%E7%BB%B4%E5%88%87%E7%89%87/</link><pubDate>Tue, 03 Sep 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/09/golang%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA-%E6%8C%89%E6%8C%87%E5%AE%9A%E9%95%BF%E5%BA%A6%E6%9E%84%E9%80%A0%E4%BA%8C%E7%BB%B4%E5%88%87%E7%89%87/</guid><description>因为初始化时，数组长度必须为常量，所以当要求按给定的长度构造数组时，一般都使用切片来完成。一维的切片直接使用arr := make([]int, len)构造，len是</description></item><item><title>Golang查漏补缺 bufio读取的字符串无法直接进行类型转换</title><link>https://shuzang.github.io/2019/08/golang%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA-bufio%E8%AF%BB%E5%8F%96%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%97%A0%E6%B3%95%E7%9B%B4%E6%8E%A5%E8%BF%9B%E8%A1%8C%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</link><pubDate>Tue, 27 Aug 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/08/golang%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA-bufio%E8%AF%BB%E5%8F%96%E7%9A%84%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%97%A0%E6%B3%95%E7%9B%B4%E6%8E%A5%E8%BF%9B%E8%A1%8C%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</guid><description>如下列代码，在使用bufio包中的ReadString读取字符串之后，这个字符串无法进行类型转换，每次使用strconv.Atoi()函数返</description></item><item><title>Golang查漏补缺 对自定义类型排序</title><link>https://shuzang.github.io/2019/08/golang%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA-%E5%AF%B9%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E6%8E%92%E5%BA%8F/</link><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/08/golang%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA-%E5%AF%B9%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E6%8E%92%E5%BA%8F/</guid><description>PAT乙级25分的题好多需要根据一个结构体类型的某个字段进行排序，第一次遇到时确实不知所措，然后查了不少解决方案，这里做个总结。 这一问题一般</description></item><item><title>Golang查漏补缺 程序执行时间优化</title><link>https://shuzang.github.io/2019/08/golang%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA-%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4%E4%BC%98%E5%8C%96/</link><pubDate>Fri, 16 Aug 2019 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2019/08/golang%E6%9F%A5%E6%BC%8F%E8%A1%A5%E7%BC%BA-%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E6%97%B6%E9%97%B4%E4%BC%98%E5%8C%96/</guid><description>最近在刷PAT乙级的题，因为PAT考点一般只提供C/C++或Java环境的缘故，网上找到的90%都是C++代码，剩下的又绝大部分是Java，</description></item></channel></rss>