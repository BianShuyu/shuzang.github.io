<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>数据结构与算法 on Shuzang's Blog</title><link>https://shuzang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</link><description>Recent content in 数据结构与算法 on Shuzang's Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 04 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://shuzang.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml"/><item><title>算法-回溯</title><link>https://shuzang.github.io/2020/05/backtracking/</link><pubDate>Mon, 04 May 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/05/backtracking/</guid><description>在真实世界的问题中，很多都不存在快速解法，只能穷尽搜索，一个高效的搜索技术非常重要。回溯（Backtracking）和分支限界（Branch</description></item><item><title>算法-贪心</title><link>https://shuzang.github.io/2020/05/greedu/</link><pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/05/greedu/</guid><description/></item><item><title>算法-动态规划</title><link>https://shuzang.github.io/2020/05/dynamic-programming/</link><pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/05/dynamic-programming/</guid><description>&lt;p>动态规划策略通常用于求解最优化问题。在这类问题中，可能会有许多可行解，每个解对应一个值，我们希望找到具有最优值的那个解，也就是最优解。当题目中涉及「最大」「最小」等词时，很有可能就是这类问题，要考虑是否可用动态规划求解。&lt;/p></description></item><item><title>算法-递归与分治</title><link>https://shuzang.github.io/2020/04/divide-and-conquer/</link><pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/04/divide-and-conquer/</guid><description>首先简单阐述一下递归、分治、动态规划和贪心这几个东西的区别和练习。 递归是一种编程技巧，一种解决问题的思维方式； 分治和动态规划是建立在递归基础</description></item><item><title>算法-排序</title><link>https://shuzang.github.io/2020/04/algorithm-sort/</link><pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/04/algorithm-sort/</guid><description>排序算法又分为内部排序（待排序记录存放在计算机存储器中进行的排序过程）和外部排序（由于待排序记录数量大，以致内存一次不能容纳全部记录，在排序</description></item><item><title>算法-搜索</title><link>https://shuzang.github.io/2020/03/algorithm-search/</link><pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/03/algorithm-search/</guid><description/></item><item><title>算法-字符串类问题</title><link>https://shuzang.github.io/2020/03/stings-problem/</link><pubDate>Sun, 22 Mar 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/03/stings-problem/</guid><description/></item><item><title>算法-数组类问题</title><link>https://shuzang.github.io/2020/03/array-problem/</link><pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/03/array-problem/</guid><description>螺旋矩阵是指一个呈螺旋状的矩阵，它的数字由第一行开始到右边不断变大，向下变大，向左变大，向上变大，如此循环。给定m和n，返回一个大小为m*n</description></item><item><title>数据结构-图</title><link>https://shuzang.github.io/2020/03/data-structure-graph/</link><pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/03/data-structure-graph/</guid><description>链表是一种一对一的关系，树是一种一对多的关系，图则是一种多对多的关系。实际上，我们可以将链表和树都看作图的一部分。 1. 图的定义 用 V(Vertex) 表示顶点的集</description></item><item><title>数据结构-堆</title><link>https://shuzang.github.io/2020/03/data-structure-heap/</link><pubDate>Wed, 11 Mar 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/03/data-structure-heap/</guid><description>普通的队列是一种先进先出的数据结构，元素在队列尾追加，而从队列头删除。在优先队列中，元素被赋予优先级。当访问元素时，具有最高优先级的元素最先</description></item><item><title>数据结构-树的常见题型</title><link>https://shuzang.github.io/2020/03/common-question-of-tree/</link><pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/03/common-question-of-tree/</guid><description>下列题目中二叉树结点的定义如下 1 2 3 4 type TreeNode struct { Val int Left *TreeNode } 1. 二叉树 1.1 二叉树的深度 输入一棵二叉树的根节点，求该树的深度。从根节点到叶节点依次经过</description></item><item><title>数据结构-树</title><link>https://shuzang.github.io/2020/02/data-structure-tree/</link><pubDate>Mon, 24 Feb 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/02/data-structure-tree/</guid><description>树是反映事物之间层次关系的一种结构，比如家谱树、硬盘目录结构树等。 使用树的原因是这种层次结构在管理上有更高的效率，以查找为例，顺序查找的时间</description></item><item><title>数据结构-队列与栈</title><link>https://shuzang.github.io/2020/02/data-structure-queue-and-stack/</link><pubDate>Sat, 22 Feb 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/02/data-structure-queue-and-stack/</guid><description>队列是先入先出的数据结构，栈是后入先出的数据结构，并不因实现形式的不同（数组或链表）而有差别。在本文中，我们对队列的核心功能，栈的核心功能，</description></item><item><title>数据结构-链表</title><link>https://shuzang.github.io/2020/02/data-structure-linkedlist/</link><pubDate>Thu, 20 Feb 2020 00:00:00 +0000</pubDate><guid>https://shuzang.github.io/2020/02/data-structure-linkedlist/</guid><description>链表是一种最为基础的数据结构，由一系列结点组成，每个结点不仅包含值，还包含指向下一个结点（有时也包括上一个结点）的指针。相比于数组，在链表中</description></item></channel></rss>