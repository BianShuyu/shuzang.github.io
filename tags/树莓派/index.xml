<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>树莓派 - 标签 - Shuzang's Blog</title><link>https://shuzang.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/</link><description>树莓派 - 标签 - Shuzang's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>lylw1996@qq.com (shuzang)</managingEditor><webMaster>lylw1996@qq.com (shuzang)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 09 Sep 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://shuzang.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/" rel="self" type="application/rss+xml"/><item><title>树莓派安装quorum节点</title><link>https://shuzang.github.io/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85quorum%E8%8A%82%E7%82%B9/</link><pubDate>Mon, 09 Sep 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://shuzang.github.io/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%89%E8%A3%85quorum%E8%8A%82%E7%82%B9/</guid><description><![CDATA[<p>在熟悉了树莓派并和虚拟机顺利组网以后，首要面临的事情就是在树莓派中安装quorum节点，由于暂时不使用隐私保护功能，不安装隐私管理器<code>Tessera</code>或<code>Constellation</code>。需要安装的只包括：</p>
<ul>
<li>quorum的客户端geth</li>
<li>Istanbul BFT共识配置工具istanbul-tool</li>
</ul>
<h3 id="交叉编译20190909">交叉编译（2019.09.09）</h3>
<p><a href="https://github.com/jpmorganchase/quorum" target="_blank" rel="noopener noreffer">quorum项目</a>没有提供可用于arm架构的二进制包，只能自己编译。然而，在树莓派中直接进行编译存在两个问题</p>
<ol>
<li>会占用很多不必要的空间，quorum项目文件编译后大小在360M以上</li>
<li>编译istanbul-tool依赖于golang的某些包，需要访问google，很多ip无法访问。</li>
</ol>
<p>因此，最终选择了在PC中进行交叉编译，幸运的是，由于quorum的源项目ethereum可以交叉编译，quorum继承了交叉编译的功能。文档仍然需要看<a href="https://github.com/ethereum/go-ethereum/wiki/Cross-compiling-Ethereum" target="_blank" rel="noopener noreffer">Cross compiling Ethereum</a>。交叉编译依赖于名为<code>xgo</code>的包，而这个包依赖于Docker和Go，因此，交叉编译之前需要先安装它们。</p>
<p><em>注：交叉编译在Ubuntu18.04系统下进行。</em></p>
<p>安装golang</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo snap install go --classic
$ go version
</code></pre></td></tr></table>
</div>
</div><p><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener noreffer">安装docker(使用脚本)</a></p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ curl -fsSL https://get.docker.com -o get-docker.sh
$ sudo sh get-docker.sh

&lt;output truncated&gt;
<span class="c1"># 想在非root用户下运行，需要将用户添加到docker group。执行如下命令</span>
$ sudo usermod -aG docker your-user
</code></pre></td></tr></table>
</div>
</div><p>下载quorum</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ git clone https://github.com/jpmorganchase/quorum.git
</code></pre></td></tr></table>
</div>
</div><p>执行交叉编译</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">cd</span> quorum
$ make geth-linux-arm-7
$ <span class="nb">cd</span> build/bin
<span class="c1"># 在该目录下可以找到编译后的geth文件</span>
</code></pre></td></tr></table>
</div>
</div><p>心态爆炸，交叉编译后的geth在树莓派中无法执行，Ubuntu18.04下原本编译完直接放到/usr/local/bin下面即可使用，raspbian中当我放到同样的目录下不起作用，也不知道是交叉编译失败了还是raspbian系统不支持。考虑到raspbian基于Debian，现在不知道Debian应该把可执行文件放在哪里，网上找了很久没找到相关资料。(交叉编译其实可以，直接跳到文章最后可看到方法)</p>
<h3 id="ubuntu-mate0910-am">Ubuntu mate（09.10 am）</h3>
<p>quorum的issue中有个项目组的<a href="https://github.com/jpmorganchase/quorum/issues/661" target="_blank" rel="noopener noreffer">回答</a>，其中说quorum运行在树莓派中是肯定可以的，这一点终于可以放心，还推荐用Ubuntu，那就试试。</p>
<blockquote>
<p>“Yes. Whilst I haven&rsquo;t tried it, I&rsquo;m aware that folks have done this and you can find articles on the internet describing how to do it for Ethereum (Quorum will be the same). My suggestion would be to install Ubuntu on the Rasberry and follow the normal steps for building Quorum.”</p>
</blockquote>
<p><a href="https://www.raspberrypi.org/downloads/" target="_blank" rel="noopener noreffer">树莓派官网</a>提供的Ubuntu可用镜像有三种：Ubuntu Mate，Ubuntu Core，Ubuntu Server。看到Ubuntu Mate的种种特性，我动心了，看起来好像是专门定制的。</p>
<p><a href="https://ubuntu-mate.org/raspberry-pi/" target="_blank" rel="noopener noreffer">Ubuntu Mate说明及下载</a>，选择的镜像是</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">Raspberry Pi(recommended)
For aarch32(ARMv7)computers,like:
- Raspberry Pi Model B 2
- Raspberry Pi Model B 3
- Raspberry Pi Model B 3+
</code></pre></td></tr></table>
</div>
</div><p>下载，镜像写入，根目录预先建立<code>ssh</code>和<code>wpa_supplicant.conf</code>文件，插入树莓派，启动运行，扫描不到ip，看起来WiFi没法自动联网。通过网线接到PC上共享网络，ssh访问被拒，接到路由器上一样不行。找资料，关于Ubuntu mate的资料比较少，最终在<a href="https://ubuntu-mate.org/raspberry-pi/" target="_blank" rel="noopener noreffer">官方下载页-Additional feature</a>找到一个对特性的说明，称Ubuntu mate没有像raspbian的pi账户一样预定义的用户账户，所有的配置需要在第一次启动时手动完成，ssh预先也没有安装，需要启动后自己安装<code>openssh-server</code>并启用。完了，彻底崩溃，本来没有用户账户就无法登录，连ssh都没有，第一次必须得用屏幕了。屏幕，我没有。。。</p>
<p>考虑到笔记本电脑上有个HDMI接口，买线总比买屏幕便宜，跑到商店买了根双头HDMI线。回来一试，没用，网上说是因为笔记本的HDMI只能输出信号，没法输入，因此不能作为HDMI屏幕使用。转眼又看到了VGA接口，这个怎么样，结果一查，HDMI转VGA也没用，笔记本的VGA同样只有输出功能，平板，手机全都不行，不能作为显示设备，最多只能用ssh连接。</p>
<p>台式机的显示器总行了吧，资料上说要自带电源，怕烧坏树莓派。没事，台式的显示器本来就接电源线。又去店里换一个HDMI转VGA的线，是店里唯一的线，结果是坏的，把线接到树莓派上没有反应，提示<code>请检查线缆</code>而不是<code>无信号输入</code>，拿笔记本试了一下，果然不行，完全检测不到第二屏幕。换！店里没线了怎么办，本来想换HDMI转DVI的，因为显示器后面还有个DVI接口，但店员小哥不推荐，说是用DVI的少，最后拿了HDMI转VGA母口的线，又多买了一根双头VGA线，亏到爆。</p>
<p>不过，总算好使了。</p>
<p>当在显示器上看到Ubuntu mate的界面时我是激动的，太不容易了。初始配置之后还需要进行系统安装，怪不得没法直接进入。但是路由器的WiFi接入不了，或者连接后没法上网，完全没有头绪，只好先用手机开了热点，这倒是没问题。</p>
<p>把之前交叉编译的<code>geth</code>文件拷贝到了Ubuntu mate，放到<code>/usr/local/bin</code>目录下，运行<code>geth version</code>测试，倒是可以了，可惜屏幕打印的文本乱码。重新启动了一下树莓派，结果无限循环启动。初始界面提示如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">Driver &#39;sdhost-bcm2835&#39; already registered, aborting...
</code></pre></td></tr></table>
</div>
</div><p>论坛上也有人遇到了这个<a href="https://ubuntu-mate.community/t/raspberry-pi-3-model-b-plus-ubuntu-mate-installation-error-driver-sdhost-bcm2835-already-registered-aborting/19300" target="_blank" rel="noopener noreffer">问题</a>，但从去年11月到今年5月，回帖的所有人都遇到同样的问题而没有办法解决，我已经放弃了。</p>
<h3 id="raspbian下自编译quorum0910-pm">Raspbian下自编译quorum(09.10 pm)</h3>
<p>树莓派上编译使用quorum的人不多，但编译ethereum的人绝对不少，现在想起来，终于意识到一件事，大部分人还是在raspbian系统下编译使用的，既然ethereum的<code>geth</code>客户端可以，quorum没道理不行。有可能不是系统的问题，因为raspbian和ubuntu其实都属于基于Debian的发行版，那就是交叉编译问题了。找不到哪里出的错，干脆直接在Raspbian下编译一次quorum吧，空间占用多一点就多一点，还是足够的，唯一的问题只有翻墙，但这是没办法的事情，而且<code>geth</code>的编译暂时还不需要，<code>istanbul-tool</code>才需要。</p>
<blockquote>
<p>注：其实raspbian下翻墙试过了，我有surfshark的账号，官方也给了步骤，<a href="https://support.surfshark.com/hc/en-us/articles/360013425373-How-to-set-up-Surfshark-VPN-on-Raspberry-Pi" target="_blank" rel="noopener noreffer">How to set up Surfshark VPN on Raspberry Pi</a>，但最后一步连接总是出错，错误提示为</p>
<p>TLS Error: TLS handshake failed</p>
<p>网上关于这个Error的问题不少，但都没起作用，就放弃了。</p>
</blockquote>
<p>重新写入了之前备份的raspbian镜像（备份真的很有用，能省好多事儿）。启动树莓派，使用预定义的静态ip登录，安装go，下载github上的quorum项目(主要是这里直接下载比<code>git clone</code>快多了)。执行编译，注意使用<code>sudo make all</code>，因为编译需要分配存储空间，不给权限过不了。</p>
<p>树莓派卡死了。。。</p>
<p>重启了一次，第二次又卡死了，看来不是意外，应该是编译出了问题，果然，等了很久后，编译退出，系统正常了，但出现了错误提示，是一个存储问题。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback"> running gcc failed: fork/exec /usr/bin/gcc: cannot allocate memory
</code></pre></td></tr></table>
</div>
</div><p>Ethereum的论坛有人在编译时遇到了同样的问题，<a href="https://ethereum.stackexchange.com/questions/12222/installing-geth-on-raspberry-pi-3-cannot-allocate-memory-error" target="_blank" rel="noopener noreffer">Installing geth on Raspberry Pi 3 - cannot allocate memory error</a>，回帖提到是因为编译所需的内存不够的缘故，建议杀掉内存占用大而且不用的进程。使用<code>free -h</code>查看</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">              total        used        free      shared  buff/cache   available
Mem:          926Mi       119Mi       575Mi       7.0Mi       231Mi       744Mi
Swap:          99Mi          0B        99Mi
</code></pre></td></tr></table>
</div>
</div><p>不算少啊，700多M呢，再用<code>top</code>命令看进程，并按<code>M</code>键按内存占用排序，发现杀哪个进程都不合适。回帖中还有人提到可以调整交换空间大小，就是第二行的Swap，树莓派默认100M，可以调大点，问题的说明及解决方案见<a href="https://raspberrypi.stackexchange.com/questions/70/how-to-set-up-swap-space" target="_blank" rel="noopener noreffer">How to set up swap space</a>。</p>
<p>树莓派使用<code>dphys-swapfile</code>文件定义交换空间大小，打开配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ sudo nano /etc/dphys-swapfile
</code></pre></td></tr></table>
</div>
</div><p>启用内容只有一行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">CONF_SWAPSIZE=100
</code></pre></td></tr></table>
</div>
</div><p>代表默认100M交换空间大小，把数值改成合适的内容，我直接改了1024。然后重新启用新的配置文件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">$ sudo /etc/init.d/dphys-swapfile restart
</code></pre></td></tr></table>
</div>
</div><p>完成后再用<code>free -h</code>命令查看交换空间大小就变了，此时重新编译，编译速度会大大加快，等待一段时间后，编译顺利执行完毕。将编译得到的文件复制到/usr/local/bin目录下。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo cp build/bin/geth /usr/local/bin
$ sudo cp build/bin/bootnode /usr/local/bin
<span class="c1"># 验证</span>
$ geth version
</code></pre></td></tr></table>
</div>
</div><p>成功。</p>
<h3 id="istantul-tool0911-am">istantul-tool(09.11 am)</h3>
<p>istantul-tool的编译毫无办法，编译过程要访问google，有些ip无法访问，但既然这里编译没有指明针对arm架构，明天把虚拟机编译好的文件拿过来试试。</p>
<p>Linux编译得到的istanbul文件在树莓派中无法执行，错误提示为</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">-bash: ./istanbul: cannot execute binary file: Exec format error
</code></pre></td></tr></table>
</div>
</div><p>使用<code>file istanbul</code>命令查看文件信息</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">istanbul: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64                                                                                                                        .so.2, for GNU/Linux 3.2.0, Go BuildID=Whu77pcg5_4qdJyzC6lH/RiHbDbxGfs3BFqYFYhdk/Uvgfkwy9en1ShuGpCcPB/qCr7Qg3bewybrm4                                                                                                                        vmE3B, BuildID[sha1]=588353ce35513ef4a2d9695f458a338e226093b1, not stripped
</code></pre></td></tr></table>
</div>
</div><p>x86-64的，看来还是架构相关，项目本身没有提供对arm的编译功能，没有办法了。不过有可能不需要在树莓派中运行，我们只需要在作为主节点的虚拟机利用它生成各节点数据，然后拷贝到树莓派中就行。</p>
<h3 id="运行geth文件0911-am">运行geth文件（09.11 am）</h3>
<p>直接拷贝编译的geth文件到另一个树莓派，并使用<code>cp</code>命令复制到/usr/local/bin目录无法执行，提示</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-fallback" data-lang="fallback">-bash: /usr/local/bin/geth: Permission denied
</code></pre></td></tr></table>
</div>
</div><p>是因为没有执行权限，使用<code>chmod</code>命令授予权限即可顺利执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">cd</span> quorum
$ sudo cp build/bin/geth /usr/local/bin
$ sudo chmod +x /usr/local/bin/geth
$ geth version
WARN <span class="o">[</span>09-11<span class="p">|</span>03:13:38.840<span class="o">]</span> Sanitizing cache to Go<span class="err">&#39;</span>s GC limits       <span class="nv">provided</span><span class="o">=</span><span class="m">1024</span> <span class="nv">updated</span><span class="o">=</span><span class="m">308</span>
Geth
Version: 1.8.18-stable
Quorum Version: 2.2.5
Architecture: arm
Protocol Versions: <span class="o">[</span><span class="m">63</span> 62<span class="o">]</span>
Network Id: <span class="m">1337</span>
Go Version: go1.11.6
Operating System: linux
<span class="nv">GOPATH</span><span class="o">=</span>
<span class="nv">GOROOT</span><span class="o">=</span>/usr/lib/go-1.11
</code></pre></td></tr></table>
</div>
</div><p>这样看来，交叉编译的结果也不是因为系统不支持，应该也是没有执行权限，下面是使用geth version命令测试交叉编译的geth的结果。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">WARN <span class="o">[</span>09-11<span class="p">|</span>03:27:52.671<span class="o">]</span> Sanitizing cache to Go<span class="err">&#39;</span>s GC limits       <span class="nv">provided</span><span class="o">=</span><span class="m">1024</span>                                      <span class="nv">updated</span><span class="o">=</span><span class="m">308</span>
Geth
Version: 1.8.18-stable
Git Commit: 7e87e403407fcb3b3c417739eef2fe1dae923add
Quorum Version: 2.2.5
Architecture: arm
Protocol Versions: <span class="o">[</span><span class="m">63</span> 62<span class="o">]</span>
Network Id: <span class="m">1337</span>
Go Version: go1.12
Operating System: linux
<span class="nv">GOPATH</span><span class="o">=</span>
<span class="nv">GOROOT</span><span class="o">=</span>/usr/local/go
</code></pre></td></tr></table>
</div>
</div><p>走了好多弯路。。。原来一开始的结果就可以。</p>
]]></description></item><item><title>树莓派和虚拟机组网出现的问题及解决思路</title><link>https://shuzang.github.io/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%92%8C%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BB%84%E7%BD%91%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF/</link><pubDate>Fri, 06 Sep 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://shuzang.github.io/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%92%8C%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%BB%84%E7%BD%91%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF/</guid><description><![CDATA[<p>小米随身WiFi拥有两种模式，网卡模式可以令电脑搜索并接入其它的WiFi，AP模式可以开启一个WiFi供别的设备加入。现在拥有一台主机，插在上面的小米随身WiFi开启了热点模式，网关地址为192.168.191.1。另外还有两台树莓派，静态ip分别设置为了192.168.191.2和192.168..191.3。主机中利用VMware建立了一个虚拟机，系统为Ubuntu18.04。现在，虚拟机中的系统（之后简称为虚拟机）需要和两块树莓派联通。拓扑结构如下：</p>
<p></p>
<p>在NAT模式下对虚拟机设置了静态ip，但这种情况测试网络时发现虚拟机可以ping通两个树莓派，树莓派无法ping通Ubuntu，经过思考发现NAT模式下虚拟机所在网段和树莓派所在网段不是同一个，虚拟机共享了主机的网络，但树莓派处于AP热点网络下，无法访问。</p>
<p></p>
<p>将NAT模式改为桥接模式，虚拟机桥接到作为AP热点的小米随身WiFi上。但经试验无法联通，主要是因为桥接的本质是将虚拟机视为和主机在同一网络下的实体设备，桥接的对象也是拥有自己ip的终端设备，而小米随身WiFi此时处于AP模式，类似于路由器，只存在网关地址。理解了这个之后，转而将虚拟机桥接到有线网卡上，但有线网卡所在的实验室局域网和AP热点的局域网存在隔离，无法联通。</p>
<p></p>
<p>转而直接由虚拟机开启AP热点（安装驱动，利用<a href="https://github.com/oblique/create_ap" target="_blank" rel="noopener noreffer">create_ap</a>开启AP热点），如果树莓派可以访问虚拟机，就能实现互通，经实验并不可以，是因为在AP模式下，小米随身WiFi仍然是路由器状态，虚拟机在网络上的ip取决于其有线网卡，然而有线网卡的地址仍然是实验室局域网ip，和树莓派不互通。</p>
<p></p>
<p>手机开启热点，主机上的随身WiFI切换回无线网卡模式，主机和树莓派都接入手机开启的热点网络。这种情况可以互通，但由于无法对手机热点的网段进行设置，从而无法设定各设备的静态ip。</p>
<p></p>
<p>主机利用随身WiFi开启热点，树莓派和另外一台笔记本电脑接入热点网络，笔记本电脑中开启两个Ubuntu18.04的虚拟机，每个都桥接到热点网络上。这种办法没有试验，一是主机电脑将会陷入闲置，而笔记本电脑的负载将加大。二是太麻烦了，此时打算直接用路由器开局域网让所有设备接入。</p>
<p></p>
<p>找同学借了一个水星MW306R的路由器，开了个局域网，默认网关是192.168.1.1，因为树莓派的静态ip已经设好了，不想动，于是把路由器的网关改成了192.168.191.1，然后树莓派，主机，笔记本都接到路由器的网络，主机和笔记本电脑各开一个虚拟机，虚拟机桥接到无线网络上，从而实现了互通。</p>
]]></description></item><item><title>树莓派使用网线直连电脑</title><link>https://shuzang.github.io/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BA%BF%E7%9B%B4%E8%BF%9E%E7%94%B5%E8%84%91/</link><pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://shuzang.github.io/%E6%A0%91%E8%8E%93%E6%B4%BE%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BA%BF%E7%9B%B4%E8%BF%9E%E7%94%B5%E8%84%91/</guid><description><![CDATA[<p>树莓派刷好系统，要进行联网使用，手里没有显示屏和HDMI线，实验室没有路由器，电脑也没有无线网卡，唯一的网口也被占用。只能通过网线和USB网口转换器直连电脑并使用SSH登录。</p>
<h4 id="准备材料">准备材料</h4>
<ol>
<li>刷好系统的树莓派，已添加<code>ssh</code>文件启用ssh</li>
<li>一根网线</li>
<li>一台已联网的电脑</li>
<li>USB网口转换器（如果有多余的网口可以不需要）</li>
</ol>
<h4 id="连接">连接</h4>
<p>使用USB网口转换器扩展一个网口出来，使用网线连接扩展的网口和树莓派。</p>
<h4 id="网络设置">网络设置</h4>
<p>打开网络和共享中心，可看到已联网的网络<code>以太网</code>和树莓派连接的网络<code>以太网3</code></p>
<p></p>
<p><strong>设置网络共享</strong></p>
<p>点击<code>以太网3-&gt;属性-&gt;共享选项卡-&gt;双击“Internet协议版本4（TCP/IP)” –&gt; 选择“使用下面的ip地址” </code>，填入后点击确认</p>
<p></p>
<p>点击<code>以太网-&gt;属性-&gt;共享选项卡-&gt;勾选“允许其他网络用户通过此计算机的Internet连接来连接” –&gt; 在家庭网络连接下面的下拉菜单中选择 “以太网3” </code>，点击确认（出现将ip设置为“192.168.137.1”的提示也点击确定，这里出现这个是因为事先设定了以太网3的IP）</p>
<p></p>
<p><strong>查询树莓派的IP</strong></p>
<p>在PowerShell或cmd中输入<code>arp -a</code>，寻找地址<code>192.168.137.1</code>下面的IP，第一个符合IP分配规则的地址就是树莓派的地址，如果查询不到，重新拔插树莓派的网线后再次查询即可。</p>
<p></p>
<p>也可以使用<code>Advanced IP Scanner Portable</code>工具扫描查询，名称为<code>raspberrypi.mshome.net</code>的既是树莓派，见名知意。</p>
<p></p>
<p><strong>使用ssh工具连接</strong></p>
<p>使用ssh工具（我用Putty），通过查询到的IP连接树莓派，默认用户名和密码是<code>pi</code>和<code>raspberry</code></p>
]]></description></item><item><title>树莓派常用设置</title><link>https://shuzang.github.io/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/</link><pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://shuzang.github.io/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/</guid><description><![CDATA[<p>记录树莓派使用过程中经常使用的一些设置。</p>
<h2 id="1-wifi连接">1. WiFi连接</h2>
<p>这里指的是初次启动直连WiFi，主要是因为手里没有屏幕，因为使用的小米随身WiFi，所以可能有些废话，但为了保存资料，就写这里了。</p>
<h3 id="11-随身wifi设置">1.1 随身WiFi设置</h3>
<p>按随身WiFi附带的说明会下载安装一个网络管理软件<a href="http://www.miwifi.com/miwifi_download.html" target="_blank" rel="noopener noreffer">miwifi</a>，驱动会默认安装。但使用这一软件，接入设备的ip无法ping通，只能选择卸载该软件单独安装驱动。驱动名为<code>Xiaomi 802.11n USB Wireless Adapter</code>，可以用必应或谷歌直接搜索<a href="https://www.driverscape.com/download/xiaomi-802.11n-usb-wireless-adapter" target="_blank" rel="noopener noreffer">下载</a>即可。驱动安装完成后，安装<a href="http://wifi.liebao.cn/" target="_blank" rel="noopener noreffer">猎豹免费wifi</a>，用作wifi管理软件，查看到的设备ip可以使用。</p>
<p><em>注：使用win10自带的热点开启工具会出现不少问题，即使成功开启了，设备也连接不上。唯一能成功启用的方式还是在安装猎豹免费wifi后进行启用，然后关闭猎豹，不过这样就没什么意义了。</em></p>
<p>小米，百度，360的随身WiFi使用的都是mt7601u。其它关于小米随身WiFi的一些参数，查询如下：</p>
<p></p>
<h3 id="12-树莓派设置">1.2 树莓派设置</h3>
<p>将刷好 Raspbian 系统的 SD 卡用电脑读取。在 boot 分区，也就是树莓派的 <code>/boot</code> 目录下新建 wpa_supplicant.conf 文件，按照下面的参考格式填入内容并保存 wpa_supplicant.conf 文件。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nv">ctrl_interface</span><span class="o">=</span><span class="nv">DIR</span><span class="o">=</span>/var/run/wpa_supplicant <span class="nv">GROUP</span><span class="o">=</span>netdev
<span class="nv">update_config</span><span class="o">=</span><span class="m">1</span>
<span class="nv">country</span><span class="o">=</span>CN

<span class="nv">network</span><span class="o">={</span>
    <span class="nv">ssid</span><span class="o">=</span><span class="s2">&#34;WiFi名&#34;</span>
    <span class="nv">psk</span><span class="o">=</span><span class="s2">&#34;密码&#34;</span>
    <span class="nv">key_mgmt</span><span class="o">=</span>WPA-PSK
    <span class="nv">priority</span><span class="o">=</span><span class="m">1</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>priority：连接优先级，数字越大优先级越高（不可以是负数）<br>
scan_ssid：连接隐藏WiFi时需要指定该值为1</p>
<p>key_mgmt：加密方式，WPA和WPA2都填WPA-PSK，小米随身WiFi使用这种，其他的还有WEP等。</p>
<h3 id="13-开启ssh连接">1.3 开启SSH连接</h3>
<p>在boot分区新建名为<code>ssh</code>的文件，要注意小写且没有扩展名。</p>
<h3 id="14-树莓派启动并访问">1.4 树莓派启动并访问</h3>
<p>将配置好的SD卡卸载并插入树莓派，通电启动。不久即可以在WiFi管理软件中看到，设备名会是<code>raspberrypi</code>，极好辨认，同时能看到分配的ip。通过该ip使用SSH登录即可。</p>
<p><em>注：可以使用<code>arp -a</code>命令或IP扫描工具扫描，都不影响，只是从wifi管理软件看更快。</em></p>
<h2 id="2-数据源更新">2. 数据源更新</h2>
<p>基于众所周知的原因，需要将源更换为国内源，这里选择清华。</p>
<p>登录树莓派，使用管理员权限编辑/etc/apt/sources.list文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo nano /etc/apt/sources.list
</code></pre></td></tr></table>
</div>
</div><p>注释掉原来的源，将源更新为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi
deb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi
</code></pre></td></tr></table>
</div>
</div><p>最后持续键入CTRL+O  -&gt; ENTER-&gt; CTRL+X退出</p>
<p>使用管理员权限编辑/etc/apt/sources.list.d/raspi.list文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">sudo nano /etc/apt/sources.list.d/raspi.list
</code></pre></td></tr></table>
</div>
</div><p>将源更新为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">deb http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui
deb-src http://mirror.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui
</code></pre></td></tr></table>
</div>
</div><p>更新源文件列表，更新软件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo apt-get update
$ sudo apt-get upgrade
</code></pre></td></tr></table>
</div>
</div><h2 id="3-远程访问">3. 远程访问</h2>
<p>树莓派安装xrdp</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo apt-get install xrdp
</code></pre></td></tr></table>
</div>
</div><p>win10使用Cortana搜索远程桌面连接，计算机名填写树莓派ip，用户名填写pi(如果未更改)，点击连接即可，后续设置不必调整，最后可进入树莓派桌面。是在没有买专门的屏幕的情况下一种可视化的方式。</p>
<h2 id="4-修改pi账户密码开启root账户">4. 修改pi账户密码，开启root账户</h2>
<p>使用<code>password pi</code>可修改pi账户密码。</p>
<p>由于树莓派使用的Linux基于debian，root账户默认没有密码，同时没有开启。若要启用，在pi账户下执行命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo passwd root
</code></pre></td></tr></table>
</div>
</div><p>执行此命令后会提示输入两遍root密码，输入密码后执行</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo passwd --unlock root
</code></pre></td></tr></table>
</div>
</div><p>即可解锁root账户</p>
<h2 id="5-利用ftp进行文件传输">5. 利用ftp进行文件传输</h2>
<p>安装vsftpd</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo apt-get install vsftpd
</code></pre></td></tr></table>
</div>
</div><p>启用ftp服务</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo service vsftpd start
</code></pre></td></tr></table>
</div>
</div><p>编辑配置文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo nano /etc/vsftpd.conf
</code></pre></td></tr></table>
</div>
</div><p>启用对树莓派进行写操作，不然只能从树莓派往PC传文件，没法往树莓派传</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># Uncomment this to enable any form of FTP write command.</span>
<span class="nv">write_enable</span><span class="o">=</span>YES
</code></pre></td></tr></table>
</div>
</div><p>保存退出，重启vsftpd</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo service vsftpd restart
</code></pre></td></tr></table>
</div>
</div><p>最后在PC下使用FileZilla通过ssh登录即可进行文件互传。</p>
<h2 id="6-设置静态ip">6. 设置静态ip</h2>
<p>涉及网络相关的项目，设置静态ip是必要的事。需要修改<code>/etc/dhcpcd.conf</code>文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo nano /etc/dhcpcd.conf
</code></pre></td></tr></table>
</div>
</div><p>在末尾添加如下内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">interface wlan0

static <span class="nv">ip_address</span><span class="o">=</span>192.168.191.2/24
static <span class="nv">routers</span><span class="o">=</span>192.168.191.1
static <span class="nv">domain_name_servers</span><span class="o">=</span>192.168.191.1
</code></pre></td></tr></table>
</div>
</div><p>字段解释：</p>
<p><code>interface</code>：eth0代表有线，wlan0代表无线，多网卡事先用<code>ifconfig</code>命令查看确认</p>
<p><code>static ip_address</code>：静态ip地址，要确认在网段范围内</p>
<p><code>static routers</code>：网关地址</p>
<p><code>static domain_name_servers</code>：域名服务器地址，多个地址使用空格分隔。这里填了网关地址。</p>
<p>保存退出，<code>reboot</code>命令重启，重启后即可使用静态ip登录。</p>
<h2 id="7-系统备份">7. 系统备份</h2>
<p>好不容易配置好的树莓派系统，更新了源，设置了静态ip，装好了环境或需要的软件，结果一个出错需要重新来，简直崩溃，所以备份一个系统是必要的事。</p>
<p>备份系统很简单，将配置好的SD卡插入电脑，使用将系统写入SD卡的win32diskimager软件，新建以<code>.img</code>为后缀的文件，在路径栏选择该文件，选择读取等待进度条完成即可。需要注意的是，这样备份的镜像文件大小是SD卡的容量大小，所以，如果备份了一个32G大的SD卡镜像，之后无法写入16G的新SD卡。</p>
<p></p>
]]></description></item><item><title>树莓派项目构想-扫地机器人</title><link>https://shuzang.github.io/raspberry-project-sweeping-robot/</link><pubDate>Tue, 26 Mar 2019 19:40:00 +0800</pubDate><author>作者</author><guid>https://shuzang.github.io/raspberry-project-sweeping-robot/</guid><description><![CDATA[<h2 id="前言">前言</h2>
<p>本文是创新创业的结课报告，结课报告的题目要求如下：</p>
<ul>
<li>通过课程学习、课下查阅网络与图文资料，了解和掌握树莓派的功能、扩展性与应用领域（树莓派的典型和非典型应用）</li>
<li>深入分析某一个具体行业或工作的工作特点，找到痛点难点，并分析树莓派的适用性（树莓派的什么特点使其适合用于解决这一问题）</li>
<li>基于树莓派的功能，讨论如何通过增加相应的软硬件（传感器、软件模块、算法库……等），满足所关注的问题</li>
<li>以“开发产品原型并吸引风投”为目标，完成一份创业项目计划书</li>
</ul>
<p>注：不要求完成实际作品，而是强调基于技术的创意、运用工具和所学知识解决实际问题的能力、分析评价项目商业价值的能力</p>
<h2 id="项目简介">项目简介</h2>
<p>随着时代的发展，扫地机器人已走进千家万户，服务于人们的日常生活。然而，与该技术自动化的核心思想相背离，目前的扫地机器人在启动、交互和垃圾倾倒等方面还存在着不少的缺陷。同时，作为一个家庭生活的助手，扫地机器人的工作潜力也远远未开发出来。因此，我们设计了一款自动化程度更高的机器人，将内部的单片机替换为功能和接口更丰富的树莓派，集成智能语音助手，优化交互形式，同时设计了一种机械结构，利用树莓派控制它自动倾倒垃圾，改进了扫地机器人的内部和表面结构，增加了其承重能力，从而使扫地机器人更加的全能与实用。</p>
<h2 id="项目背景与意义">项目背景与意义</h2>
<p>自2013年以来，全球扫地机器人市场规模呈逐年增长态势，截止2018年底全球扫地机器人市场规模为23亿美元，而2019年预计将突破30亿美元。从市场占比看，目前美洲、亚洲和欧洲各占三分之一，美国和中国是全球最大的市场。于此同时，国内的市场竞争也极为激烈，扫地机器人品牌达数百家，科沃斯、小米、IRobot是其中的龙头企业，尤其是科沃斯，市场占比近半。</p>
<p>政策方面，国家发改委、工信部和财政部2016年共同制定的《机器人产业发展规划(2016-2020年)》明确支持机器人行业尤其是扫地机器人所在的服务机器人领域快速发展，在政策的引领下，该领域前景广阔。</p>
<p>然而，目前国内市场的主流扫地机器人倾向于在算法和软件方面进行优化，专注于核心的清扫功能和对地面环境的适应能力，未对作为机器人核心思想的自动化做进一步的改进，比如，机器人清扫完毕后仍需要人工处理垃圾，没有实现自动倾倒垃圾的功能；另外，从网络评论来看，扫地机器人在某种程度上已经成为人们的精神慰藉，也偏受家中宠物的喜爱，因此，增加机器人的交互能力和承重能力势在必行。而解决了这三方面痛点的机器人，必将成为市场新的宠儿，促进该领域技术的进一步革新。</p>
<p>另外，我们将机器人起名为大白，目的是希望它能够像《超能陆战队》中的大白一样，成为人们生活的好助手，以及精神的慰藉者。</p>
<h2 id="项目总体技术组成">项目总体技术组成</h2>
<h3 id="1-系统设计">1. 系统设计</h3>
<p>扫地机器人的核心结构如图1所示，市面上的机器人一般使用普通的单片机作为控制核心，为了更多的功能和扩展，我们将其替换为树莓派。</p>
<p></p>
<p>大白的核心功能同市面上大部分扫地机器人相似，另外添加了我们独有的三个功能，如下表所示。</p>
<table>
<thead>
<tr>
<th>基本功能</th>
<th>独有功能</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
</tr>
<tr>
<td>自动返回充电</td>
<td>智能语音交互</td>
</tr>
<tr>
<td>避障功能，感应障碍，自主脱困</td>
<td>自动倾倒垃圾</td>
</tr>
<tr>
<td>多种地形适应，包括木板、瓷砖、地毯等</td>
<td>承重结构设计</td>
</tr>
<tr>
<td>下视感应，安全防跌</td>
<td></td>
</tr>
<tr>
<td>打扫路径和功能优化，清扫更干净</td>
<td></td>
</tr>
</tbody>
</table>
<p>另外，我们为机器人挑选了极为漂亮的外壳，如图2所示，它可以进一步吸引消费者的青睐。</p>
<p></p>
<p>我们不对基本功能做过多描述，只是令树莓派代替了单片机的作用。下面分模块介绍独有的三种功能设计。</p>
<h3 id="2-自动倾倒垃圾功能">2. 自动倾倒垃圾功能</h3>
<p>扫地机器人自动倾倒垃圾的功能通过传感器、树莓派、尘盒和相关的机械结构来完成。概念图如图3所示，集成微型称重传感器的尘盒同一根金属杆连接，传感器的数据传回树莓派做处理，树莓派通过控制金属杆的伸缩和转动来倾倒垃圾。</p>
<p></p>
<p>接下来我们描述整个运行过程。通过估计尘盒所能容纳的垃圾重量，我们会事先在树莓派的程序逻辑中设定重量上限，当尘盒中垃圾超过该上限时，机器人启动倾倒垃圾流程，前往垃圾箱的路线可由用户预先自定义设定，机器人到达垃圾箱后，树莓派控制金属杆伸缩将尘盒弹出，然后转动金属杆将尘盒中的垃圾倒入垃圾箱内，最后将尘盒转动复位，收回机器人体内，继续清扫或其它工作。另外，除垃圾重量超过界限会触发倒垃圾操作外，每次清扫完整个家都会进行一次倒垃圾的操作。</p>
<h3 id="3-智能语音交互功能">3. 智能语音交互功能</h3>
<p>从“萌蠢”等词我们可以判断出人们已经对扫地机器人倾注了一定的情感，为了强化这一方面的能力，我们决定将智能语音助手与机器人的中枢—树莓派相结合，使其成为人们的精神伴侣，同时，也可以用来控制扫地机器人的工作，免去复杂的APP操作。</p>
<p>硬件层面，我们添加麦克风和扬声器作为语音的输入输出设备。软件层面，我们通过调用科大讯飞的API对录入的语音做识别，然后调用图灵机器人API获得问题答案，再通过科大讯飞的语音合成服务将语音输出，完成整个循环。除此之外，我们还针对扫地机器人的工作指令关键词做特别优化，当识别到这些关键词时，自动调用相关逻辑，实现语音控制机器人完成各种工作的功能。另外，由于整体的工作流程依赖于对各API的调用，所以工作过程需要保持联网，我们通过设置树莓派的WIFI模块使其始终保持和家里无线网络的连接。</p>
<h3 id="4-承重功能">4. 承重功能</h3>
<p>自扫地机器人面世以来，家中以猫和狗为代表的宠物与机器人的斗争就从未停止，不仅仅宠物们极其喜欢站在扫地机器人上面，如图4所示，我们自身也会觉得扫地机器人的外形很合适宠物站在上面。然而目前市场上的扫地机器人设计并没有考虑这一点，其承重能力往往不足以支持宠物的存在，而我们往往在日常生活中对宠物们这样的做法又无可奈何，因此，增加扫地机器人的承重能力刻不容缓。</p>
<p></p>
<p>通过调查得知，幼猫体重一般为70至900克，成年猫则平均为2.5-5.5千克，小型宠物犬和成年猫体重相似。而根据我们找到的资料，如小米的石头扫地机器人承重为2.3千克左右，所以，我们只需要通过一定的结构设计，就能增加足够宠物体重的承重。主要通过内部空隙填充三角形结构，表面做成翻折状来实现，就如同我们将纸不断的折叠来承重一样</p>
<h2 id="市场分析">市场分析</h2>
<p>该扫地机器人针对的消费人群主要是：</p>
<p>1）懒癌患者，希望将倒垃圾工作一起自动化的用户；</p>
<p>2）家养宠物人士，能有效防止扫地机器人被宠物破坏；</p>
<p>3）独居人士，做家务的同时完成语音助手的职能，通过聊天来给予客户精神慰藉。</p>
<h2 id="风险分析">风险分析</h2>
<p>风险在于树莓派的使用相对于普通单片机来讲，增加了一定的成本，而不论是语音助手、倒垃圾的机械结构还是承重结构都是极易仿制的东西，况且，这些思路都处于初级阶段，改进空间很大。以目前排名前三的扫地机器人厂家的市场占有量，如果在前期我们无法夺取一定的市场，将会面临艰难的竞争。</p>]]></description></item><item><title>利用树莓派作为服务器建立动态博客</title><link>https://shuzang.github.io/using-virtual-machine-as-raspberry-pi-server-to-build-dynamic-blog/</link><pubDate>Wed, 13 Mar 2019 14:32:00 +0800</pubDate><author>作者</author><guid>https://shuzang.github.io/using-virtual-machine-as-raspberry-pi-server-to-build-dynamic-blog/</guid><description><![CDATA[<h2 id="1-前言">1. 前言</h2>
<p>该工作为课程作业，主要目标为利用树莓派作为服务器，完成wordpress的配置，建立动态博客网站。详细的作业要求如下：</p>
<ol>
<li>制作raspbian系统的镜像并成功启动树莓派</li>
<li>安装apche2，mariadb，php，phpmyadmin等软件</li>
<li>安装wordpress</li>
<li>登录wordpress后台，发送任一篇技术文章</li>
<li>使用本地计算机完成对博客网站的访问</li>
</ol>
<h2 id="2-树莓派启动">2. 树莓派启动</h2>
<p>在官网下载<a href="https://www.raspberrypi.org/downloads/raspbian/" target="_blank" rel="noopener noreffer">raspbian</a>系统，利用「Win32DiskImager」软件将下载好的镜像写入准备好的SD卡。写入完成后，在boot目录下新建 <code>wpa_supplicant.conf</code> 文件，复制下面的内容到该文件并修改WIFI名和密码，保存该文件，这一步是为了在树莓派启动时令其自动连接到电脑。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nv">ctrl_interface</span><span class="o">=</span><span class="nv">DIR</span><span class="o">=</span>/var/run/wpa_supplicant <span class="nv">GROUP</span><span class="o">=</span>netdev
<span class="nv">update_config</span><span class="o">=</span><span class="m">1</span>
<span class="nv">country</span><span class="o">=</span>CN

<span class="nv">network</span><span class="o">={</span>
    <span class="nv">ssid</span><span class="o">=</span><span class="s2">&#34;WiFi名&#34;</span>
    <span class="nv">psk</span><span class="o">=</span><span class="s2">&#34;密码&#34;</span>
    <span class="nv">key_mgmt</span><span class="o">=</span>WPA-PSK
    <span class="nv">priority</span><span class="o">=</span><span class="m">1</span>
<span class="o">}</span>
</code></pre></td></tr></table>
</div>
</div><p>然后同样在boot目录下新建名为<code>ssh</code>的文件，要注意小写且没有扩展名，从而开启SSH连接。</p>
<p>将配置好的SD卡从电脑卸载并以正确的方式插入树莓派，通电启动，在路由器后台查看新加入的名称中包含<code>raspberry</code>的设备，记录其ip地址，然后使用Putty通过该地址登录树莓派。</p>
<h2 id="3-软件安装">3. 软件安装</h2>
<h3 id="apache2">apache2</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo apt-get install -y apache2
$ apachectl -v
Server version: Apache/2.4.25 <span class="o">(</span>Debian<span class="o">)</span>
Server built:   2018-11-03T18:46:19
</code></pre></td></tr></table>
</div>
</div><p>浏览器地址栏输入localhost，显示<code>It works!</code>界面</p>
<p>查看apache2状态</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ service apache2 status
● apache2.service - The Apache HTTP Server
   Loaded: loaded <span class="o">(</span>/lib/systemd/system/apache2.service<span class="p">;</span> enabled<span class="p">;</span> vendor preset: 
   Active: active <span class="o">(</span>running<span class="o">)</span> since Thu 2019-03-14 09:48:04 CST<span class="p">;</span> 2min 31s ago
 Main PID: <span class="m">2788</span> <span class="o">(</span>apache2<span class="o">)</span>
    Tasks: <span class="m">55</span> <span class="o">(</span>limit: 4915<span class="o">)</span>
   CGroup: /system.slice/apache2.service
           ├─2788 /usr/sbin/apache2 -k start
           ├─2869 /usr/sbin/apache2 -k start
           └─2870 /usr/sbin/apache2 -k start

3月 <span class="m">14</span> 09:47:48 raspberry systemd<span class="o">[</span>1<span class="o">]</span>: Starting The Apache HTTP Server...
3月 <span class="m">14</span> 09:48:04 raspberry apachectl<span class="o">[</span>2709<span class="o">]</span>: AH00558: apache2: Could not reliably d
3月 <span class="m">14</span> 09:48:04 raspberry systemd<span class="o">[</span>1<span class="o">]</span>: Started The Apache HTTP Server.
lines 1-13/13 <span class="o">(</span>END<span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="mariadb">mariadb</h3>
<p>以下两条命令没什么区别，安装的软件包数量和名称都一样</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo apt-get install -y mariadb-server        <span class="c1"># 或下面这条，执行任一句即可</span>
$ sudo apt-get install -y mysql-server mysql-client
$ mysql -V
mysql  Ver 15.1 Distrib 10.1.37-MariaDB, <span class="k">for</span> debian-linux-gnu <span class="o">(</span>i686<span class="o">)</span> using readline 5.2
</code></pre></td></tr></table>
</div>
</div><p>进入数据库设置密码，新建用户，授予权限</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo mysql -u root -p          <span class="c1">#按回车键输入密码</span>
&gt; create user <span class="s1">&#39;shuzang&#39;</span>@<span class="s1">&#39;localhost&#39;</span> identified by <span class="s1">&#39;2427&#39;</span><span class="p">;</span>      <span class="c1">#按回车键</span>
&gt; grant all privileges on *.* to <span class="s1">&#39;shuzang&#39;</span>@<span class="s1">&#39;localhost&#39;</span><span class="p">;</span>      <span class="c1">#给权限</span>
&gt; flush privileges<span class="p">;</span>                     <span class="c1"># 刷新权限</span>
&gt; show grants <span class="k">for</span> <span class="s1">&#39;shuzang&#39;</span>@<span class="s1">&#39;localhost&#39;</span><span class="p">;</span>   <span class="c1">#查看用户权限</span>
&gt; exit<span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="php">php</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo apt-get install -y php php-mysql php-fpm
$ php -v
PHP 7.0.33-0+deb9u3 <span class="o">(</span>cli<span class="o">)</span> <span class="o">(</span>built: Mar  <span class="m">8</span> <span class="m">2019</span> 10:01:24<span class="o">)</span> <span class="o">(</span> NTS <span class="o">)</span>
</code></pre></td></tr></table>
</div>
</div><p>有讲解决PHP无法解析（只显示代码）的问题，需要安装php7.0-mysql和libapache2-mod-php7.0，但是查看上面这条命令安装的软件包你会发现这两个已经装过了，所以不管它，后面也证实了没有出现这个问题。</p>
<h3 id="phpmyadmin">phpmyadmin</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo apt-get install -y phpmyadmin
</code></pre></td></tr></table>
</div>
</div><p>安装时会出现一些选项，选择如下：</p>
<ul>
<li>Web server：apache2</li>
<li>Configure database for phpmyadmin with dbconfig-common?：yes</li>
<li>mysql application password for phpmyadmin：xxx   (&lsquo;xxx&rsquo;是自己输的密码)</li>
<li>再次输入密码确认</li>
</ul>
<p>授予执行权限和开启rewrite模块</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo chmod <span class="m">777</span> /var/www/html
$ sudo a2enmod rewrite
</code></pre></td></tr></table>
</div>
</div><p>把phpmyadmin软连接到/var/www/html</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo ln -s /usr/share/phpmyadmin /var/www/html
</code></pre></td></tr></table>
</div>
</div><p>重启apache2</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ sudo systemctl restart apache2
</code></pre></td></tr></table>
</div>
</div><h3 id="wordpress">wordpress</h3>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">cd</span> /var/www/html
$ sudo wget https://cn.wordpress.org/latest-zh_CN.tar.gz
$ sudo tar -zxvf latest-zh_CN.tar.gz
$ sudo mv wordpress liuyang
$ sudo chmod <span class="m">777</span> liuyang
</code></pre></td></tr></table>
</div>
</div><h2 id="4-建立动态博客">4. 建立动态博客</h2>
<h3 id="新建数据库">新建数据库</h3>
<p>浏览器地址栏输入<code>localhost/phpmyadmin</code>，出现界面，输入数据库的用户名密码</p>
<p>进入数据库管理页面，新建数据库，输入数据库名</p>
<p>空数据库就不用管了，不用新建表</p>
<h3 id="配置wordpress">配置wordpress</h3>
<p>浏览器地址栏输入<code>localhost/liuyang</code>，进入五分钟安装过程。</p>
<p></p>
<p>填写博客信息</p>
<p></p>
<p>在最后一步选择「登录」按钮，跳转到登录界面登录</p>
<h3 id="主题安装">主题安装</h3>
<p>登录后进入仪表盘，选择侧边栏「外观—&gt;主题」，获取安装主题origami(可以自由选择其它主题)</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">cd</span> /var/www/html/liuyang/wp-content/themes 
$ sudo wgethttps://github.com/syfxlin/origami/releases/download/v1.0.5/Origami-1.0.5.zip
$ sudo unzip Origami-1.0.5.zip
$ sudo rm -rf Origami-1.0.5.zip
</code></pre></td></tr></table>
</div>
</div><p>回到主题页面刷新可以看到安装的主题，启用</p>
<h3 id="发布文章">发布文章</h3>
<p>点「文章—&gt;写文章」，然后写一篇文章，发布。可以点右上角预览按钮预览，也可以点左上角主页按钮进入博客网站主页。博客页面如下：</p>
<p></p>
<p>在本地计算机访问虚拟机中wordpress时，CSS无法加载，需要在仪表盘<code>设置—&gt;常规</code>更改<code>wordpress地址</code>和<code>站点地址</code>，把两个地址中的localhost都改成虚拟机ip</p>
<p></p>
<p>保存设置，然后在本地计算机使用该地址访问，即可成功显示网站和博客文章</p>
<p></p>
<h2 id="参考资料">参考资料</h2>
<p>[1] 简书-cyzyjin. <a href="https://www.jianshu.com/p/fd9f3743f094" target="_blank" rel="noopener noreffer">debian9</a> LAMP安装. 2018.12.</p>
<p>[3] CSDN-霍莉雪特. <a href="https://blog.csdn.net/qq_18995513/article/details/73012247" target="_blank" rel="noopener noreffer">外网访问WordPress时无法加载样式表CSS</a>. 2017.06.</p>
<p>[4] NEUQ金课行动. <a href="https://www.bilibili.com/video/av39657396" target="_blank" rel="noopener noreffer">2019创客实战训练营-11树莓派搭建WORDPRESS网站</a>. 2019.01.</p>
<p>[5] NEUQ金课行动. <a href="https://www.bilibili.com/video/av45274204" target="_blank" rel="noopener noreffer">使用虚拟机安装X86版本的raspbian</a>. 2019.03.</p>
]]></description></item></channel></rss>